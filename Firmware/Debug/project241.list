
project241.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009900  08009900  0000a900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df0  08009df0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009df0  08009df0  0000adf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009df8  08009df8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df8  08009df8  0000adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dfc  08009dfc  0000adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009e00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d4  08009fd4  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009fd4  0000b54c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb59  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4a  00000000  00000000  00017d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00019ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b2  00000000  00000000  0001a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c5  00000000  00000000  0001b2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3ac  00000000  00000000  00033a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008871f  00000000  00000000  00042e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  000cb5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cfe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080098e8 	.word	0x080098e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080098e8 	.word	0x080098e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000bd4:	b4b0      	push	{r4, r5, r7}
 8000bd6:	b08f      	sub	sp, #60	@ 0x3c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000bdc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000be2:	2307      	movs	r3, #7
 8000be4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000c00:	2308      	movs	r3, #8
 8000c02:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461d      	mov	r5, r3
 8000c08:	f107 040c 	add.w	r4, r7, #12
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	373c      	adds	r7, #60	@ 0x3c
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bcb0      	pop	{r4, r5, r7}
 8000c24:	4770      	bx	lr

08000c26 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6898      	ldr	r0, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	899b      	ldrh	r3, [r3, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f001 fcef 	bl	800261c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f001 fa36 	bl	80020b0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f001 fce4 	bl	800261c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c54:	2064      	movs	r0, #100	@ 0x64
 8000c56:	f001 fa2b 	bl	80020b0 <HAL_Delay>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f9ff 	bl	8001072 <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d107      	bne.n	8000c92 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	f023 0307 	bic.w	r3, r3, #7
 8000c88:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
 8000c90:	e03e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10c      	bne.n	8000cb2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c9c:	f023 0307 	bic.w	r3, r3, #7
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	e02e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d10c      	bne.n	8000cd2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cbc:	f023 0307 	bic.w	r3, r3, #7
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	f043 0303 	orr.w	r3, r3, #3
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	61da      	str	r2, [r3, #28]
 8000cd0:	e01e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d10c      	bne.n	8000cf2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cdc:	f023 0307 	bic.w	r3, r3, #7
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f043 0305 	orr.w	r3, r3, #5
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2205      	movs	r2, #5
 8000cee:	61da      	str	r2, [r3, #28]
 8000cf0:	e00e      	b.n	8000d10 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d10b      	bne.n	8000d10 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cfc:	f023 0307 	bic.w	r3, r3, #7
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	f043 0306 	orr.w	r3, r3, #6
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2101      	movs	r1, #1
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f9c5 	bl	80010a6 <LoRa_write>
	//HAL_Delay(10);
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	889b      	ldrh	r3, [r3, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f001 fc6c 	bl	800261c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6998      	ldr	r0, [r3, #24]
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	f003 faf6 	bl	8004340 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d54:	bf00      	nop
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fef6 	bl	8004b4c <HAL_SPI_GetState>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d1f7      	bne.n	8000d56 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6998      	ldr	r0, [r3, #24]
 8000d6a:	8b3a      	ldrh	r2, [r7, #24]
 8000d6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	f003 fc29 	bl	80045c8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d76:	bf00      	nop
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fee5 	bl	8004b4c <HAL_SPI_GetState>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d1f7      	bne.n	8000d78 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	f001 fc42 	bl	800261c <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f001 fc2e 	bl	800261c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6998      	ldr	r0, [r3, #24]
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	f003 fab8 	bl	8004340 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000dd0:	bf00      	nop
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 feb8 	bl	8004b4c <HAL_SPI_GetState>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d1f7      	bne.n	8000dd2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6998      	ldr	r0, [r3, #24]
 8000de6:	8b3a      	ldrh	r2, [r7, #24]
 8000de8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	f003 faa7 	bl	8004340 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000df2:	bf00      	nop
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fea7 	bl	8004b4c <HAL_SPI_GetState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d1f7      	bne.n	8000df4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f001 fc04 	bl	800261c <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000e28:	2126      	movs	r1, #38	@ 0x26
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f921 	bl	8001072 <LoRa_read>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e003      	b.n	8000e4c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	f023 0308 	bic.w	r3, r3, #8
 8000e4a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2126      	movs	r1, #38	@ 0x26
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f927 	bl	80010a6 <LoRa_write>
	HAL_Delay(10);
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f001 f929 	bl	80020b0 <HAL_Delay>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b096      	sub	sp, #88	@ 0x58
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e70:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <LoRa_setAutoLDO+0x68>)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4611      	mov	r1, r2
 8000e78:	2250      	movs	r2, #80	@ 0x50
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f9f7 	bl	800626e <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e86:	461a      	mov	r2, r3
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fab9 	bl	8000404 <__aeabi_i2d>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	3358      	adds	r3, #88	@ 0x58
 8000e9c:	443b      	add	r3, r7
 8000e9e:	3b50      	subs	r3, #80	@ 0x50
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fc42 	bl	800072c <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fdc2 	bl	8000a38 <__aeabi_d2iz>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	bfcc      	ite	gt
 8000eba:	2301      	movgt	r3, #1
 8000ebc:	2300      	movle	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffaa 	bl	8000e1c <LoRa_setLowDaraRateOptimization>
}
 8000ec8:	bf00      	nop
 8000eca:	3758      	adds	r7, #88	@ 0x58
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08009900 	.word	0x08009900

08000ed4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	04db      	lsls	r3, r3, #19
 8000ee2:	115b      	asrs	r3, r3, #5
 8000ee4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	0c1b      	lsrs	r3, r3, #16
 8000eea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2106      	movs	r1, #6
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f8d7 	bl	80010a6 <LoRa_write>
	HAL_Delay(5);
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f001 f8d9 	bl	80020b0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2107      	movs	r1, #7
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8cb 	bl	80010a6 <LoRa_write>
	HAL_Delay(5);
 8000f10:	2005      	movs	r0, #5
 8000f12:	f001 f8cd 	bl	80020b0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000f1a:	7afb      	ldrb	r3, [r7, #11]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2108      	movs	r1, #8
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f8c0 	bl	80010a6 <LoRa_write>
	HAL_Delay(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f001 f8c2 	bl	80020b0 <HAL_Delay>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	dd01      	ble.n	8000f48 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000f44:	230c      	movs	r3, #12
 8000f46:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	dc01      	bgt.n	8000f52 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f52:	211e      	movs	r1, #30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f88c 	bl	8001072 <LoRa_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f001 f8a6 	bl	80020b0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	211e      	movs	r1, #30
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f891 	bl	80010a6 <LoRa_write>
	HAL_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f001 f893 	bl	80020b0 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff6c 	bl	8000e68 <LoRa_setAutoLDO>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2109      	movs	r1, #9
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f87b 	bl	80010a6 <LoRa_write>
	HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f001 f87d 	bl	80020b0 <HAL_Delay>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fd4:	d801      	bhi.n	8000fda <LoRa_setOCP+0x1a>
		current = 45;
 8000fd6:	232d      	movs	r3, #45	@ 0x2d
 8000fd8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fde:	d901      	bls.n	8000fe4 <LoRa_setOCP+0x24>
		current = 240;
 8000fe0:	23f0      	movs	r3, #240	@ 0xf0
 8000fe2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b78      	cmp	r3, #120	@ 0x78
 8000fe8:	d809      	bhi.n	8000ffe <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b2d      	subs	r3, #45	@ 0x2d
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <LoRa_setOCP+0x78>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	1052      	asrs	r2, r2, #1
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e00b      	b.n	8001016 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2bf0      	cmp	r3, #240	@ 0xf0
 8001002:	d808      	bhi.n	8001016 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	331e      	adds	r3, #30
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <LoRa_setOCP+0x78>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1092      	asrs	r2, r2, #2
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3320      	adds	r3, #32
 800101a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	461a      	mov	r2, r3
 8001020:	210b      	movs	r1, #11
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f83f 	bl	80010a6 <LoRa_write>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f001 f841 	bl	80020b0 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	66666667 	.word	0x66666667

0800103c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001044:	211e      	movs	r1, #30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f813 	bl	8001072 <LoRa_read>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f043 0307 	orr.w	r3, r3, #7
 8001056:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	461a      	mov	r2, r3
 800105c:	211e      	movs	r1, #30
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f821 	bl	80010a6 <LoRa_write>
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f001 f823 	bl	80020b0 <HAL_Delay>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af02      	add	r7, sp, #8
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	f107 010e 	add.w	r1, r7, #14
 8001090:	2201      	movs	r2, #1
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe44 	bl	8000d24 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af02      	add	r7, sp, #8
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
 80010b2:	4613      	mov	r3, r2
 80010b4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73bb      	strb	r3, [r7, #14]
	data = value;
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	f107 010e 	add.w	r1, r7, #14
 80010cc:	2201      	movs	r2, #1
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	2201      	movs	r2, #1
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fe64 	bl	8000da0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	461a      	mov	r2, r3
 80010ec:	460b      	mov	r3, r1
 80010ee:	72fb      	strb	r3, [r7, #11]
 80010f0:	4613      	mov	r3, r2
 80010f2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f001 fa87 	bl	800261c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6998      	ldr	r0, [r3, #24]
 8001112:	f107 0117 	add.w	r1, r7, #23
 8001116:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800111a:	2201      	movs	r2, #1
 800111c:	f003 f910 	bl	8004340 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001120:	bf00      	nop
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fd10 	bl	8004b4c <HAL_SPI_GetState>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d1f7      	bne.n	8001122 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6998      	ldr	r0, [r3, #24]
 8001136:	7abb      	ldrb	r3, [r7, #10]
 8001138:	b29a      	uxth	r2, r3
 800113a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f003 f8fe 	bl	8004340 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001144:	bf00      	nop
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fcfe 	bl	8004b4c <HAL_SPI_GetState>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d1f7      	bne.n	8001146 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	889b      	ldrh	r3, [r3, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	f001 fa5b 	bl	800261c <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]

	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	4611      	mov	r1, r2
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800119e:	2101      	movs	r1, #1
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7ff fd5e 	bl	8000c62 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80011a6:	210e      	movs	r1, #14
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff ff62 	bl	8001072 <LoRa_read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	461a      	mov	r2, r3
 80011b6:	210d      	movs	r1, #13
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff ff74 	bl	80010a6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2122      	movs	r1, #34	@ 0x22
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff6e 	bl	80010a6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	2100      	movs	r1, #0
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff ff85 	bl	80010e0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80011d6:	2103      	movs	r1, #3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fd42 	bl	8000c62 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011de:	2112      	movs	r1, #18
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff46 	bl	8001072 <LoRa_read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80011f4:	22ff      	movs	r2, #255	@ 0xff
 80011f6:	2112      	movs	r1, #18
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff ff54 	bl	80010a6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80011fe:	6979      	ldr	r1, [r7, #20]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fd2e 	bl	8000c62 <LoRa_gotoMode>
			return 1;
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	3b01      	subs	r3, #1
 800120e:	80bb      	strh	r3, [r7, #4]
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fd22 	bl	8000c62 <LoRa_gotoMode>
				return 0;
 800121e:	2300      	movs	r3, #0
 8001220:	e003      	b.n	800122a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 ff44 	bl	80020b0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001228:	e7d9      	b.n	80011de <LoRa_transmit+0x5c>
	}
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800123a:	2105      	movs	r1, #5
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd10 	bl	8000c62 <LoRa_gotoMode>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff8b 	bl	800116e <LoRa_isvalid>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8096 	beq.w	800138c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fcfd 	bl	8000c62 <LoRa_gotoMode>
			HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f000 ff21 	bl	80020b0 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800126e:	2101      	movs	r1, #1
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fefe 	bl	8001072 <LoRa_read>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800127a:	200a      	movs	r0, #10
 800127c:	f000 ff18 	bl	80020b0 <HAL_Delay>
			data = read | 0x80;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001286:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	461a      	mov	r2, r3
 800128c:	2101      	movs	r1, #1
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff09 	bl	80010a6 <LoRa_write>
			HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f000 ff0b 	bl	80020b0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4619      	mov	r1, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fe17 	bl	8000ed4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe72 	bl	8000f98 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe7f 	bl	8000fc0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80012c2:	2223      	movs	r2, #35	@ 0x23
 80012c4:	210c      	movs	r1, #12
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff feed 	bl	80010a6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff feb5 	bl	800103c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fe2a 	bl	8000f34 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80012e0:	22ff      	movs	r2, #255	@ 0xff
 80012e2:	211f      	movs	r1, #31
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fede 	bl	80010a6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	461a      	mov	r2, r3
 800130a:	211d      	movs	r1, #29
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff feca 	bl	80010a6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fda8 	bl	8000e68 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	2120      	movs	r1, #32
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff febd 	bl	80010a6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2121      	movs	r1, #33	@ 0x21
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff feb5 	bl	80010a6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800133c:	2140      	movs	r1, #64	@ 0x40
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fe97 	bl	8001072 <LoRa_read>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800134e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	461a      	mov	r2, r3
 8001354:	2140      	movs	r1, #64	@ 0x40
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fea5 	bl	80010a6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800135c:	2101      	movs	r1, #1
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fc7f 	bl	8000c62 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800136a:	200a      	movs	r0, #10
 800136c:	f000 fea0 	bl	80020b0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001370:	2142      	movs	r1, #66	@ 0x42
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fe7d 	bl	8001072 <LoRa_read>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d101      	bne.n	8001386 <LoRa_init+0x13c>
				return LORA_OK;
 8001382:	23c8      	movs	r3, #200	@ 0xc8
 8001384:	e004      	b.n	8001390 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001386:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800138a:	e001      	b.n	8001390 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800138c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <__io_putchar>:
float wind_speed = 0;
uint32_t wind_count = 0;
uint32_t package =0;
extern check;
int __io_putchar(int ch)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart3, &temp, 1, HAL_MAX_DELAY);
 80013a6:	f107 010f 	add.w	r1, r7, #15
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	2201      	movs	r2, #1
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <__io_putchar+0x28>)
 80013b2:	f003 fd34 	bl	8004e1e <HAL_UART_Transmit>
  return ch;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002e4 	.word	0x200002e4
 80013c4:	00000000 	.word	0x00000000

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b0d5      	sub	sp, #340	@ 0x154
 80013cc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f000 fe0d 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f927 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 fa23 	bl	8001820 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013da:	f000 f969 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013de:	f000 f9cb 	bl	8001778 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80013e2:	f000 f993 	bl	800170c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80013e6:	f000 f9f1 	bl	80017cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  hdc1080_init(&hi2c1,Temperature_Resolution_14_bit,Humidity_Resolution_14_bit);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	487e      	ldr	r0, [pc, #504]	@ (80015e8 <main+0x220>)
 80013f0:	f000 fd41 	bl	8001e76 <hdc1080_init>
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013fa:	487c      	ldr	r0, [pc, #496]	@ (80015ec <main+0x224>)
 80013fc:	f001 f90e 	bl	800261c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001400:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001404:	f000 fe54 	bl	80020b0 <HAL_Delay>
  myLoRa = newLoRa();
 8001408:	4c79      	ldr	r4, [pc, #484]	@ (80015f0 <main+0x228>)
 800140a:	463b      	mov	r3, r7
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fbe1 	bl	8000bd4 <newLoRa>
 8001412:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001416:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800141a:	461d      	mov	r5, r3
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001428:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 800142c:	4b70      	ldr	r3, [pc, #448]	@ (80015f0 <main+0x228>)
 800142e:	4a71      	ldr	r2, [pc, #452]	@ (80015f4 <main+0x22c>)
 8001430:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001432:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <main+0x228>)
 8001434:	2210      	movs	r2, #16
 8001436:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001438:	4b6d      	ldr	r3, [pc, #436]	@ (80015f0 <main+0x228>)
 800143a:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <main+0x22c>)
 800143c:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 800143e:	4b6c      	ldr	r3, [pc, #432]	@ (80015f0 <main+0x228>)
 8001440:	2204      	movs	r2, #4
 8001442:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001444:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <main+0x228>)
 8001446:	4a6b      	ldr	r2, [pc, #428]	@ (80015f4 <main+0x22c>)
 8001448:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800144a:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <main+0x228>)
 800144c:	2208      	movs	r2, #8
 800144e:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001450:	4b67      	ldr	r3, [pc, #412]	@ (80015f0 <main+0x228>)
 8001452:	4a69      	ldr	r2, [pc, #420]	@ (80015f8 <main+0x230>)
 8001454:	619a      	str	r2, [r3, #24]


  myLoRa.frequency             = 433;             // default = 433 MHz
 8001456:	4b66      	ldr	r3, [pc, #408]	@ (80015f0 <main+0x228>)
 8001458:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800145c:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800145e:	4b64      	ldr	r3, [pc, #400]	@ (80015f0 <main+0x228>)
 8001460:	2207      	movs	r2, #7
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001466:	4b62      	ldr	r3, [pc, #392]	@ (80015f0 <main+0x228>)
 8001468:	2207      	movs	r2, #7
 800146a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800146e:	4b60      	ldr	r3, [pc, #384]	@ (80015f0 <main+0x228>)
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001476:	4b5e      	ldr	r3, [pc, #376]	@ (80015f0 <main+0x228>)
 8001478:	22ff      	movs	r2, #255	@ 0xff
 800147a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 800147e:	4b5c      	ldr	r3, [pc, #368]	@ (80015f0 <main+0x228>)
 8001480:	2264      	movs	r2, #100	@ 0x64
 8001482:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001486:	4b5a      	ldr	r3, [pc, #360]	@ (80015f0 <main+0x228>)
 8001488:	2208      	movs	r2, #8
 800148a:	851a      	strh	r2, [r3, #40]	@ 0x28

  LoRa_reset(&myLoRa);
 800148c:	4858      	ldr	r0, [pc, #352]	@ (80015f0 <main+0x228>)
 800148e:	f7ff fbca 	bl	8000c26 <LoRa_reset>
  if(LoRa_init(&myLoRa)==LORA_OK){
 8001492:	4857      	ldr	r0, [pc, #348]	@ (80015f0 <main+0x228>)
 8001494:	f7ff fed9 	bl	800124a <LoRa_init>
 8001498:	4603      	mov	r3, r0
 800149a:	2bc8      	cmp	r3, #200	@ 0xc8
 800149c:	d108      	bne.n	80014b0 <main+0xe8>
	  LoRa_stat = 1;
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <main+0x234>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014aa:	4850      	ldr	r0, [pc, #320]	@ (80015ec <main+0x224>)
 80014ac:	f001 f8b6 	bl	800261c <HAL_GPIO_WritePin>
  }


  LoRa_startReceiving(&myLoRa);
 80014b0:	484f      	ldr	r0, [pc, #316]	@ (80015f0 <main+0x228>)
 80014b2:	f7ff febe 	bl	8001232 <LoRa_startReceiving>

  uint8_t TxBuffer[128];
  TxBuffer[0] = '2';
 80014b6:	2332      	movs	r3, #50	@ 0x32
 80014b8:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
  TxBuffer[1] = '5';
 80014bc:	2335      	movs	r3, #53	@ 0x35
 80014be:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
  TxBuffer[2] = '&';
 80014c2:	2326      	movs	r3, #38	@ 0x26
 80014c4:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
  TxBuffer[3] = '6';
 80014c8:	2336      	movs	r3, #54	@ 0x36
 80014ca:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
  TxBuffer[4] = '7';
 80014ce:	2337      	movs	r3, #55	@ 0x37
 80014d0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4


  uint8_t TxBuffer_1[128];
  TxBuffer_1[0] = 'H';
 80014d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014dc:	2248      	movs	r2, #72	@ 0x48
 80014de:	701a      	strb	r2, [r3, #0]
  TxBuffer_1[1] = 'E';
 80014e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014e8:	2245      	movs	r2, #69	@ 0x45
 80014ea:	705a      	strb	r2, [r3, #1]
  TxBuffer_1[2] = 'L';
 80014ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014f4:	224c      	movs	r2, #76	@ 0x4c
 80014f6:	709a      	strb	r2, [r3, #2]


  RxBuffer[0] = '2';
 80014f8:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <main+0x238>)
 80014fa:	2232      	movs	r2, #50	@ 0x32
 80014fc:	701a      	strb	r2, [r3, #0]
  RxBuffer[1] = '5';
 80014fe:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <main+0x238>)
 8001500:	2235      	movs	r2, #53	@ 0x35
 8001502:	705a      	strb	r2, [r3, #1]
  RxBuffer[2] = '&';
 8001504:	4b3e      	ldr	r3, [pc, #248]	@ (8001600 <main+0x238>)
 8001506:	2226      	movs	r2, #38	@ 0x26
 8001508:	709a      	strb	r2, [r3, #2]
  RxBuffer[3] = '6';
 800150a:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <main+0x238>)
 800150c:	2236      	movs	r2, #54	@ 0x36
 800150e:	70da      	strb	r2, [r3, #3]
  RxBuffer[4] = '7';
 8001510:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <main+0x238>)
 8001512:	2237      	movs	r2, #55	@ 0x37
 8001514:	711a      	strb	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(check == 1)
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <main+0x23c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d1fb      	bne.n	8001516 <main+0x14e>
		{
			wind_speed = 0.48*wind_count;
 800151e:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <main+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ff5e 	bl	80003e4 <__aeabi_ui2d>
 8001528:	a32d      	add	r3, pc, #180	@ (adr r3, 80015e0 <main+0x218>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7fe ffd3 	bl	80004d8 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fac5 	bl	8000ac8 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	4a32      	ldr	r2, [pc, #200]	@ (800160c <main+0x244>)
 8001542:	6013      	str	r3, [r2, #0]
			check = 0;
 8001544:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <main+0x23c>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
			wind_count = 0;
 800154a:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <main+0x240>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
			hdc1080_start_measurement(&hi2c1,(float*)&temp,(uint8_t*)&humi);
 8001550:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <main+0x248>)
 8001552:	4930      	ldr	r1, [pc, #192]	@ (8001614 <main+0x24c>)
 8001554:	4824      	ldr	r0, [pc, #144]	@ (80015e8 <main+0x220>)
 8001556:	f000 fccb 	bl	8001ef0 <hdc1080_start_measurement>
			snprintf(TxBuffer,sizeof(TxBuffer),"package %d,Toc do gio: %.2f, Luong mua: %d\r\nNhiet do: %.2f, Do am: %d\r\n",package,wind_speed,0,temp,humi);
 800155a:	4b2f      	ldr	r3, [pc, #188]	@ (8001618 <main+0x250>)
 800155c:	681e      	ldr	r6, [r3, #0]
 800155e:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <main+0x244>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <main+0x24c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff59 	bl	8000428 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4925      	ldr	r1, [pc, #148]	@ (8001610 <main+0x248>)
 800157c:	7809      	ldrb	r1, [r1, #0]
 800157e:	b2c9      	uxtb	r1, r1
 8001580:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001584:	9106      	str	r1, [sp, #24]
 8001586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158a:	2300      	movs	r3, #0
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	e9cd 4500 	strd	r4, r5, [sp]
 8001592:	4633      	mov	r3, r6
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <main+0x254>)
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	f004 fd44 	bl	8006024 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 800159c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fdd5 	bl	8000150 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	481b      	ldr	r0, [pc, #108]	@ (8001620 <main+0x258>)
 80015b4:	f003 fc33 	bl	8004e1e <HAL_UART_Transmit>
			package++;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <main+0x250>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <main+0x250>)
 80015c0:	6013      	str	r3, [r2, #0]
			LoRa_transmit(&myLoRa, TxBuffer, strlen(TxBuffer), 1000);
 80015c2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fdc2 	bl	8000150 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80015d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <main+0x228>)
 80015da:	f7ff fdd2 	bl	8001182 <LoRa_transmit>
		if(check == 1)
 80015de:	e79a      	b.n	8001516 <main+0x14e>
 80015e0:	eb851eb8 	.word	0xeb851eb8
 80015e4:	3fdeb851 	.word	0x3fdeb851
 80015e8:	200001f0 	.word	0x200001f0
 80015ec:	40011000 	.word	0x40011000
 80015f0:	2000032c 	.word	0x2000032c
 80015f4:	40010800 	.word	0x40010800
 80015f8:	20000244 	.word	0x20000244
 80015fc:	20000358 	.word	0x20000358
 8001600:	2000035c 	.word	0x2000035c
 8001604:	200003f4 	.word	0x200003f4
 8001608:	200003e0 	.word	0x200003e0
 800160c:	200003dc 	.word	0x200003dc
 8001610:	200003ec 	.word	0x200003ec
 8001614:	200003e8 	.word	0x200003e8
 8001618:	200003e4 	.word	0x200003e4
 800161c:	08009950 	.word	0x08009950
 8001620:	200002e4 	.word	0x200002e4

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b090      	sub	sp, #64	@ 0x40
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2228      	movs	r2, #40	@ 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fd8d 	bl	8006152 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	2302      	movs	r3, #2
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001660:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001662:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f9d3 	bl	8003a18 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001678:	f000 f972 	bl	8001960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800168c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2101      	movs	r1, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fc40 	bl	8003f1c <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016a2:	f000 f95d 	bl	8001960 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3740      	adds	r7, #64	@ 0x40
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	@ (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f000 ffcf 	bl	8002690 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f932 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001f0 	.word	0x200001f0
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001712:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <MX_SPI1_Init+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001718:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800171c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001740:	2208      	movs	r2, #8
 8001742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_SPI1_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_SPI1_Init+0x64>)
 8001758:	220a      	movs	r2, #10
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_SPI1_Init+0x64>)
 800175e:	f002 fd6b 	bl	8004238 <HAL_SPI_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001768:	f000 f8fa 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000244 	.word	0x20000244
 8001774:	40013000 	.word	0x40013000

08001778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <MX_USART1_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f003 fae5 	bl	8004d7e <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f8d1 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000029c 	.word	0x2000029c
 80017c8:	40013800 	.word	0x40013800

080017cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <MX_USART3_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 8001804:	f003 fabb 	bl	8004d7e <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f000 f8a7 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200002e4 	.word	0x200002e4
 800181c:	40004800 	.word	0x40004800

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b45      	ldr	r3, [pc, #276]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a44      	ldr	r2, [pc, #272]	@ (800194c <MX_GPIO_Init+0x12c>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b42      	ldr	r3, [pc, #264]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b3f      	ldr	r3, [pc, #252]	@ (800194c <MX_GPIO_Init+0x12c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a3e      	ldr	r2, [pc, #248]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <MX_GPIO_Init+0x12c>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b39      	ldr	r3, [pc, #228]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a38      	ldr	r2, [pc, #224]	@ (800194c <MX_GPIO_Init+0x12c>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b36      	ldr	r3, [pc, #216]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b33      	ldr	r3, [pc, #204]	@ (800194c <MX_GPIO_Init+0x12c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a32      	ldr	r2, [pc, #200]	@ (800194c <MX_GPIO_Init+0x12c>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b30      	ldr	r3, [pc, #192]	@ (800194c <MX_GPIO_Init+0x12c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_Pin|LED_PC14_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800189a:	482d      	ldr	r0, [pc, #180]	@ (8001950 <MX_GPIO_Init+0x130>)
 800189c:	f000 febe 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2114      	movs	r1, #20
 80018a4:	482b      	ldr	r0, [pc, #172]	@ (8001954 <MX_GPIO_Init+0x134>)
 80018a6:	f000 feb9 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_Pin LED_PC14_Pin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_PC14_Pin;
 80018aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80018ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4823      	ldr	r0, [pc, #140]	@ (8001950 <MX_GPIO_Init+0x130>)
 80018c4:	f000 fd26 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 80018c8:	2314      	movs	r3, #20
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	481d      	ldr	r0, [pc, #116]	@ (8001954 <MX_GPIO_Init+0x134>)
 80018e0:	f000 fd18 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80018e4:	2308      	movs	r3, #8
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_GPIO_Init+0x138>)
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <MX_GPIO_Init+0x134>)
 80018f8:	f000 fd0c 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIND_Pin RAIN_Pin */
  GPIO_InitStruct.Pin = WIND_Pin|RAIN_Pin;
 80018fc:	2330      	movs	r3, #48	@ 0x30
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_GPIO_Init+0x138>)
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4813      	ldr	r0, [pc, #76]	@ (800195c <MX_GPIO_Init+0x13c>)
 8001910:	f000 fd00 	bl	8002314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2009      	movs	r0, #9
 800191a:	f000 fcc4 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800191e:	2009      	movs	r0, #9
 8001920:	f000 fcdd 	bl	80022de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	200a      	movs	r0, #10
 800192a:	f000 fcbc 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800192e:	200a      	movs	r0, #10
 8001930:	f000 fcd5 	bl	80022de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2017      	movs	r0, #23
 800193a:	f000 fcb4 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800193e:	2017      	movs	r0, #23
 8001940:	f000 fccd 	bl	80022de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	40011000 	.word	0x40011000
 8001954:	40010800 	.word	0x40010800
 8001958:	10210000 	.word	0x10210000
 800195c:	40010c00 	.word	0x40010c00

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <Error_Handler+0x8>

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_MspInit+0x5c>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <HAL_MspInit+0x5c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_MspInit+0x5c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_MspInit+0x5c>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a0e      	ldr	r2, [pc, #56]	@ (80019c8 <HAL_MspInit+0x5c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_MspInit+0x5c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_MspInit+0x60>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_MspInit+0x60>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a15      	ldr	r2, [pc, #84]	@ (8001a40 <HAL_I2C_MspInit+0x70>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d123      	bne.n	8001a38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a08:	23c0      	movs	r3, #192	@ 0xc0
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <HAL_I2C_MspInit+0x78>)
 8001a1c:	f000 fc7a 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40005400 	.word	0x40005400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010c00 	.word	0x40010c00

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d12f      	bne.n	8001acc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a13      	ldr	r2, [pc, #76]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a9c:	23a0      	movs	r3, #160	@ 0xa0
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	480b      	ldr	r0, [pc, #44]	@ (8001adc <HAL_SPI_MspInit+0x90>)
 8001ab0:	f000 fc30 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab4:	2340      	movs	r3, #64	@ 0x40
 8001ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <HAL_SPI_MspInit+0x90>)
 8001ac8:	f000 fc24 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013000 	.word	0x40013000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010800 	.word	0x40010800

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a38      	ldr	r2, [pc, #224]	@ (8001bdc <HAL_UART_MspInit+0xfc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d132      	bne.n	8001b66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b00:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a36      	ldr	r2, [pc, #216]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a30      	ldr	r2, [pc, #192]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	4619      	mov	r1, r3
 8001b44:	4827      	ldr	r0, [pc, #156]	@ (8001be4 <HAL_UART_MspInit+0x104>)
 8001b46:	f000 fbe5 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4821      	ldr	r0, [pc, #132]	@ (8001be4 <HAL_UART_MspInit+0x104>)
 8001b60:	f000 fbd8 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b64:	e036      	b.n	8001bd4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <HAL_UART_MspInit+0x108>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d131      	bne.n	8001bd4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a1a      	ldr	r2, [pc, #104]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_UART_MspInit+0x100>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480d      	ldr	r0, [pc, #52]	@ (8001bec <HAL_UART_MspInit+0x10c>)
 8001bb6:	f000 fbad 	bl	8002314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001bba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	@ (8001bec <HAL_UART_MspInit+0x10c>)
 8001bd0:	f000 fba0 	bl	8002314 <HAL_GPIO_Init>
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	@ 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010800 	.word	0x40010800
 8001be8:	40004800 	.word	0x40004800
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <MemManage_Handler+0x4>

08001c08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 fa1a 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  count++;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <SysTick_Handler+0x30>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <SysTick_Handler+0x30>)
 8001c4c:	6013      	str	r3, [r2, #0]
  if(count == 5000)
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <SysTick_Handler+0x30>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d105      	bne.n	8001c66 <SysTick_Handler+0x2a>
  {
	  check = 1;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Handler+0x34>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
	  count = 0;
 8001c60:	4b02      	ldr	r3, [pc, #8]	@ (8001c6c <SysTick_Handler+0x30>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200003f0 	.word	0x200003f0
 8001c70:	200003f4 	.word	0x200003f4

08001c74 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c78:	2008      	movs	r0, #8
 8001c7a:	f000 fce7 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIND_Pin);
 8001c86:	2010      	movs	r0, #16
 8001c88:	f000 fce0 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RAIN_Pin);
 8001c94:	2020      	movs	r0, #32
 8001c96:	f000 fcd9 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb6:	f004 fa9f 	bl	80061f8 <__errno>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2216      	movs	r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cde:	bf00      	nop
 8001ce0:	e7fd      	b.n	8001cde <_exit+0x12>

08001ce2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e00a      	b.n	8001d0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	b2ca      	uxtb	r2, r1
 8001d02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbf0      	blt.n	8001cf4 <_read+0x12>
  }

  return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e009      	b.n	8001d42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	60ba      	str	r2, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb2e 	bl	8001398 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbf1      	blt.n	8001d2e <_write+0x12>
  }
  return len;
 8001d4a:	687b      	ldr	r3, [r7, #4]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_close>:

int _close(int file)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <_isatty>:

int _isatty(int file)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f004 fa08 	bl	80061f8 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20005000 	.word	0x20005000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	200003f8 	.word	0x200003f8
 8001e1c:	20000550 	.word	0x20000550

08001e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff fff8 	bl	8001e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e32:	490c      	ldr	r1, [pc, #48]	@ (8001e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e48:	4c09      	ldr	r4, [pc, #36]	@ (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f004 f9d5 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff fab5 	bl	80013c8 <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e68:	08009e00 	.word	0x08009e00
  ldr r2, =_sbss
 8001e6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e70:	2000054c 	.word	0x2000054c

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <hdc1080_init>:
#include "hdc1080.h"
#include "stm32f1xx_hal_i2c.h"

void hdc1080_init(I2C_HandleTypeDef* hi2c_x,Temp_Reso Temperature_Resolution_x_bit,Humi_Reso Humidity_Resolution_x_bit)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b088      	sub	sp, #32
 8001e7a:	af04      	add	r7, sp, #16
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
 8001e82:	4613      	mov	r3, r2
 8001e84:	70bb      	strb	r3, [r7, #2]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 8001e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8a:	81fb      	strh	r3, [r7, #14]
	uint8_t data_send[2];

	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d103      	bne.n	8001e9a <hdc1080_init+0x24>
	{
		config_reg_value |= (1<<10); //11 bit
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e98:	81fb      	strh	r3, [r7, #14]
	}

	switch(Humidity_Resolution_x_bit)
 8001e9a:	78bb      	ldrb	r3, [r7, #2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d002      	beq.n	8001ea6 <hdc1080_init+0x30>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d005      	beq.n	8001eb0 <hdc1080_init+0x3a>
 8001ea4:	e009      	b.n	8001eba <hdc1080_init+0x44>
	{
	case Humidity_Resolution_11_bit:
		config_reg_value|= (1<<8);
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	81fb      	strh	r3, [r7, #14]
		break;
 8001eae:	e004      	b.n	8001eba <hdc1080_init+0x44>
	case Humidity_Resolution_8_bit:
		config_reg_value|= (1<<9);
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	81fb      	strh	r3, [r7, #14]
		break;
 8001eb8:	bf00      	nop
	}

	data_send[0]= (config_reg_value>>8);
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	733b      	strb	r3, [r7, #12]
	data_send[1]= (config_reg_value&0x00ff);
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c_x,HDC_1080_ADD<<1,Configuration_register_add,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 8001eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2301      	movs	r3, #1
 8001edc:	2202      	movs	r2, #2
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 f883 	bl	8002fec <HAL_I2C_Mem_Write>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <hdc1080_start_measurement>:


uint8_t hdc1080_start_measurement(I2C_HandleTypeDef* hi2c_x,float* temperature, uint8_t* humidity)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = Temperature_register_add;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c_x,HDC_1080_ADD<<1,&send_data,1,1000);
 8001f00:	f107 0217 	add.w	r2, r7, #23
 8001f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fd02 	bl	8002918 <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 8001f14:	200f      	movs	r0, #15
 8001f16:	f000 f8cb 	bl	80020b0 <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(hi2c_x,HDC_1080_ADD<<1,receive_data,4,1000);
 8001f1a:	f107 0218 	add.w	r2, r7, #24
 8001f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2304      	movs	r3, #4
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fdf3 	bl	8002b14 <HAL_I2C_Master_Receive>


	temp_x =((receive_data[0]<<8)|receive_data[1]);
 8001f2e:	7e3b      	ldrb	r3, [r7, #24]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	7e7b      	ldrb	r3, [r7, #25]
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	83fb      	strh	r3, [r7, #30]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 8001f3e:	7ebb      	ldrb	r3, [r7, #26]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	7efb      	ldrb	r3, [r7, #27]
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	83bb      	strh	r3, [r7, #28]

	*temperature=((temp_x/65536.0)*165.0)-40.0;
 8001f4e:	8bfb      	ldrh	r3, [r7, #30]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa57 	bl	8000404 <__aeabi_i2d>
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <hdc1080_start_measurement+0xf0>)
 8001f5c:	f7fe fbe6 	bl	800072c <__aeabi_ddiv>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	a31b      	add	r3, pc, #108	@ (adr r3, 8001fd8 <hdc1080_start_measurement+0xe8>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fab3 	bl	80004d8 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <hdc1080_start_measurement+0xf4>)
 8001f80:	f7fe f8f2 	bl	8000168 <__aeabi_dsub>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fd9c 	bl	8000ac8 <__aeabi_d2f>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x/65536.0)*100.0);
 8001f96:	8bbb      	ldrh	r3, [r7, #28]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa33 	bl	8000404 <__aeabi_i2d>
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <hdc1080_start_measurement+0xf0>)
 8001fa4:	f7fe fbc2 	bl	800072c <__aeabi_ddiv>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <hdc1080_start_measurement+0xf8>)
 8001fb6:	f7fe fa8f 	bl	80004d8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fd61 	bl	8000a88 <__aeabi_d2uiz>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	701a      	strb	r2, [r3, #0]

	return 0;
 8001fce:	2300      	movs	r3, #0

}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	4064a000 	.word	0x4064a000
 8001fe0:	40f00000 	.word	0x40f00000
 8001fe4:	40440000 	.word	0x40440000
 8001fe8:	40590000 	.word	0x40590000

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_Init+0x28>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_Init+0x28>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f947 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fcb0 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f95f 	bl	80022fa <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f927 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	20000008 	.word	0x20000008
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	@ (8002098 <HAL_IncTick+0x20>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000008 	.word	0x20000008
 8002098:	200003fc 	.word	0x200003fc

0800209c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	200003fc 	.word	0x200003fc

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff fff0 	bl	800209c <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffe0 	bl	800209c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4906      	ldr	r1, [pc, #24]	@ (8002190 <__NVIC_EnableIRQ+0x34>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff90 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff2d 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff42 	bl	8002140 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff90 	bl	80021e8 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5f 	bl	8002194 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff35 	bl	800215c <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	@ 0x2c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e169      	b.n	80025fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002328:	2201      	movs	r2, #1
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	f040 8158 	bne.w	80025f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a9a      	ldr	r2, [pc, #616]	@ (80025b4 <HAL_GPIO_Init+0x2a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d05e      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002350:	4a98      	ldr	r2, [pc, #608]	@ (80025b4 <HAL_GPIO_Init+0x2a0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d875      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002356:	4a98      	ldr	r2, [pc, #608]	@ (80025b8 <HAL_GPIO_Init+0x2a4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d058      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 800235c:	4a96      	ldr	r2, [pc, #600]	@ (80025b8 <HAL_GPIO_Init+0x2a4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d86f      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002362:	4a96      	ldr	r2, [pc, #600]	@ (80025bc <HAL_GPIO_Init+0x2a8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d052      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002368:	4a94      	ldr	r2, [pc, #592]	@ (80025bc <HAL_GPIO_Init+0x2a8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d869      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800236e:	4a94      	ldr	r2, [pc, #592]	@ (80025c0 <HAL_GPIO_Init+0x2ac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04c      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002374:	4a92      	ldr	r2, [pc, #584]	@ (80025c0 <HAL_GPIO_Init+0x2ac>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d863      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800237a:	4a92      	ldr	r2, [pc, #584]	@ (80025c4 <HAL_GPIO_Init+0x2b0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d046      	beq.n	800240e <HAL_GPIO_Init+0xfa>
 8002380:	4a90      	ldr	r2, [pc, #576]	@ (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d85d      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d82a      	bhi.n	80023e0 <HAL_GPIO_Init+0xcc>
 800238a:	2b12      	cmp	r3, #18
 800238c:	d859      	bhi.n	8002442 <HAL_GPIO_Init+0x12e>
 800238e:	a201      	add	r2, pc, #4	@ (adr r2, 8002394 <HAL_GPIO_Init+0x80>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	0800240f 	.word	0x0800240f
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080023fb 	.word	0x080023fb
 80023a0:	0800243d 	.word	0x0800243d
 80023a4:	08002443 	.word	0x08002443
 80023a8:	08002443 	.word	0x08002443
 80023ac:	08002443 	.word	0x08002443
 80023b0:	08002443 	.word	0x08002443
 80023b4:	08002443 	.word	0x08002443
 80023b8:	08002443 	.word	0x08002443
 80023bc:	08002443 	.word	0x08002443
 80023c0:	08002443 	.word	0x08002443
 80023c4:	08002443 	.word	0x08002443
 80023c8:	08002443 	.word	0x08002443
 80023cc:	08002443 	.word	0x08002443
 80023d0:	08002443 	.word	0x08002443
 80023d4:	08002443 	.word	0x08002443
 80023d8:	080023f1 	.word	0x080023f1
 80023dc:	08002405 	.word	0x08002405
 80023e0:	4a79      	ldr	r2, [pc, #484]	@ (80025c8 <HAL_GPIO_Init+0x2b4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e6:	e02c      	b.n	8002442 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e029      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e024      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3308      	adds	r3, #8
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e01f      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	330c      	adds	r3, #12
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e01a      	b.n	8002444 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002416:	2304      	movs	r3, #4
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e013      	b.n	8002444 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	611a      	str	r2, [r3, #16]
          break;
 800242e:	e009      	b.n	8002444 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	615a      	str	r2, [r3, #20]
          break;
 800243a:	e003      	b.n	8002444 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x130>
          break;
 8002442:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2bff      	cmp	r3, #255	@ 0xff
 8002448:	d801      	bhi.n	800244e <HAL_GPIO_Init+0x13a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_Init+0x13e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2bff      	cmp	r3, #255	@ 0xff
 8002458:	d802      	bhi.n	8002460 <HAL_GPIO_Init+0x14c>
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x152>
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	3b08      	subs	r3, #8
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	210f      	movs	r1, #15
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	401a      	ands	r2, r3
 8002478:	6a39      	ldr	r1, [r7, #32]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80b1 	beq.w	80025f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <HAL_GPIO_Init+0x2b8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a4c      	ldr	r2, [pc, #304]	@ (80025cc <HAL_GPIO_Init+0x2b8>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_GPIO_Init+0x2b8>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ac:	4a48      	ldr	r2, [pc, #288]	@ (80025d0 <HAL_GPIO_Init+0x2bc>)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	@ (80025d4 <HAL_GPIO_Init+0x2c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_GPIO_Init+0x1ec>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3f      	ldr	r2, [pc, #252]	@ (80025d8 <HAL_GPIO_Init+0x2c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00d      	beq.n	80024fc <HAL_GPIO_Init+0x1e8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3e      	ldr	r2, [pc, #248]	@ (80025dc <HAL_GPIO_Init+0x2c8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <HAL_GPIO_Init+0x1e4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3d      	ldr	r2, [pc, #244]	@ (80025e0 <HAL_GPIO_Init+0x2cc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_GPIO_Init+0x1e0>
 80024f0:	2303      	movs	r3, #3
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 8002500:	2300      	movs	r3, #0
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002512:	492f      	ldr	r1, [pc, #188]	@ (80025d0 <HAL_GPIO_Init+0x2bc>)
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	492c      	ldr	r1, [pc, #176]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4928      	ldr	r1, [pc, #160]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4922      	ldr	r1, [pc, #136]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	491e      	ldr	r1, [pc, #120]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4918      	ldr	r1, [pc, #96]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258a:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4914      	ldr	r1, [pc, #80]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d021      	beq.n	80025e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	490e      	ldr	r1, [pc, #56]	@ (80025e4 <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e021      	b.n	80025f6 <HAL_GPIO_Init+0x2e2>
 80025b2:	bf00      	nop
 80025b4:	10320000 	.word	0x10320000
 80025b8:	10310000 	.word	0x10310000
 80025bc:	10220000 	.word	0x10220000
 80025c0:	10210000 	.word	0x10210000
 80025c4:	10120000 	.word	0x10120000
 80025c8:	10110000 	.word	0x10110000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_GPIO_Init+0x304>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4909      	ldr	r1, [pc, #36]	@ (8002618 <HAL_GPIO_Init+0x304>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	3301      	adds	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f ae8e 	bne.w	8002328 <HAL_GPIO_Init+0x14>
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	372c      	adds	r7, #44	@ 0x2c
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f806 	bl	800267c <HAL_GPIO_EXTI_Callback>
  }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e12b      	b.n	80028fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff f98a 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f4:	f001 fd5a 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a81      	ldr	r2, [pc, #516]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d807      	bhi.n	8002714 <HAL_I2C_Init+0x84>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a80      	ldr	r2, [pc, #512]	@ (8002908 <HAL_I2C_Init+0x278>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e006      	b.n	8002722 <HAL_I2C_Init+0x92>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a7d      	ldr	r2, [pc, #500]	@ (800290c <HAL_I2C_Init+0x27c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0e7      	b.n	80028fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_I2C_Init+0x280>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a6a      	ldr	r2, [pc, #424]	@ (8002904 <HAL_I2C_Init+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d802      	bhi.n	8002764 <HAL_I2C_Init+0xd4>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	e009      	b.n	8002778 <HAL_I2C_Init+0xe8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_I2C_Init+0x284>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	3301      	adds	r3, #1
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800278a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	495c      	ldr	r1, [pc, #368]	@ (8002904 <HAL_I2C_Init+0x274>)
 8002794:	428b      	cmp	r3, r1
 8002796:	d819      	bhi.n	80027cc <HAL_I2C_Init+0x13c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e59      	subs	r1, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027ac:	400b      	ands	r3, r1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_I2C_Init+0x138>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e59      	subs	r1, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	e051      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e04f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_I2C_Init+0x168>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_I2C_Init+0x18e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x196>
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2C_Init+0x1dc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10e      	bne.n	800284c <HAL_I2C_Init+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	440b      	add	r3, r1
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800284a:	e00f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800289a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6911      	ldr	r1, [r2, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	000186a0 	.word	0x000186a0
 8002908:	001e847f 	.word	0x001e847f
 800290c:	003d08ff 	.word	0x003d08ff
 8002910:	431bde83 	.word	0x431bde83
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	461a      	mov	r2, r3
 8002924:	460b      	mov	r3, r1
 8002926:	817b      	strh	r3, [r7, #10]
 8002928:	4613      	mov	r3, r2
 800292a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff fbb6 	bl	800209c <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 80e0 	bne.w	8002b00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2319      	movs	r3, #25
 8002946:	2201      	movs	r2, #1
 8002948:	4970      	ldr	r1, [pc, #448]	@ (8002b0c <HAL_I2C_Master_Transmit+0x1f4>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fe2e 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	e0d3      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_I2C_Master_Transmit+0x50>
 8002964:	2302      	movs	r3, #2
 8002966:	e0cc      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d007      	beq.n	800298e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	@ 0x21
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2210      	movs	r2, #16
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a50      	ldr	r2, [pc, #320]	@ (8002b10 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fc02 	bl	80031e0 <I2C_MasterRequestWrite>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e08d      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029fc:	e066      	b.n	8002acc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 feec 	bl	80037e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x188>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fee3 	bl	8003870 <I2C_WaitOnBTFFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d107      	bne.n	8002ac8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e01a      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d194      	bne.n	80029fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00100002 	.word	0x00100002
 8002b10:	ffff0000 	.word	0xffff0000

08002b14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	@ 0x30
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
 8002b24:	4613      	mov	r3, r2
 8002b26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff fab6 	bl	800209c <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 824b 	bne.w	8002fd6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2319      	movs	r3, #25
 8002b46:	2201      	movs	r2, #1
 8002b48:	497f      	ldr	r1, [pc, #508]	@ (8002d48 <HAL_I2C_Master_Receive+0x234>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fd2e 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	e23e      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2C_Master_Receive+0x54>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e237      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d007      	beq.n	8002b8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2222      	movs	r2, #34	@ 0x22
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	893a      	ldrh	r2, [r7, #8]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a5f      	ldr	r2, [pc, #380]	@ (8002d4c <HAL_I2C_Master_Receive+0x238>)
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fb84 	bl	80032e4 <I2C_MasterRequestRead>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1f8      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e1cc      	b.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d11e      	bne.n	8002c5c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2e:	b672      	cpsid	i
}
 8002c30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c58:	b662      	cpsie	i
}
 8002c5a:	e035      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d11e      	bne.n	8002ca2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c9e:	b662      	cpsie	i
}
 8002ca0:	e012      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002cc8:	e172      	b.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	f200 811f 	bhi.w	8002f12 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d123      	bne.n	8002d24 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fe0d 	bl	8003900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e173      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d22:	e145      	b.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d152      	bne.n	8002dd2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	2200      	movs	r2, #0
 8002d34:	4906      	ldr	r1, [pc, #24]	@ (8002d50 <HAL_I2C_Master_Receive+0x23c>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fc38 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e148      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000
 8002d50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d9a:	b662      	cpsie	i
}
 8002d9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dd0:	e0ee      	b.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4981      	ldr	r1, [pc, #516]	@ (8002fe0 <HAL_I2C_Master_Receive+0x4cc>)
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fbe5 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0f5      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dfc:	b672      	cpsid	i
}
 8002dfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e32:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_I2C_Master_Receive+0x4d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	08db      	lsrs	r3, r3, #3
 8002e38:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe8 <HAL_I2C_Master_Receive+0x4d4>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a1a      	lsrs	r2, r3, #8
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00da      	lsls	r2, r3, #3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d118      	bne.n	8002e8a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e7a:	b662      	cpsie	i
}
 8002e7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0a6      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d1d9      	bne.n	8002e4c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eda:	b662      	cpsie	i
}
 8002edc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f10:	e04e      	b.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fcf2 	bl	8003900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e058      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d124      	bne.n	8002fb0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae88 	bne.w	8002cca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3728      	adds	r7, #40	@ 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	00010004 	.word	0x00010004
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	14f8b589 	.word	0x14f8b589

08002fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7ff f849 	bl	800209c <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80d9 	bne.w	80031cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	496d      	ldr	r1, [pc, #436]	@ (80031d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fac1 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
 8003032:	e0cc      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x56>
 800303e:	2302      	movs	r3, #2
 8003040:	e0c5      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d007      	beq.n	8003068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	@ 0x21
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a4d      	ldr	r2, [pc, #308]	@ (80031dc <HAL_I2C_Mem_Write+0x1f0>)
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030aa:	88f8      	ldrh	r0, [r7, #6]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9e0 	bl	8003480 <I2C_RequestMemoryWrite>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d052      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e081      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb86 	bl	80037e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_I2C_Mem_Write+0x180>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1aa      	bne.n	80030ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb79 	bl	8003870 <I2C_WaitOnBTFFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e016      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00100002 	.word	0x00100002
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	460b      	mov	r3, r1
 80031ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d006      	beq.n	800320a <I2C_MasterRequestWrite+0x2a>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d003      	beq.n	800320a <I2C_MasterRequestWrite+0x2a>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003208:	d108      	bne.n	800321c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e00b      	b.n	8003234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	2b12      	cmp	r3, #18
 8003222:	d107      	bne.n	8003234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f9b3 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325a:	d103      	bne.n	8003264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e035      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003270:	d108      	bne.n	8003284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003280:	611a      	str	r2, [r3, #16]
 8003282:	e01b      	b.n	80032bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	11db      	asrs	r3, r3, #7
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 0306 	and.w	r3, r3, #6
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f063 030f 	orn	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	490e      	ldr	r1, [pc, #56]	@ (80032dc <I2C_MasterRequestWrite+0xfc>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f9fc 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e010      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4907      	ldr	r1, [pc, #28]	@ (80032e0 <I2C_MasterRequestWrite+0x100>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9ec 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010008 	.word	0x00010008
 80032e0:	00010002 	.word	0x00010002

080032e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003308:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d006      	beq.n	800331e <I2C_MasterRequestRead+0x3a>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <I2C_MasterRequestRead+0x3a>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e00b      	b.n	8003348 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	2b11      	cmp	r3, #17
 8003336:	d107      	bne.n	8003348 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f929 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336e:	d103      	bne.n	8003378 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e079      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	e05f      	b.n	8003458 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003398:	897b      	ldrh	r3, [r7, #10]
 800339a:	11db      	asrs	r3, r3, #7
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0306 	and.w	r3, r3, #6
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f063 030f 	orn	r3, r3, #15
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4930      	ldr	r1, [pc, #192]	@ (8003478 <I2C_MasterRequestRead+0x194>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f972 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e054      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4929      	ldr	r1, [pc, #164]	@ (800347c <I2C_MasterRequestRead+0x198>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f962 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e044      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800340a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f8c7 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003432:	d103      	bne.n	800343c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e017      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003440:	897b      	ldrh	r3, [r7, #10]
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030e 	orn	r3, r3, #14
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4907      	ldr	r1, [pc, #28]	@ (800347c <I2C_MasterRequestRead+0x198>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f91e 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010008 	.word	0x00010008
 800347c:	00010002 	.word	0x00010002

08003480 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	460b      	mov	r3, r1
 8003494:	813b      	strh	r3, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f878 	bl	80035ac <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d0:	d103      	bne.n	80034da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e05f      	b.n	800359e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	492d      	ldr	r1, [pc, #180]	@ (80035a8 <I2C_RequestMemoryWrite+0x128>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f8d3 	bl	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04c      	b.n	800359e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351c:	6a39      	ldr	r1, [r7, #32]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f95e 	bl	80037e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b04      	cmp	r3, #4
 8003530:	d107      	bne.n	8003542 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e02b      	b.n	800359e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	e021      	b.n	800359c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003568:	6a39      	ldr	r1, [r7, #32]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f938 	bl	80037e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e005      	b.n	800359e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003592:	893b      	ldrh	r3, [r7, #8]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	00010002 	.word	0x00010002

080035ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035bc:	e048      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d044      	beq.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe fd69 	bl	800209c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d139      	bne.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10d      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	e00c      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	429a      	cmp	r2, r3
 8003620:	d116      	bne.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e023      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10d      	bne.n	8003676 <I2C_WaitOnFlagUntilTimeout+0xca>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	43da      	mvns	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	e00c      	b.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	429a      	cmp	r2, r3
 8003694:	d093      	beq.n	80035be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ae:	e071      	b.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036be:	d123      	bne.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e067      	b.n	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d041      	beq.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003710:	f7fe fcc4 	bl	800209c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d136      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10c      	bne.n	800374a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e00b      	b.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e021      	b.n	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10c      	bne.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	43da      	mvns	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4013      	ands	r3, r2
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e00b      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f47f af6d 	bne.w	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ec:	e034      	b.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f8e3 	bl	80039ba <I2C_IsAcknowledgeFailed>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e034      	b.n	8003868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d028      	beq.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fe fc49 	bl	800209c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11d      	bne.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	2b80      	cmp	r3, #128	@ 0x80
 8003828:	d016      	beq.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d1c3      	bne.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800387c:	e034      	b.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f89b 	bl	80039ba <I2C_IsAcknowledgeFailed>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e034      	b.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d028      	beq.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe fc01 	bl	800209c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d016      	beq.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d1c3      	bne.n	800387e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800390c:	e049      	b.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d119      	bne.n	8003950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0210 	mvn.w	r2, #16
 8003924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e030      	b.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fe fba4 	bl	800209c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11d      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d016      	beq.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e007      	b.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b40      	cmp	r3, #64	@ 0x40
 80039ae:	d1ae      	bne.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d0:	d11b      	bne.n	8003a0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e272      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8087 	beq.w	8003b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a38:	4b92      	ldr	r3, [pc, #584]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d00c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a44:	4b8f      	ldr	r3, [pc, #572]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d112      	bne.n	8003a76 <HAL_RCC_OscConfig+0x5e>
 8003a50:	4b8c      	ldr	r3, [pc, #560]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5e:	4b89      	ldr	r3, [pc, #548]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d06c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x12c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d168      	bne.n	8003b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e24c      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x76>
 8003a80:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7f      	ldr	r2, [pc, #508]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e02e      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b7b      	ldr	r3, [pc, #492]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b78      	ldr	r3, [pc, #480]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a77      	ldr	r2, [pc, #476]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xbc>
 8003aba:	4b72      	ldr	r3, [pc, #456]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a71      	ldr	r2, [pc, #452]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6e      	ldr	r2, [pc, #440]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xd4>
 8003ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b68      	ldr	r3, [pc, #416]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a67      	ldr	r2, [pc, #412]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fe fad2 	bl	800209c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fe face 	bl	800209c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e200      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xe4>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fabe 	bl	800209c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe faba 	bl	800209c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1ec      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b53      	ldr	r3, [pc, #332]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x10c>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b52:	4b4c      	ldr	r3, [pc, #304]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b5e:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x18c>
 8003b6a:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b43      	ldr	r3, [pc, #268]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x176>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1c0      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4939      	ldr	r1, [pc, #228]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCC_OscConfig+0x270>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe fa73 	bl	800209c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fe fa6f 	bl	800209c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1a1      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4927      	ldr	r1, [pc, #156]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b26      	ldr	r3, [pc, #152]	@ (8003c88 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fa52 	bl	800209c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fe fa4e 	bl	800209c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e180      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03a      	beq.n	8003c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d019      	beq.n	8003c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <HAL_RCC_OscConfig+0x274>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fe fa32 	bl	800209c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fe fa2e 	bl	800209c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e160      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 face 	bl	80041fc <RCC_Delay>
 8003c60:	e01c      	b.n	8003c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <HAL_RCC_OscConfig+0x274>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fe fa18 	bl	800209c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe fa14 	bl	800209c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d908      	bls.n	8003c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e146      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	42420000 	.word	0x42420000
 8003c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b92      	ldr	r3, [pc, #584]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e9      	bne.n	8003c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a6 	beq.w	8003df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b8b      	ldr	r3, [pc, #556]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a87      	ldr	r2, [pc, #540]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	4b82      	ldr	r3, [pc, #520]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d118      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cee:	f7fe f9d5 	bl	800209c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf6:	f7fe f9d1 	bl	800209c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b64      	cmp	r3, #100	@ 0x64
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e103      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b75      	ldr	r3, [pc, #468]	@ (8003ee0 <HAL_RCC_OscConfig+0x4c8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x312>
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6213      	str	r3, [r2, #32]
 8003d28:	e02d      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x334>
 8003d32:	4b6a      	ldr	r3, [pc, #424]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4a69      	ldr	r2, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6213      	str	r3, [r2, #32]
 8003d3e:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a66      	ldr	r2, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	6213      	str	r3, [r2, #32]
 8003d4a:	e01c      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d10c      	bne.n	8003d6e <HAL_RCC_OscConfig+0x356>
 8003d54:	4b61      	ldr	r3, [pc, #388]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a60      	ldr	r2, [pc, #384]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	4b5e      	ldr	r3, [pc, #376]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a5d      	ldr	r2, [pc, #372]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6213      	str	r3, [r2, #32]
 8003d6c:	e00b      	b.n	8003d86 <HAL_RCC_OscConfig+0x36e>
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6213      	str	r3, [r2, #32]
 8003d7a:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d015      	beq.n	8003dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fe f985 	bl	800209c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fe f981 	bl	800209c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0b1      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ee      	beq.n	8003d96 <HAL_RCC_OscConfig+0x37e>
 8003db8:	e014      	b.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fe f96f 	bl	800209c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe f96b 	bl	800209c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e09b      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd8:	4b40      	ldr	r3, [pc, #256]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dea:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8087 	beq.w	8003f0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d061      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d146      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e14:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fe f93f 	bl	800209c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fe f93b 	bl	800209c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e06d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e34:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d108      	bne.n	8003e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e4a:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	4921      	ldr	r1, [pc, #132]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a19      	ldr	r1, [r3, #32]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe f90f 	bl	800209c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe f90b 	bl	800209c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e03d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46a>
 8003ea0:	e035      	b.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f8f8 	bl	800209c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe f8f4 	bl	800209c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e026      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x498>
 8003ece:	e01e      	b.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e019      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <HAL_RCC_OscConfig+0x500>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0d0      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b6a      	ldr	r3, [pc, #424]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d910      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b67      	ldr	r3, [pc, #412]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 0207 	bic.w	r2, r3, #7
 8003f46:	4965      	ldr	r1, [pc, #404]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a52      	ldr	r2, [pc, #328]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d040      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d115      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b41      	ldr	r3, [pc, #260]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e073      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3d      	ldr	r3, [pc, #244]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b39      	ldr	r3, [pc, #228]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4936      	ldr	r1, [pc, #216]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe f846 	bl	800209c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fe f842 	bl	800209c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e053      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2d      	ldr	r3, [pc, #180]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d210      	bcs.n	800406c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4922      	ldr	r1, [pc, #136]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1cc>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1d0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd ffa4 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08009998 	.word	0x08009998
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x94>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x30>
 800411a:	2b08      	cmp	r3, #8
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x36>
 800411e:	e027      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004120:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004122:	613b      	str	r3, [r7, #16]
      break;
 8004124:	e027      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a17      	ldr	r2, [pc, #92]	@ (800418c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800413e:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x94>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	0c5b      	lsrs	r3, r3, #17
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0d      	ldr	r2, [pc, #52]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004152:	fb03 f202 	mul.w	r2, r3, r2
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e004      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	613b      	str	r3, [r7, #16]
      break;
 800416e:	e002      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x98>)
 8004172:	613b      	str	r3, [r7, #16]
      break;
 8004174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004176:	693b      	ldr	r3, [r7, #16]
}
 8004178:	4618      	mov	r0, r3
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	080099b0 	.word	0x080099b0
 8004190:	080099c0 	.word	0x080099c0
 8004194:	003d0900 	.word	0x003d0900

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b02      	ldr	r3, [pc, #8]	@ (80041a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000000 	.word	0x20000000

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff2 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	080099a8 	.word	0x080099a8

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d8:	f7ff ffde 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0adb      	lsrs	r3, r3, #11
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	080099a8 	.word	0x080099a8

080041fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <RCC_Delay+0x34>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	@ (8004234 <RCC_Delay+0x38>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0a5b      	lsrs	r3, r3, #9
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004218:	bf00      	nop
  }
  while (Delay --);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	60fa      	str	r2, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f9      	bne.n	8004218 <RCC_Delay+0x1c>
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	20000000 	.word	0x20000000
 8004234:	10624dd3 	.word	0x10624dd3

08004238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e076      	b.n	8004338 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800425a:	d009      	beq.n	8004270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	61da      	str	r2, [r3, #28]
 8004262:	e005      	b.n	8004270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fbde 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f4:	ea42 0103 	orr.w	r1, r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	0c1a      	lsrs	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f002 0204 	and.w	r2, r2, #4
 8004316:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69da      	ldr	r2, [r3, #28]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004326:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004350:	f7fd fea4 	bl	800209c <HAL_GetTick>
 8004354:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	e12a      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_Transmit+0x36>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e122      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_SPI_Transmit+0x48>
 8004384:	2302      	movs	r3, #2
 8004386:	e11b      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043d6:	d10f      	bne.n	80043f8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d007      	beq.n	8004416 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441e:	d152      	bne.n	80044c6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Transmit+0xee>
 8004428:	8b7b      	ldrh	r3, [r7, #26]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d145      	bne.n	80044ba <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004452:	e032      	b.n	80044ba <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d112      	bne.n	8004488 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004486:	e018      	b.n	80044ba <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004488:	f7fd fe08 	bl	800209c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d803      	bhi.n	80044a0 <HAL_SPI_Transmit+0x160>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Transmit+0x166>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e082      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c7      	bne.n	8004454 <HAL_SPI_Transmit+0x114>
 80044c4:	e053      	b.n	800456e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Transmit+0x194>
 80044ce:	8b7b      	ldrh	r3, [r7, #26]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d147      	bne.n	8004564 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044fa:	e033      	b.n	8004564 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d113      	bne.n	8004532 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004530:	e018      	b.n	8004564 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004532:	f7fd fdb3 	bl	800209c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d803      	bhi.n	800454a <HAL_SPI_Transmit+0x20a>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d102      	bne.n	8004550 <HAL_SPI_Transmit+0x210>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e02d      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1c6      	bne.n	80044fc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fbd2 	bl	8004d1c <SPI_EndRxTxTransaction>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	e104      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f0:	d112      	bne.n	8004618 <HAL_SPI_Receive+0x50>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2204      	movs	r2, #4
 80045fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f8f3 	bl	80047fa <HAL_SPI_TransmitReceive>
 8004614:	4603      	mov	r3, r0
 8004616:	e0ec      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004618:	f7fd fd40 	bl	800209c <HAL_GetTick>
 800461c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_SPI_Receive+0x62>
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0e1      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_SPI_Receive+0x74>
 8004638:	2302      	movs	r3, #2
 800463a:	e0da      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2204      	movs	r2, #4
 8004648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800468a:	d10f      	bne.n	80046ac <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800469a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b40      	cmp	r3, #64	@ 0x40
 80046b8:	d007      	beq.n	80046ca <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d170      	bne.n	80047b4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046d2:	e035      	b.n	8004740 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d115      	bne.n	800470e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f103 020c 	add.w	r2, r3, #12
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800470c:	e018      	b.n	8004740 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fd fcc5 	bl	800209c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Receive+0x15e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Receive+0x164>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e058      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1c4      	bne.n	80046d4 <HAL_SPI_Receive+0x10c>
 800474a:	e038      	b.n	80047be <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d113      	bne.n	8004782 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	b292      	uxth	r2, r2
 8004766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004780:	e018      	b.n	80047b4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004782:	f7fd fc8b 	bl	800209c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d803      	bhi.n	800479a <HAL_SPI_Receive+0x1d2>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d102      	bne.n	80047a0 <HAL_SPI_Receive+0x1d8>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e01e      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1c6      	bne.n	800474c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fa58 	bl	8004c78 <SPI_EndRxTransaction>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b08a      	sub	sp, #40	@ 0x28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004808:	2301      	movs	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800480c:	f7fd fc46 	bl	800209c <HAL_GetTick>
 8004810:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004818:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004824:	7ffb      	ldrb	r3, [r7, #31]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d00c      	beq.n	8004844 <HAL_SPI_TransmitReceive+0x4a>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004830:	d106      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x46>
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d001      	beq.n	8004844 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	e17f      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x5c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x5c>
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e174      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x6e>
 8004864:	2302      	movs	r3, #2
 8004866:	e16d      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b04      	cmp	r3, #4
 800487a:	d003      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2205      	movs	r2, #5
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b40      	cmp	r3, #64	@ 0x40
 80048c6:	d007      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e0:	d17e      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0xf6>
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d16c      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004914:	e059      	b.n	80049ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d11b      	bne.n	800495c <HAL_SPI_TransmitReceive+0x162>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <HAL_SPI_TransmitReceive+0x162>
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	2b01      	cmp	r3, #1
 8004932:	d113      	bne.n	800495c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d119      	bne.n	800499e <HAL_SPI_TransmitReceive+0x1a4>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	b292      	uxth	r2, r2
 8004980:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800499a:	2301      	movs	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800499e:	f7fd fb7d 	bl	800209c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d80d      	bhi.n	80049ca <HAL_SPI_TransmitReceive+0x1d0>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d009      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0bc      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1a0      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x11c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d19b      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x11c>
 80049de:	e082      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x1f4>
 80049e8:	8afb      	ldrh	r3, [r7, #22]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d171      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	7812      	ldrb	r2, [r2, #0]
 80049fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a14:	e05d      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11c      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x264>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x264>
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d114      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d119      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x2a6>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d014      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aa0:	f7fd fafc 	bl	800209c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d803      	bhi.n	8004ab8 <HAL_SPI_TransmitReceive+0x2be>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x2c4>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e038      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d19c      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x21c>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d197      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f916 	bl	8004d1c <SPI_EndRxTxTransaction>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e01d      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b42:	2300      	movs	r3, #0
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3728      	adds	r7, #40	@ 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b5a:	b2db      	uxtb	r3, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
	...

08004b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b78:	f7fd fa90 	bl	800209c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b88:	f7fd fa88 	bl	800209c <HAL_GetTick>
 8004b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	015b      	lsls	r3, r3, #5
 8004b94:	0d1b      	lsrs	r3, r3, #20
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9e:	e054      	b.n	8004c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d050      	beq.n	8004c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ba8:	f7fd fa78 	bl	800209c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d902      	bls.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d13d      	bne.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd6:	d111      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be0:	d004      	beq.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bea:	d107      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c04:	d10f      	bne.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e017      	b.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d19b      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000000 	.word	0x20000000

08004c78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c8c:	d111      	bne.n	8004cb2 <SPI_EndRxTransaction+0x3a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c96:	d004      	beq.n	8004ca2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca0:	d107      	bne.n	8004cb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d117      	bne.n	8004cec <SPI_EndRxTransaction+0x74>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc4:	d112      	bne.n	8004cec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2101      	movs	r1, #1
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ff49 	bl	8004b68 <SPI_WaitFlagStateUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e013      	b.n	8004d14 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ff36 	bl	8004b68 <SPI_WaitFlagStateUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e000      	b.n	8004d14 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2102      	movs	r1, #2
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff ff18 	bl	8004b68 <SPI_WaitFlagStateUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e013      	b.n	8004d76 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	@ 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff ff05 	bl	8004b68 <SPI_WaitFlagStateUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e000      	b.n	8004d76 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e042      	b.n	8004e16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fe9b 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	@ 0x24
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dc0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f972 	bl	80050ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004de6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004df6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	@ 0x28
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d175      	bne.n	8004f2a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_UART_Transmit+0x2c>
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e06e      	b.n	8004f2c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2221      	movs	r2, #33	@ 0x21
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e5c:	f7fd f91e 	bl	800209c <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e76:	d108      	bne.n	8004e8a <HAL_UART_Transmit+0x6c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e003      	b.n	8004e92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e92:	e02e      	b.n	8004ef2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2180      	movs	r1, #128	@ 0x80
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f848 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03a      	b.n	8004f2c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	3302      	adds	r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e007      	b.n	8004ee4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1cb      	bne.n	8004e94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2140      	movs	r1, #64	@ 0x40
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f814 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e006      	b.n	8004f2c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	e03b      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d037      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fd f8a5 	bl	800209c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e03a      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d023      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d020      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d01d      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d116      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f81d 	bl	8004fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00f      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d0b4      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b095      	sub	sp, #84	@ 0x54
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800500e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e5      	bne.n	8004fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	61fb      	str	r3, [r7, #28]
   return(result);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	2b01      	cmp	r3, #1
 800505c:	d119      	bne.n	8005092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	60bb      	str	r3, [r7, #8]
   return(result);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0310 	bic.w	r3, r3, #16
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800507e:	61ba      	str	r2, [r7, #24]
 8005080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	613b      	str	r3, [r7, #16]
   return(result);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050a0:	bf00      	nop
 80050a2:	3754      	adds	r7, #84	@ 0x54
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
	...

080050ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050e6:	f023 030c 	bic.w	r3, r3, #12
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2c      	ldr	r2, [pc, #176]	@ (80051c0 <UART_SetConfig+0x114>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d103      	bne.n	800511c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7ff f85e 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	e002      	b.n	8005122 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7ff f846 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8005120:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009a      	lsls	r2, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	4a22      	ldr	r2, [pc, #136]	@ (80051c4 <UART_SetConfig+0x118>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	0119      	lsls	r1, r3, #4
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	fbb2 f2f3 	udiv	r2, r2, r3
 8005158:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <UART_SetConfig+0x118>)
 800515a:	fba3 0302 	umull	r0, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2064      	movs	r0, #100	@ 0x64
 8005162:	fb00 f303 	mul.w	r3, r0, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	@ 0x32
 800516c:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <UART_SetConfig+0x118>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	4419      	add	r1, r3
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009a      	lsls	r2, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005190:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <UART_SetConfig+0x118>)
 8005192:	fba3 0302 	umull	r0, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2064      	movs	r0, #100	@ 0x64
 800519a:	fb00 f303 	mul.w	r3, r0, r3
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	3332      	adds	r3, #50	@ 0x32
 80051a4:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <UART_SetConfig+0x118>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	440a      	add	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40013800 	.word	0x40013800
 80051c4:	51eb851f 	.word	0x51eb851f

080051c8 <__cvt>:
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ce:	461d      	mov	r5, r3
 80051d0:	bfbb      	ittet	lt
 80051d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80051d6:	461d      	movlt	r5, r3
 80051d8:	2300      	movge	r3, #0
 80051da:	232d      	movlt	r3, #45	@ 0x2d
 80051dc:	b088      	sub	sp, #32
 80051de:	4614      	mov	r4, r2
 80051e0:	bfb8      	it	lt
 80051e2:	4614      	movlt	r4, r2
 80051e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80051e8:	7013      	strb	r3, [r2, #0]
 80051ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80051f0:	f023 0820 	bic.w	r8, r3, #32
 80051f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051f8:	d005      	beq.n	8005206 <__cvt+0x3e>
 80051fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051fe:	d100      	bne.n	8005202 <__cvt+0x3a>
 8005200:	3601      	adds	r6, #1
 8005202:	2302      	movs	r3, #2
 8005204:	e000      	b.n	8005208 <__cvt+0x40>
 8005206:	2303      	movs	r3, #3
 8005208:	aa07      	add	r2, sp, #28
 800520a:	9204      	str	r2, [sp, #16]
 800520c:	aa06      	add	r2, sp, #24
 800520e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005212:	e9cd 3600 	strd	r3, r6, [sp]
 8005216:	4622      	mov	r2, r4
 8005218:	462b      	mov	r3, r5
 800521a:	f001 f8c5 	bl	80063a8 <_dtoa_r>
 800521e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005222:	4607      	mov	r7, r0
 8005224:	d119      	bne.n	800525a <__cvt+0x92>
 8005226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005228:	07db      	lsls	r3, r3, #31
 800522a:	d50e      	bpl.n	800524a <__cvt+0x82>
 800522c:	eb00 0906 	add.w	r9, r0, r6
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb fbb6 	bl	80009a8 <__aeabi_dcmpeq>
 800523c:	b108      	cbz	r0, 8005242 <__cvt+0x7a>
 800523e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005242:	2230      	movs	r2, #48	@ 0x30
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	454b      	cmp	r3, r9
 8005248:	d31e      	bcc.n	8005288 <__cvt+0xc0>
 800524a:	4638      	mov	r0, r7
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005250:	1bdb      	subs	r3, r3, r7
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	b008      	add	sp, #32
 8005256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800525e:	eb00 0906 	add.w	r9, r0, r6
 8005262:	d1e5      	bne.n	8005230 <__cvt+0x68>
 8005264:	7803      	ldrb	r3, [r0, #0]
 8005266:	2b30      	cmp	r3, #48	@ 0x30
 8005268:	d10a      	bne.n	8005280 <__cvt+0xb8>
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb fb99 	bl	80009a8 <__aeabi_dcmpeq>
 8005276:	b918      	cbnz	r0, 8005280 <__cvt+0xb8>
 8005278:	f1c6 0601 	rsb	r6, r6, #1
 800527c:	f8ca 6000 	str.w	r6, [sl]
 8005280:	f8da 3000 	ldr.w	r3, [sl]
 8005284:	4499      	add	r9, r3
 8005286:	e7d3      	b.n	8005230 <__cvt+0x68>
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	9107      	str	r1, [sp, #28]
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e7d9      	b.n	8005244 <__cvt+0x7c>

08005290 <__exponent>:
 8005290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005292:	2900      	cmp	r1, #0
 8005294:	bfb6      	itet	lt
 8005296:	232d      	movlt	r3, #45	@ 0x2d
 8005298:	232b      	movge	r3, #43	@ 0x2b
 800529a:	4249      	neglt	r1, r1
 800529c:	2909      	cmp	r1, #9
 800529e:	7002      	strb	r2, [r0, #0]
 80052a0:	7043      	strb	r3, [r0, #1]
 80052a2:	dd29      	ble.n	80052f8 <__exponent+0x68>
 80052a4:	f10d 0307 	add.w	r3, sp, #7
 80052a8:	461d      	mov	r5, r3
 80052aa:	270a      	movs	r7, #10
 80052ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80052b0:	461a      	mov	r2, r3
 80052b2:	fb07 1416 	mls	r4, r7, r6, r1
 80052b6:	3430      	adds	r4, #48	@ 0x30
 80052b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052bc:	460c      	mov	r4, r1
 80052be:	2c63      	cmp	r4, #99	@ 0x63
 80052c0:	4631      	mov	r1, r6
 80052c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052c6:	dcf1      	bgt.n	80052ac <__exponent+0x1c>
 80052c8:	3130      	adds	r1, #48	@ 0x30
 80052ca:	1e94      	subs	r4, r2, #2
 80052cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052d0:	4623      	mov	r3, r4
 80052d2:	1c41      	adds	r1, r0, #1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	d30a      	bcc.n	80052ee <__exponent+0x5e>
 80052d8:	f10d 0309 	add.w	r3, sp, #9
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	42ac      	cmp	r4, r5
 80052e0:	bf88      	it	hi
 80052e2:	2300      	movhi	r3, #0
 80052e4:	3302      	adds	r3, #2
 80052e6:	4403      	add	r3, r0
 80052e8:	1a18      	subs	r0, r3, r0
 80052ea:	b003      	add	sp, #12
 80052ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052f6:	e7ed      	b.n	80052d4 <__exponent+0x44>
 80052f8:	2330      	movs	r3, #48	@ 0x30
 80052fa:	3130      	adds	r1, #48	@ 0x30
 80052fc:	7083      	strb	r3, [r0, #2]
 80052fe:	70c1      	strb	r1, [r0, #3]
 8005300:	1d03      	adds	r3, r0, #4
 8005302:	e7f1      	b.n	80052e8 <__exponent+0x58>

08005304 <_printf_float>:
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	b091      	sub	sp, #68	@ 0x44
 800530a:	460c      	mov	r4, r1
 800530c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005310:	4616      	mov	r6, r2
 8005312:	461f      	mov	r7, r3
 8005314:	4605      	mov	r5, r0
 8005316:	f000 ff25 	bl	8006164 <_localeconv_r>
 800531a:	6803      	ldr	r3, [r0, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	9308      	str	r3, [sp, #32]
 8005320:	f7fa ff16 	bl	8000150 <strlen>
 8005324:	2300      	movs	r3, #0
 8005326:	930e      	str	r3, [sp, #56]	@ 0x38
 8005328:	f8d8 3000 	ldr.w	r3, [r8]
 800532c:	9009      	str	r0, [sp, #36]	@ 0x24
 800532e:	3307      	adds	r3, #7
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	f103 0208 	add.w	r2, r3, #8
 8005338:	f894 a018 	ldrb.w	sl, [r4, #24]
 800533c:	f8d4 b000 	ldr.w	fp, [r4]
 8005340:	f8c8 2000 	str.w	r2, [r8]
 8005344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005348:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800534c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800534e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800535a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800535e:	4b9c      	ldr	r3, [pc, #624]	@ (80055d0 <_printf_float+0x2cc>)
 8005360:	f7fb fb54 	bl	8000a0c <__aeabi_dcmpun>
 8005364:	bb70      	cbnz	r0, 80053c4 <_printf_float+0xc0>
 8005366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800536a:	f04f 32ff 	mov.w	r2, #4294967295
 800536e:	4b98      	ldr	r3, [pc, #608]	@ (80055d0 <_printf_float+0x2cc>)
 8005370:	f7fb fb2e 	bl	80009d0 <__aeabi_dcmple>
 8005374:	bb30      	cbnz	r0, 80053c4 <_printf_float+0xc0>
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fb fb1d 	bl	80009bc <__aeabi_dcmplt>
 8005382:	b110      	cbz	r0, 800538a <_printf_float+0x86>
 8005384:	232d      	movs	r3, #45	@ 0x2d
 8005386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800538a:	4a92      	ldr	r2, [pc, #584]	@ (80055d4 <_printf_float+0x2d0>)
 800538c:	4b92      	ldr	r3, [pc, #584]	@ (80055d8 <_printf_float+0x2d4>)
 800538e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005392:	bf94      	ite	ls
 8005394:	4690      	movls	r8, r2
 8005396:	4698      	movhi	r8, r3
 8005398:	2303      	movs	r3, #3
 800539a:	f04f 0900 	mov.w	r9, #0
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	f02b 0304 	bic.w	r3, fp, #4
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	4633      	mov	r3, r6
 80053a8:	4621      	mov	r1, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	9700      	str	r7, [sp, #0]
 80053ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80053b0:	f000 f9d4 	bl	800575c <_printf_common>
 80053b4:	3001      	adds	r0, #1
 80053b6:	f040 8090 	bne.w	80054da <_printf_float+0x1d6>
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	b011      	add	sp, #68	@ 0x44
 80053c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	4640      	mov	r0, r8
 80053ca:	4649      	mov	r1, r9
 80053cc:	f7fb fb1e 	bl	8000a0c <__aeabi_dcmpun>
 80053d0:	b148      	cbz	r0, 80053e6 <_printf_float+0xe2>
 80053d2:	464b      	mov	r3, r9
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bfb8      	it	lt
 80053d8:	232d      	movlt	r3, #45	@ 0x2d
 80053da:	4a80      	ldr	r2, [pc, #512]	@ (80055dc <_printf_float+0x2d8>)
 80053dc:	bfb8      	it	lt
 80053de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053e2:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <_printf_float+0x2dc>)
 80053e4:	e7d3      	b.n	800538e <_printf_float+0x8a>
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	d13f      	bne.n	8005470 <_printf_float+0x16c>
 80053f0:	2306      	movs	r3, #6
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	9206      	str	r2, [sp, #24]
 80053fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8005400:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005404:	aa0d      	add	r2, sp, #52	@ 0x34
 8005406:	9203      	str	r2, [sp, #12]
 8005408:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800540c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	4642      	mov	r2, r8
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	4628      	mov	r0, r5
 8005418:	464b      	mov	r3, r9
 800541a:	910a      	str	r1, [sp, #40]	@ 0x28
 800541c:	f7ff fed4 	bl	80051c8 <__cvt>
 8005420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005422:	4680      	mov	r8, r0
 8005424:	2947      	cmp	r1, #71	@ 0x47
 8005426:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005428:	d128      	bne.n	800547c <_printf_float+0x178>
 800542a:	1cc8      	adds	r0, r1, #3
 800542c:	db02      	blt.n	8005434 <_printf_float+0x130>
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	4299      	cmp	r1, r3
 8005432:	dd40      	ble.n	80054b6 <_printf_float+0x1b2>
 8005434:	f1aa 0a02 	sub.w	sl, sl, #2
 8005438:	fa5f fa8a 	uxtb.w	sl, sl
 800543c:	4652      	mov	r2, sl
 800543e:	3901      	subs	r1, #1
 8005440:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005444:	910d      	str	r1, [sp, #52]	@ 0x34
 8005446:	f7ff ff23 	bl	8005290 <__exponent>
 800544a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800544c:	4681      	mov	r9, r0
 800544e:	1813      	adds	r3, r2, r0
 8005450:	2a01      	cmp	r2, #1
 8005452:	6123      	str	r3, [r4, #16]
 8005454:	dc02      	bgt.n	800545c <_printf_float+0x158>
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	07d2      	lsls	r2, r2, #31
 800545a:	d501      	bpl.n	8005460 <_printf_float+0x15c>
 800545c:	3301      	adds	r3, #1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005464:	2b00      	cmp	r3, #0
 8005466:	d09e      	beq.n	80053a6 <_printf_float+0xa2>
 8005468:	232d      	movs	r3, #45	@ 0x2d
 800546a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800546e:	e79a      	b.n	80053a6 <_printf_float+0xa2>
 8005470:	2947      	cmp	r1, #71	@ 0x47
 8005472:	d1bf      	bne.n	80053f4 <_printf_float+0xf0>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1bd      	bne.n	80053f4 <_printf_float+0xf0>
 8005478:	2301      	movs	r3, #1
 800547a:	e7ba      	b.n	80053f2 <_printf_float+0xee>
 800547c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005480:	d9dc      	bls.n	800543c <_printf_float+0x138>
 8005482:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005486:	d118      	bne.n	80054ba <_printf_float+0x1b6>
 8005488:	2900      	cmp	r1, #0
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	dd0b      	ble.n	80054a6 <_printf_float+0x1a2>
 800548e:	6121      	str	r1, [r4, #16]
 8005490:	b913      	cbnz	r3, 8005498 <_printf_float+0x194>
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	07d0      	lsls	r0, r2, #31
 8005496:	d502      	bpl.n	800549e <_printf_float+0x19a>
 8005498:	3301      	adds	r3, #1
 800549a:	440b      	add	r3, r1
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054a4:	e7dc      	b.n	8005460 <_printf_float+0x15c>
 80054a6:	b913      	cbnz	r3, 80054ae <_printf_float+0x1aa>
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	07d2      	lsls	r2, r2, #31
 80054ac:	d501      	bpl.n	80054b2 <_printf_float+0x1ae>
 80054ae:	3302      	adds	r3, #2
 80054b0:	e7f4      	b.n	800549c <_printf_float+0x198>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e7f2      	b.n	800549c <_printf_float+0x198>
 80054b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054bc:	4299      	cmp	r1, r3
 80054be:	db05      	blt.n	80054cc <_printf_float+0x1c8>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	6121      	str	r1, [r4, #16]
 80054c4:	07d8      	lsls	r0, r3, #31
 80054c6:	d5ea      	bpl.n	800549e <_printf_float+0x19a>
 80054c8:	1c4b      	adds	r3, r1, #1
 80054ca:	e7e7      	b.n	800549c <_printf_float+0x198>
 80054cc:	2900      	cmp	r1, #0
 80054ce:	bfcc      	ite	gt
 80054d0:	2201      	movgt	r2, #1
 80054d2:	f1c1 0202 	rsble	r2, r1, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	e7e0      	b.n	800549c <_printf_float+0x198>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	055a      	lsls	r2, r3, #21
 80054de:	d407      	bmi.n	80054f0 <_printf_float+0x1ec>
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	4642      	mov	r2, r8
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	d12b      	bne.n	8005546 <_printf_float+0x242>
 80054ee:	e764      	b.n	80053ba <_printf_float+0xb6>
 80054f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054f4:	f240 80dc 	bls.w	80056b0 <_printf_float+0x3ac>
 80054f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054fc:	2200      	movs	r2, #0
 80054fe:	2300      	movs	r3, #0
 8005500:	f7fb fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8005504:	2800      	cmp	r0, #0
 8005506:	d033      	beq.n	8005570 <_printf_float+0x26c>
 8005508:	2301      	movs	r3, #1
 800550a:	4631      	mov	r1, r6
 800550c:	4628      	mov	r0, r5
 800550e:	4a35      	ldr	r2, [pc, #212]	@ (80055e4 <_printf_float+0x2e0>)
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f af51 	beq.w	80053ba <_printf_float+0xb6>
 8005518:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800551c:	4543      	cmp	r3, r8
 800551e:	db02      	blt.n	8005526 <_printf_float+0x222>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	07d8      	lsls	r0, r3, #31
 8005524:	d50f      	bpl.n	8005546 <_printf_float+0x242>
 8005526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	f43f af42 	beq.w	80053ba <_printf_float+0xb6>
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	f108 38ff 	add.w	r8, r8, #4294967295
 800553e:	f104 0a1a 	add.w	sl, r4, #26
 8005542:	45c8      	cmp	r8, r9
 8005544:	dc09      	bgt.n	800555a <_printf_float+0x256>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	f100 8102 	bmi.w	8005752 <_printf_float+0x44e>
 800554e:	68e0      	ldr	r0, [r4, #12]
 8005550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005552:	4298      	cmp	r0, r3
 8005554:	bfb8      	it	lt
 8005556:	4618      	movlt	r0, r3
 8005558:	e731      	b.n	80053be <_printf_float+0xba>
 800555a:	2301      	movs	r3, #1
 800555c:	4652      	mov	r2, sl
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f af28 	beq.w	80053ba <_printf_float+0xb6>
 800556a:	f109 0901 	add.w	r9, r9, #1
 800556e:	e7e8      	b.n	8005542 <_printf_float+0x23e>
 8005570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005572:	2b00      	cmp	r3, #0
 8005574:	dc38      	bgt.n	80055e8 <_printf_float+0x2e4>
 8005576:	2301      	movs	r3, #1
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	4a19      	ldr	r2, [pc, #100]	@ (80055e4 <_printf_float+0x2e0>)
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f af1a 	beq.w	80053ba <_printf_float+0xb6>
 8005586:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800558a:	ea59 0303 	orrs.w	r3, r9, r3
 800558e:	d102      	bne.n	8005596 <_printf_float+0x292>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	07d9      	lsls	r1, r3, #31
 8005594:	d5d7      	bpl.n	8005546 <_printf_float+0x242>
 8005596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f af0a 	beq.w	80053ba <_printf_float+0xb6>
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	f104 0b1a 	add.w	fp, r4, #26
 80055ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055b0:	425b      	negs	r3, r3
 80055b2:	4553      	cmp	r3, sl
 80055b4:	dc01      	bgt.n	80055ba <_printf_float+0x2b6>
 80055b6:	464b      	mov	r3, r9
 80055b8:	e793      	b.n	80054e2 <_printf_float+0x1de>
 80055ba:	2301      	movs	r3, #1
 80055bc:	465a      	mov	r2, fp
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b8      	blx	r7
 80055c4:	3001      	adds	r0, #1
 80055c6:	f43f aef8 	beq.w	80053ba <_printf_float+0xb6>
 80055ca:	f10a 0a01 	add.w	sl, sl, #1
 80055ce:	e7ee      	b.n	80055ae <_printf_float+0x2aa>
 80055d0:	7fefffff 	.word	0x7fefffff
 80055d4:	080099c2 	.word	0x080099c2
 80055d8:	080099c6 	.word	0x080099c6
 80055dc:	080099ca 	.word	0x080099ca
 80055e0:	080099ce 	.word	0x080099ce
 80055e4:	080099d2 	.word	0x080099d2
 80055e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80055ee:	4553      	cmp	r3, sl
 80055f0:	bfa8      	it	ge
 80055f2:	4653      	movge	r3, sl
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	4699      	mov	r9, r3
 80055f8:	dc36      	bgt.n	8005668 <_printf_float+0x364>
 80055fa:	f04f 0b00 	mov.w	fp, #0
 80055fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005602:	f104 021a 	add.w	r2, r4, #26
 8005606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005608:	930a      	str	r3, [sp, #40]	@ 0x28
 800560a:	eba3 0309 	sub.w	r3, r3, r9
 800560e:	455b      	cmp	r3, fp
 8005610:	dc31      	bgt.n	8005676 <_printf_float+0x372>
 8005612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005614:	459a      	cmp	sl, r3
 8005616:	dc3a      	bgt.n	800568e <_printf_float+0x38a>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	07da      	lsls	r2, r3, #31
 800561c:	d437      	bmi.n	800568e <_printf_float+0x38a>
 800561e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005620:	ebaa 0903 	sub.w	r9, sl, r3
 8005624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005626:	ebaa 0303 	sub.w	r3, sl, r3
 800562a:	4599      	cmp	r9, r3
 800562c:	bfa8      	it	ge
 800562e:	4699      	movge	r9, r3
 8005630:	f1b9 0f00 	cmp.w	r9, #0
 8005634:	dc33      	bgt.n	800569e <_printf_float+0x39a>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800563e:	f104 0b1a 	add.w	fp, r4, #26
 8005642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005644:	ebaa 0303 	sub.w	r3, sl, r3
 8005648:	eba3 0309 	sub.w	r3, r3, r9
 800564c:	4543      	cmp	r3, r8
 800564e:	f77f af7a 	ble.w	8005546 <_printf_float+0x242>
 8005652:	2301      	movs	r3, #1
 8005654:	465a      	mov	r2, fp
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	47b8      	blx	r7
 800565c:	3001      	adds	r0, #1
 800565e:	f43f aeac 	beq.w	80053ba <_printf_float+0xb6>
 8005662:	f108 0801 	add.w	r8, r8, #1
 8005666:	e7ec      	b.n	8005642 <_printf_float+0x33e>
 8005668:	4642      	mov	r2, r8
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	d1c2      	bne.n	80055fa <_printf_float+0x2f6>
 8005674:	e6a1      	b.n	80053ba <_printf_float+0xb6>
 8005676:	2301      	movs	r3, #1
 8005678:	4631      	mov	r1, r6
 800567a:	4628      	mov	r0, r5
 800567c:	920a      	str	r2, [sp, #40]	@ 0x28
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f ae9a 	beq.w	80053ba <_printf_float+0xb6>
 8005686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005688:	f10b 0b01 	add.w	fp, fp, #1
 800568c:	e7bb      	b.n	8005606 <_printf_float+0x302>
 800568e:	4631      	mov	r1, r6
 8005690:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	d1c0      	bne.n	800561e <_printf_float+0x31a>
 800569c:	e68d      	b.n	80053ba <_printf_float+0xb6>
 800569e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056a0:	464b      	mov	r3, r9
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	4442      	add	r2, r8
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	d1c3      	bne.n	8005636 <_printf_float+0x332>
 80056ae:	e684      	b.n	80053ba <_printf_float+0xb6>
 80056b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80056b4:	f1ba 0f01 	cmp.w	sl, #1
 80056b8:	dc01      	bgt.n	80056be <_printf_float+0x3ba>
 80056ba:	07db      	lsls	r3, r3, #31
 80056bc:	d536      	bpl.n	800572c <_printf_float+0x428>
 80056be:	2301      	movs	r3, #1
 80056c0:	4642      	mov	r2, r8
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f ae76 	beq.w	80053ba <_printf_float+0xb6>
 80056ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f ae6e 	beq.w	80053ba <_printf_float+0xb6>
 80056de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056e2:	2200      	movs	r2, #0
 80056e4:	2300      	movs	r3, #0
 80056e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ea:	f7fb f95d 	bl	80009a8 <__aeabi_dcmpeq>
 80056ee:	b9c0      	cbnz	r0, 8005722 <_printf_float+0x41e>
 80056f0:	4653      	mov	r3, sl
 80056f2:	f108 0201 	add.w	r2, r8, #1
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	d10c      	bne.n	800571a <_printf_float+0x416>
 8005700:	e65b      	b.n	80053ba <_printf_float+0xb6>
 8005702:	2301      	movs	r3, #1
 8005704:	465a      	mov	r2, fp
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae54 	beq.w	80053ba <_printf_float+0xb6>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	45d0      	cmp	r8, sl
 8005718:	dbf3      	blt.n	8005702 <_printf_float+0x3fe>
 800571a:	464b      	mov	r3, r9
 800571c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005720:	e6e0      	b.n	80054e4 <_printf_float+0x1e0>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	f104 0b1a 	add.w	fp, r4, #26
 800572a:	e7f4      	b.n	8005716 <_printf_float+0x412>
 800572c:	2301      	movs	r3, #1
 800572e:	4642      	mov	r2, r8
 8005730:	e7e1      	b.n	80056f6 <_printf_float+0x3f2>
 8005732:	2301      	movs	r3, #1
 8005734:	464a      	mov	r2, r9
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	f43f ae3c 	beq.w	80053ba <_printf_float+0xb6>
 8005742:	f108 0801 	add.w	r8, r8, #1
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800574a:	1a5b      	subs	r3, r3, r1
 800574c:	4543      	cmp	r3, r8
 800574e:	dcf0      	bgt.n	8005732 <_printf_float+0x42e>
 8005750:	e6fd      	b.n	800554e <_printf_float+0x24a>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	f104 0919 	add.w	r9, r4, #25
 800575a:	e7f4      	b.n	8005746 <_printf_float+0x442>

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4698      	mov	r8, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	4607      	mov	r7, r0
 800576a:	4293      	cmp	r3, r2
 800576c:	bfb8      	it	lt
 800576e:	4613      	movlt	r3, r2
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005776:	460c      	mov	r4, r1
 8005778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc2b      	bgt.n	80057fc <_printf_common+0xa0>
 80057a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	3b00      	subs	r3, #0
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d430      	bmi.n	8005816 <_printf_common+0xba>
 80057b4:	4641      	mov	r1, r8
 80057b6:	4638      	mov	r0, r7
 80057b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057bc:	47c8      	blx	r9
 80057be:	3001      	adds	r0, #1
 80057c0:	d023      	beq.n	800580a <_printf_common+0xae>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf14      	ite	ne
 80057ce:	2500      	movne	r5, #0
 80057d0:	6833      	ldreq	r3, [r6, #0]
 80057d2:	f04f 0600 	mov.w	r6, #0
 80057d6:	bf08      	it	eq
 80057d8:	68e5      	ldreq	r5, [r4, #12]
 80057da:	f104 041a 	add.w	r4, r4, #26
 80057de:	bf08      	it	eq
 80057e0:	1aed      	subeq	r5, r5, r3
 80057e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057e6:	bf08      	it	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	4293      	cmp	r3, r2
 80057ee:	bfc4      	itt	gt
 80057f0:	1a9b      	subgt	r3, r3, r2
 80057f2:	18ed      	addgt	r5, r5, r3
 80057f4:	42b5      	cmp	r5, r6
 80057f6:	d11a      	bne.n	800582e <_printf_common+0xd2>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e008      	b.n	800580e <_printf_common+0xb2>
 80057fc:	2301      	movs	r3, #1
 80057fe:	4652      	mov	r2, sl
 8005800:	4641      	mov	r1, r8
 8005802:	4638      	mov	r0, r7
 8005804:	47c8      	blx	r9
 8005806:	3001      	adds	r0, #1
 8005808:	d103      	bne.n	8005812 <_printf_common+0xb6>
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005812:	3501      	adds	r5, #1
 8005814:	e7c1      	b.n	800579a <_printf_common+0x3e>
 8005816:	2030      	movs	r0, #48	@ 0x30
 8005818:	18e1      	adds	r1, r4, r3
 800581a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005824:	4422      	add	r2, r4
 8005826:	3302      	adds	r3, #2
 8005828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800582c:	e7c2      	b.n	80057b4 <_printf_common+0x58>
 800582e:	2301      	movs	r3, #1
 8005830:	4622      	mov	r2, r4
 8005832:	4641      	mov	r1, r8
 8005834:	4638      	mov	r0, r7
 8005836:	47c8      	blx	r9
 8005838:	3001      	adds	r0, #1
 800583a:	d0e6      	beq.n	800580a <_printf_common+0xae>
 800583c:	3601      	adds	r6, #1
 800583e:	e7d9      	b.n	80057f4 <_printf_common+0x98>

08005840 <_printf_i>:
 8005840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	7e0f      	ldrb	r7, [r1, #24]
 8005846:	4691      	mov	r9, r2
 8005848:	2f78      	cmp	r7, #120	@ 0x78
 800584a:	4680      	mov	r8, r0
 800584c:	460c      	mov	r4, r1
 800584e:	469a      	mov	sl, r3
 8005850:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005856:	d807      	bhi.n	8005868 <_printf_i+0x28>
 8005858:	2f62      	cmp	r7, #98	@ 0x62
 800585a:	d80a      	bhi.n	8005872 <_printf_i+0x32>
 800585c:	2f00      	cmp	r7, #0
 800585e:	f000 80d3 	beq.w	8005a08 <_printf_i+0x1c8>
 8005862:	2f58      	cmp	r7, #88	@ 0x58
 8005864:	f000 80ba 	beq.w	80059dc <_printf_i+0x19c>
 8005868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800586c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005870:	e03a      	b.n	80058e8 <_printf_i+0xa8>
 8005872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005876:	2b15      	cmp	r3, #21
 8005878:	d8f6      	bhi.n	8005868 <_printf_i+0x28>
 800587a:	a101      	add	r1, pc, #4	@ (adr r1, 8005880 <_printf_i+0x40>)
 800587c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058ed 	.word	0x080058ed
 8005888:	08005869 	.word	0x08005869
 800588c:	08005869 	.word	0x08005869
 8005890:	08005869 	.word	0x08005869
 8005894:	08005869 	.word	0x08005869
 8005898:	080058ed 	.word	0x080058ed
 800589c:	08005869 	.word	0x08005869
 80058a0:	08005869 	.word	0x08005869
 80058a4:	08005869 	.word	0x08005869
 80058a8:	08005869 	.word	0x08005869
 80058ac:	080059ef 	.word	0x080059ef
 80058b0:	08005917 	.word	0x08005917
 80058b4:	080059a9 	.word	0x080059a9
 80058b8:	08005869 	.word	0x08005869
 80058bc:	08005869 	.word	0x08005869
 80058c0:	08005a11 	.word	0x08005a11
 80058c4:	08005869 	.word	0x08005869
 80058c8:	08005917 	.word	0x08005917
 80058cc:	08005869 	.word	0x08005869
 80058d0:	08005869 	.word	0x08005869
 80058d4:	080059b1 	.word	0x080059b1
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6032      	str	r2, [r6, #0]
 80058e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058e8:	2301      	movs	r3, #1
 80058ea:	e09e      	b.n	8005a2a <_printf_i+0x1ea>
 80058ec:	6833      	ldr	r3, [r6, #0]
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	1d19      	adds	r1, r3, #4
 80058f2:	6031      	str	r1, [r6, #0]
 80058f4:	0606      	lsls	r6, r0, #24
 80058f6:	d501      	bpl.n	80058fc <_printf_i+0xbc>
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	e003      	b.n	8005904 <_printf_i+0xc4>
 80058fc:	0645      	lsls	r5, r0, #25
 80058fe:	d5fb      	bpl.n	80058f8 <_printf_i+0xb8>
 8005900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005904:	2d00      	cmp	r5, #0
 8005906:	da03      	bge.n	8005910 <_printf_i+0xd0>
 8005908:	232d      	movs	r3, #45	@ 0x2d
 800590a:	426d      	negs	r5, r5
 800590c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005910:	230a      	movs	r3, #10
 8005912:	4859      	ldr	r0, [pc, #356]	@ (8005a78 <_printf_i+0x238>)
 8005914:	e011      	b.n	800593a <_printf_i+0xfa>
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	0608      	lsls	r0, r1, #24
 800591c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005920:	d402      	bmi.n	8005928 <_printf_i+0xe8>
 8005922:	0649      	lsls	r1, r1, #25
 8005924:	bf48      	it	mi
 8005926:	b2ad      	uxthmi	r5, r5
 8005928:	2f6f      	cmp	r7, #111	@ 0x6f
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	bf14      	ite	ne
 800592e:	230a      	movne	r3, #10
 8005930:	2308      	moveq	r3, #8
 8005932:	4851      	ldr	r0, [pc, #324]	@ (8005a78 <_printf_i+0x238>)
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800593a:	6866      	ldr	r6, [r4, #4]
 800593c:	2e00      	cmp	r6, #0
 800593e:	bfa8      	it	ge
 8005940:	6821      	ldrge	r1, [r4, #0]
 8005942:	60a6      	str	r6, [r4, #8]
 8005944:	bfa4      	itt	ge
 8005946:	f021 0104 	bicge.w	r1, r1, #4
 800594a:	6021      	strge	r1, [r4, #0]
 800594c:	b90d      	cbnz	r5, 8005952 <_printf_i+0x112>
 800594e:	2e00      	cmp	r6, #0
 8005950:	d04b      	beq.n	80059ea <_printf_i+0x1aa>
 8005952:	4616      	mov	r6, r2
 8005954:	fbb5 f1f3 	udiv	r1, r5, r3
 8005958:	fb03 5711 	mls	r7, r3, r1, r5
 800595c:	5dc7      	ldrb	r7, [r0, r7]
 800595e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005962:	462f      	mov	r7, r5
 8005964:	42bb      	cmp	r3, r7
 8005966:	460d      	mov	r5, r1
 8005968:	d9f4      	bls.n	8005954 <_printf_i+0x114>
 800596a:	2b08      	cmp	r3, #8
 800596c:	d10b      	bne.n	8005986 <_printf_i+0x146>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	07df      	lsls	r7, r3, #31
 8005972:	d508      	bpl.n	8005986 <_printf_i+0x146>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	6861      	ldr	r1, [r4, #4]
 8005978:	4299      	cmp	r1, r3
 800597a:	bfde      	ittt	le
 800597c:	2330      	movle	r3, #48	@ 0x30
 800597e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005982:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005986:	1b92      	subs	r2, r2, r6
 8005988:	6122      	str	r2, [r4, #16]
 800598a:	464b      	mov	r3, r9
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f8cd a000 	str.w	sl, [sp]
 8005994:	aa03      	add	r2, sp, #12
 8005996:	f7ff fee1 	bl	800575c <_printf_common>
 800599a:	3001      	adds	r0, #1
 800599c:	d14a      	bne.n	8005a34 <_printf_i+0x1f4>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f043 0320 	orr.w	r3, r3, #32
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	2778      	movs	r7, #120	@ 0x78
 80059b2:	4832      	ldr	r0, [pc, #200]	@ (8005a7c <_printf_i+0x23c>)
 80059b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	6831      	ldr	r1, [r6, #0]
 80059bc:	061f      	lsls	r7, r3, #24
 80059be:	f851 5b04 	ldr.w	r5, [r1], #4
 80059c2:	d402      	bmi.n	80059ca <_printf_i+0x18a>
 80059c4:	065f      	lsls	r7, r3, #25
 80059c6:	bf48      	it	mi
 80059c8:	b2ad      	uxthmi	r5, r5
 80059ca:	6031      	str	r1, [r6, #0]
 80059cc:	07d9      	lsls	r1, r3, #31
 80059ce:	bf44      	itt	mi
 80059d0:	f043 0320 	orrmi.w	r3, r3, #32
 80059d4:	6023      	strmi	r3, [r4, #0]
 80059d6:	b11d      	cbz	r5, 80059e0 <_printf_i+0x1a0>
 80059d8:	2310      	movs	r3, #16
 80059da:	e7ab      	b.n	8005934 <_printf_i+0xf4>
 80059dc:	4826      	ldr	r0, [pc, #152]	@ (8005a78 <_printf_i+0x238>)
 80059de:	e7e9      	b.n	80059b4 <_printf_i+0x174>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f023 0320 	bic.w	r3, r3, #32
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	e7f6      	b.n	80059d8 <_printf_i+0x198>
 80059ea:	4616      	mov	r6, r2
 80059ec:	e7bd      	b.n	800596a <_printf_i+0x12a>
 80059ee:	6833      	ldr	r3, [r6, #0]
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	1d18      	adds	r0, r3, #4
 80059f4:	6961      	ldr	r1, [r4, #20]
 80059f6:	6030      	str	r0, [r6, #0]
 80059f8:	062e      	lsls	r6, r5, #24
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	d501      	bpl.n	8005a02 <_printf_i+0x1c2>
 80059fe:	6019      	str	r1, [r3, #0]
 8005a00:	e002      	b.n	8005a08 <_printf_i+0x1c8>
 8005a02:	0668      	lsls	r0, r5, #25
 8005a04:	d5fb      	bpl.n	80059fe <_printf_i+0x1be>
 8005a06:	8019      	strh	r1, [r3, #0]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	e7bc      	b.n	800598a <_printf_i+0x14a>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	2100      	movs	r1, #0
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	681e      	ldr	r6, [r3, #0]
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 fc18 	bl	8006252 <memchr>
 8005a22:	b108      	cbz	r0, 8005a28 <_printf_i+0x1e8>
 8005a24:	1b80      	subs	r0, r0, r6
 8005a26:	6060      	str	r0, [r4, #4]
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a32:	e7aa      	b.n	800598a <_printf_i+0x14a>
 8005a34:	4632      	mov	r2, r6
 8005a36:	4649      	mov	r1, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	47d0      	blx	sl
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d0ad      	beq.n	800599e <_printf_i+0x15e>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	079b      	lsls	r3, r3, #30
 8005a46:	d413      	bmi.n	8005a70 <_printf_i+0x230>
 8005a48:	68e0      	ldr	r0, [r4, #12]
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	bfb8      	it	lt
 8005a50:	4618      	movlt	r0, r3
 8005a52:	e7a6      	b.n	80059a2 <_printf_i+0x162>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4632      	mov	r2, r6
 8005a58:	4649      	mov	r1, r9
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	47d0      	blx	sl
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d09d      	beq.n	800599e <_printf_i+0x15e>
 8005a62:	3501      	adds	r5, #1
 8005a64:	68e3      	ldr	r3, [r4, #12]
 8005a66:	9903      	ldr	r1, [sp, #12]
 8005a68:	1a5b      	subs	r3, r3, r1
 8005a6a:	42ab      	cmp	r3, r5
 8005a6c:	dcf2      	bgt.n	8005a54 <_printf_i+0x214>
 8005a6e:	e7eb      	b.n	8005a48 <_printf_i+0x208>
 8005a70:	2500      	movs	r5, #0
 8005a72:	f104 0619 	add.w	r6, r4, #25
 8005a76:	e7f5      	b.n	8005a64 <_printf_i+0x224>
 8005a78:	080099d4 	.word	0x080099d4
 8005a7c:	080099e5 	.word	0x080099e5

08005a80 <_scanf_float>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	b087      	sub	sp, #28
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	688b      	ldr	r3, [r1, #8]
 8005a8a:	4617      	mov	r7, r2
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005a92:	bf82      	ittt	hi
 8005a94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005a98:	eb03 0b05 	addhi.w	fp, r3, r5
 8005a9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	f04f 0500 	mov.w	r5, #0
 8005aa6:	bf88      	it	hi
 8005aa8:	608b      	strhi	r3, [r1, #8]
 8005aaa:	680b      	ldr	r3, [r1, #0]
 8005aac:	4680      	mov	r8, r0
 8005aae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005ab2:	f842 3b1c 	str.w	r3, [r2], #28
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	bf98      	it	ls
 8005aba:	f04f 0b00 	movls.w	fp, #0
 8005abe:	4616      	mov	r6, r2
 8005ac0:	46aa      	mov	sl, r5
 8005ac2:	46a9      	mov	r9, r5
 8005ac4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ac8:	9201      	str	r2, [sp, #4]
 8005aca:	9502      	str	r5, [sp, #8]
 8005acc:	68a2      	ldr	r2, [r4, #8]
 8005ace:	b152      	cbz	r2, 8005ae6 <_scanf_float+0x66>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ad6:	d865      	bhi.n	8005ba4 <_scanf_float+0x124>
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d83d      	bhi.n	8005b58 <_scanf_float+0xd8>
 8005adc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005ae0:	b2c8      	uxtb	r0, r1
 8005ae2:	280e      	cmp	r0, #14
 8005ae4:	d93b      	bls.n	8005b5e <_scanf_float+0xde>
 8005ae6:	f1b9 0f00 	cmp.w	r9, #0
 8005aea:	d003      	beq.n	8005af4 <_scanf_float+0x74>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005af8:	f1ba 0f01 	cmp.w	sl, #1
 8005afc:	f200 8118 	bhi.w	8005d30 <_scanf_float+0x2b0>
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	429e      	cmp	r6, r3
 8005b04:	f200 8109 	bhi.w	8005d1a <_scanf_float+0x29a>
 8005b08:	2001      	movs	r0, #1
 8005b0a:	b007      	add	sp, #28
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005b14:	2a0d      	cmp	r2, #13
 8005b16:	d8e6      	bhi.n	8005ae6 <_scanf_float+0x66>
 8005b18:	a101      	add	r1, pc, #4	@ (adr r1, 8005b20 <_scanf_float+0xa0>)
 8005b1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005c67 	.word	0x08005c67
 8005b24:	08005ae7 	.word	0x08005ae7
 8005b28:	08005ae7 	.word	0x08005ae7
 8005b2c:	08005ae7 	.word	0x08005ae7
 8005b30:	08005cc7 	.word	0x08005cc7
 8005b34:	08005c9f 	.word	0x08005c9f
 8005b38:	08005ae7 	.word	0x08005ae7
 8005b3c:	08005ae7 	.word	0x08005ae7
 8005b40:	08005c75 	.word	0x08005c75
 8005b44:	08005ae7 	.word	0x08005ae7
 8005b48:	08005ae7 	.word	0x08005ae7
 8005b4c:	08005ae7 	.word	0x08005ae7
 8005b50:	08005ae7 	.word	0x08005ae7
 8005b54:	08005c2d 	.word	0x08005c2d
 8005b58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005b5c:	e7da      	b.n	8005b14 <_scanf_float+0x94>
 8005b5e:	290e      	cmp	r1, #14
 8005b60:	d8c1      	bhi.n	8005ae6 <_scanf_float+0x66>
 8005b62:	a001      	add	r0, pc, #4	@ (adr r0, 8005b68 <_scanf_float+0xe8>)
 8005b64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b68:	08005c1d 	.word	0x08005c1d
 8005b6c:	08005ae7 	.word	0x08005ae7
 8005b70:	08005c1d 	.word	0x08005c1d
 8005b74:	08005cb3 	.word	0x08005cb3
 8005b78:	08005ae7 	.word	0x08005ae7
 8005b7c:	08005bc5 	.word	0x08005bc5
 8005b80:	08005c03 	.word	0x08005c03
 8005b84:	08005c03 	.word	0x08005c03
 8005b88:	08005c03 	.word	0x08005c03
 8005b8c:	08005c03 	.word	0x08005c03
 8005b90:	08005c03 	.word	0x08005c03
 8005b94:	08005c03 	.word	0x08005c03
 8005b98:	08005c03 	.word	0x08005c03
 8005b9c:	08005c03 	.word	0x08005c03
 8005ba0:	08005c03 	.word	0x08005c03
 8005ba4:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ba6:	d809      	bhi.n	8005bbc <_scanf_float+0x13c>
 8005ba8:	2b60      	cmp	r3, #96	@ 0x60
 8005baa:	d8b1      	bhi.n	8005b10 <_scanf_float+0x90>
 8005bac:	2b54      	cmp	r3, #84	@ 0x54
 8005bae:	d07b      	beq.n	8005ca8 <_scanf_float+0x228>
 8005bb0:	2b59      	cmp	r3, #89	@ 0x59
 8005bb2:	d198      	bne.n	8005ae6 <_scanf_float+0x66>
 8005bb4:	2d07      	cmp	r5, #7
 8005bb6:	d196      	bne.n	8005ae6 <_scanf_float+0x66>
 8005bb8:	2508      	movs	r5, #8
 8005bba:	e02c      	b.n	8005c16 <_scanf_float+0x196>
 8005bbc:	2b74      	cmp	r3, #116	@ 0x74
 8005bbe:	d073      	beq.n	8005ca8 <_scanf_float+0x228>
 8005bc0:	2b79      	cmp	r3, #121	@ 0x79
 8005bc2:	e7f6      	b.n	8005bb2 <_scanf_float+0x132>
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	05c8      	lsls	r0, r1, #23
 8005bc8:	d51b      	bpl.n	8005c02 <_scanf_float+0x182>
 8005bca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005bce:	6021      	str	r1, [r4, #0]
 8005bd0:	f109 0901 	add.w	r9, r9, #1
 8005bd4:	f1bb 0f00 	cmp.w	fp, #0
 8005bd8:	d003      	beq.n	8005be2 <_scanf_float+0x162>
 8005bda:	3201      	adds	r2, #1
 8005bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005be0:	60a2      	str	r2, [r4, #8]
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	60a3      	str	r3, [r4, #8]
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	3301      	adds	r3, #1
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	f340 8087 	ble.w	8005d08 <_scanf_float+0x288>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	e764      	b.n	8005acc <_scanf_float+0x4c>
 8005c02:	eb1a 0105 	adds.w	r1, sl, r5
 8005c06:	f47f af6e 	bne.w	8005ae6 <_scanf_float+0x66>
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	468a      	mov	sl, r1
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	f806 3b01 	strb.w	r3, [r6], #1
 8005c1a:	e7e2      	b.n	8005be2 <_scanf_float+0x162>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	0610      	lsls	r0, r2, #24
 8005c20:	f57f af61 	bpl.w	8005ae6 <_scanf_float+0x66>
 8005c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	e7f4      	b.n	8005c16 <_scanf_float+0x196>
 8005c2c:	f1ba 0f00 	cmp.w	sl, #0
 8005c30:	d10e      	bne.n	8005c50 <_scanf_float+0x1d0>
 8005c32:	f1b9 0f00 	cmp.w	r9, #0
 8005c36:	d10e      	bne.n	8005c56 <_scanf_float+0x1d6>
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c42:	d108      	bne.n	8005c56 <_scanf_float+0x1d6>
 8005c44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c48:	f04f 0a01 	mov.w	sl, #1
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	e7e2      	b.n	8005c16 <_scanf_float+0x196>
 8005c50:	f1ba 0f02 	cmp.w	sl, #2
 8005c54:	d055      	beq.n	8005d02 <_scanf_float+0x282>
 8005c56:	2d01      	cmp	r5, #1
 8005c58:	d002      	beq.n	8005c60 <_scanf_float+0x1e0>
 8005c5a:	2d04      	cmp	r5, #4
 8005c5c:	f47f af43 	bne.w	8005ae6 <_scanf_float+0x66>
 8005c60:	3501      	adds	r5, #1
 8005c62:	b2ed      	uxtb	r5, r5
 8005c64:	e7d7      	b.n	8005c16 <_scanf_float+0x196>
 8005c66:	f1ba 0f01 	cmp.w	sl, #1
 8005c6a:	f47f af3c 	bne.w	8005ae6 <_scanf_float+0x66>
 8005c6e:	f04f 0a02 	mov.w	sl, #2
 8005c72:	e7d0      	b.n	8005c16 <_scanf_float+0x196>
 8005c74:	b97d      	cbnz	r5, 8005c96 <_scanf_float+0x216>
 8005c76:	f1b9 0f00 	cmp.w	r9, #0
 8005c7a:	f47f af37 	bne.w	8005aec <_scanf_float+0x6c>
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c88:	f040 8103 	bne.w	8005e92 <_scanf_float+0x412>
 8005c8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c90:	2501      	movs	r5, #1
 8005c92:	6022      	str	r2, [r4, #0]
 8005c94:	e7bf      	b.n	8005c16 <_scanf_float+0x196>
 8005c96:	2d03      	cmp	r5, #3
 8005c98:	d0e2      	beq.n	8005c60 <_scanf_float+0x1e0>
 8005c9a:	2d05      	cmp	r5, #5
 8005c9c:	e7de      	b.n	8005c5c <_scanf_float+0x1dc>
 8005c9e:	2d02      	cmp	r5, #2
 8005ca0:	f47f af21 	bne.w	8005ae6 <_scanf_float+0x66>
 8005ca4:	2503      	movs	r5, #3
 8005ca6:	e7b6      	b.n	8005c16 <_scanf_float+0x196>
 8005ca8:	2d06      	cmp	r5, #6
 8005caa:	f47f af1c 	bne.w	8005ae6 <_scanf_float+0x66>
 8005cae:	2507      	movs	r5, #7
 8005cb0:	e7b1      	b.n	8005c16 <_scanf_float+0x196>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	0591      	lsls	r1, r2, #22
 8005cb6:	f57f af16 	bpl.w	8005ae6 <_scanf_float+0x66>
 8005cba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005cbe:	6022      	str	r2, [r4, #0]
 8005cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cc4:	e7a7      	b.n	8005c16 <_scanf_float+0x196>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ccc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005cd0:	d006      	beq.n	8005ce0 <_scanf_float+0x260>
 8005cd2:	0550      	lsls	r0, r2, #21
 8005cd4:	f57f af07 	bpl.w	8005ae6 <_scanf_float+0x66>
 8005cd8:	f1b9 0f00 	cmp.w	r9, #0
 8005cdc:	f000 80d9 	beq.w	8005e92 <_scanf_float+0x412>
 8005ce0:	0591      	lsls	r1, r2, #22
 8005ce2:	bf58      	it	pl
 8005ce4:	9902      	ldrpl	r1, [sp, #8]
 8005ce6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005cea:	bf58      	it	pl
 8005cec:	eba9 0101 	subpl.w	r1, r9, r1
 8005cf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005cf4:	f04f 0900 	mov.w	r9, #0
 8005cf8:	bf58      	it	pl
 8005cfa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cfe:	6022      	str	r2, [r4, #0]
 8005d00:	e789      	b.n	8005c16 <_scanf_float+0x196>
 8005d02:	f04f 0a03 	mov.w	sl, #3
 8005d06:	e786      	b.n	8005c16 <_scanf_float+0x196>
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d10:	4798      	blx	r3
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f43f aeda 	beq.w	8005acc <_scanf_float+0x4c>
 8005d18:	e6e5      	b.n	8005ae6 <_scanf_float+0x66>
 8005d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d1e:	463a      	mov	r2, r7
 8005d20:	4640      	mov	r0, r8
 8005d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d26:	4798      	blx	r3
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	e6e7      	b.n	8005b00 <_scanf_float+0x80>
 8005d30:	1e6b      	subs	r3, r5, #1
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d824      	bhi.n	8005d80 <_scanf_float+0x300>
 8005d36:	2d02      	cmp	r5, #2
 8005d38:	d836      	bhi.n	8005da8 <_scanf_float+0x328>
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	429e      	cmp	r6, r3
 8005d3e:	f67f aee3 	bls.w	8005b08 <_scanf_float+0x88>
 8005d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d46:	463a      	mov	r2, r7
 8005d48:	4640      	mov	r0, r8
 8005d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d4e:	4798      	blx	r3
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	e7f0      	b.n	8005d3a <_scanf_float+0x2ba>
 8005d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005d64:	4798      	blx	r3
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d70:	fa5f fa8a 	uxtb.w	sl, sl
 8005d74:	f1ba 0f02 	cmp.w	sl, #2
 8005d78:	d1ee      	bne.n	8005d58 <_scanf_float+0x2d8>
 8005d7a:	3d03      	subs	r5, #3
 8005d7c:	b2ed      	uxtb	r5, r5
 8005d7e:	1b76      	subs	r6, r6, r5
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	05da      	lsls	r2, r3, #23
 8005d84:	d530      	bpl.n	8005de8 <_scanf_float+0x368>
 8005d86:	055b      	lsls	r3, r3, #21
 8005d88:	d511      	bpl.n	8005dae <_scanf_float+0x32e>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	429e      	cmp	r6, r3
 8005d8e:	f67f aebb 	bls.w	8005b08 <_scanf_float+0x88>
 8005d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d96:	463a      	mov	r2, r7
 8005d98:	4640      	mov	r0, r8
 8005d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d9e:	4798      	blx	r3
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	e7f0      	b.n	8005d8a <_scanf_float+0x30a>
 8005da8:	46aa      	mov	sl, r5
 8005daa:	46b3      	mov	fp, r6
 8005dac:	e7de      	b.n	8005d6c <_scanf_float+0x2ec>
 8005dae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	2965      	cmp	r1, #101	@ 0x65
 8005db6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dba:	f106 35ff 	add.w	r5, r6, #4294967295
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	d00c      	beq.n	8005ddc <_scanf_float+0x35c>
 8005dc2:	2945      	cmp	r1, #69	@ 0x45
 8005dc4:	d00a      	beq.n	8005ddc <_scanf_float+0x35c>
 8005dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dca:	463a      	mov	r2, r7
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4798      	blx	r3
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	1eb5      	subs	r5, r6, #2
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	463a      	mov	r2, r7
 8005dde:	4640      	mov	r0, r8
 8005de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005de4:	4798      	blx	r3
 8005de6:	462e      	mov	r6, r5
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	f012 0210 	ands.w	r2, r2, #16
 8005dee:	d001      	beq.n	8005df4 <_scanf_float+0x374>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e68a      	b.n	8005b0a <_scanf_float+0x8a>
 8005df4:	7032      	strb	r2, [r6, #0]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e00:	d11c      	bne.n	8005e3c <_scanf_float+0x3bc>
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	454b      	cmp	r3, r9
 8005e06:	eba3 0209 	sub.w	r2, r3, r9
 8005e0a:	d123      	bne.n	8005e54 <_scanf_float+0x3d4>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4640      	mov	r0, r8
 8005e10:	9901      	ldr	r1, [sp, #4]
 8005e12:	f002 fc31 	bl	8008678 <_strtod_r>
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f015 0f02 	tst.w	r5, #2
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	f103 0204 	add.w	r2, r3, #4
 8005e28:	d01f      	beq.n	8005e6a <_scanf_float+0x3ea>
 8005e2a:	9903      	ldr	r1, [sp, #12]
 8005e2c:	600a      	str	r2, [r1, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	e9c3 6700 	strd	r6, r7, [r3]
 8005e34:	68e3      	ldr	r3, [r4, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60e3      	str	r3, [r4, #12]
 8005e3a:	e7d9      	b.n	8005df0 <_scanf_float+0x370>
 8005e3c:	9b04      	ldr	r3, [sp, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0e4      	beq.n	8005e0c <_scanf_float+0x38c>
 8005e42:	9905      	ldr	r1, [sp, #20]
 8005e44:	230a      	movs	r3, #10
 8005e46:	4640      	mov	r0, r8
 8005e48:	3101      	adds	r1, #1
 8005e4a:	f002 fc95 	bl	8008778 <_strtol_r>
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	9e05      	ldr	r6, [sp, #20]
 8005e52:	1ac2      	subs	r2, r0, r3
 8005e54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005e58:	429e      	cmp	r6, r3
 8005e5a:	bf28      	it	cs
 8005e5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005e60:	4630      	mov	r0, r6
 8005e62:	490d      	ldr	r1, [pc, #52]	@ (8005e98 <_scanf_float+0x418>)
 8005e64:	f000 f912 	bl	800608c <siprintf>
 8005e68:	e7d0      	b.n	8005e0c <_scanf_float+0x38c>
 8005e6a:	076d      	lsls	r5, r5, #29
 8005e6c:	d4dd      	bmi.n	8005e2a <_scanf_float+0x3aa>
 8005e6e:	9d03      	ldr	r5, [sp, #12]
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	681d      	ldr	r5, [r3, #0]
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	f7fa fdc8 	bl	8000a0c <__aeabi_dcmpun>
 8005e7c:	b120      	cbz	r0, 8005e88 <_scanf_float+0x408>
 8005e7e:	4807      	ldr	r0, [pc, #28]	@ (8005e9c <_scanf_float+0x41c>)
 8005e80:	f000 fa04 	bl	800628c <nanf>
 8005e84:	6028      	str	r0, [r5, #0]
 8005e86:	e7d5      	b.n	8005e34 <_scanf_float+0x3b4>
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa fe1c 	bl	8000ac8 <__aeabi_d2f>
 8005e90:	e7f8      	b.n	8005e84 <_scanf_float+0x404>
 8005e92:	f04f 0900 	mov.w	r9, #0
 8005e96:	e62d      	b.n	8005af4 <_scanf_float+0x74>
 8005e98:	080099f6 	.word	0x080099f6
 8005e9c:	08009d8d 	.word	0x08009d8d

08005ea0 <std>:
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eae:	6083      	str	r3, [r0, #8]
 8005eb0:	8181      	strh	r1, [r0, #12]
 8005eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005eb4:	81c2      	strh	r2, [r0, #14]
 8005eb6:	6183      	str	r3, [r0, #24]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	2208      	movs	r2, #8
 8005ebc:	305c      	adds	r0, #92	@ 0x5c
 8005ebe:	f000 f948 	bl	8006152 <memset>
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <std+0x58>)
 8005ec4:	6224      	str	r4, [r4, #32]
 8005ec6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8005efc <std+0x5c>)
 8005eca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <std+0x60>)
 8005ece:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f04 <std+0x64>)
 8005ed2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <std+0x68>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d006      	beq.n	8005ee8 <std+0x48>
 8005eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ede:	4294      	cmp	r4, r2
 8005ee0:	d002      	beq.n	8005ee8 <std+0x48>
 8005ee2:	33d0      	adds	r3, #208	@ 0xd0
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	d105      	bne.n	8005ef4 <std+0x54>
 8005ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef0:	f000 b9ac 	b.w	800624c <__retarget_lock_init_recursive>
 8005ef4:	bd10      	pop	{r4, pc}
 8005ef6:	bf00      	nop
 8005ef8:	080060cd 	.word	0x080060cd
 8005efc:	080060ef 	.word	0x080060ef
 8005f00:	08006127 	.word	0x08006127
 8005f04:	0800614b 	.word	0x0800614b
 8005f08:	20000400 	.word	0x20000400

08005f0c <stdio_exit_handler>:
 8005f0c:	4a02      	ldr	r2, [pc, #8]	@ (8005f18 <stdio_exit_handler+0xc>)
 8005f0e:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <stdio_exit_handler+0x10>)
 8005f10:	4803      	ldr	r0, [pc, #12]	@ (8005f20 <stdio_exit_handler+0x14>)
 8005f12:	f000 b869 	b.w	8005fe8 <_fwalk_sglue>
 8005f16:	bf00      	nop
 8005f18:	2000000c 	.word	0x2000000c
 8005f1c:	08008b2d 	.word	0x08008b2d
 8005f20:	2000001c 	.word	0x2000001c

08005f24 <cleanup_stdio>:
 8005f24:	6841      	ldr	r1, [r0, #4]
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <cleanup_stdio+0x34>)
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	d001      	beq.n	8005f34 <cleanup_stdio+0x10>
 8005f30:	f002 fdfc 	bl	8008b2c <_fflush_r>
 8005f34:	68a1      	ldr	r1, [r4, #8]
 8005f36:	4b09      	ldr	r3, [pc, #36]	@ (8005f5c <cleanup_stdio+0x38>)
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <cleanup_stdio+0x1e>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f002 fdf5 	bl	8008b2c <_fflush_r>
 8005f42:	68e1      	ldr	r1, [r4, #12]
 8005f44:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <cleanup_stdio+0x3c>)
 8005f46:	4299      	cmp	r1, r3
 8005f48:	d004      	beq.n	8005f54 <cleanup_stdio+0x30>
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f50:	f002 bdec 	b.w	8008b2c <_fflush_r>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	bf00      	nop
 8005f58:	20000400 	.word	0x20000400
 8005f5c:	20000468 	.word	0x20000468
 8005f60:	200004d0 	.word	0x200004d0

08005f64 <global_stdio_init.part.0>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <global_stdio_init.part.0+0x30>)
 8005f68:	4c0b      	ldr	r4, [pc, #44]	@ (8005f98 <global_stdio_init.part.0+0x34>)
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f9c <global_stdio_init.part.0+0x38>)
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	2104      	movs	r1, #4
 8005f72:	2200      	movs	r2, #0
 8005f74:	f7ff ff94 	bl	8005ea0 <std>
 8005f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2109      	movs	r1, #9
 8005f80:	f7ff ff8e 	bl	8005ea0 <std>
 8005f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f88:	2202      	movs	r2, #2
 8005f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f8e:	2112      	movs	r1, #18
 8005f90:	f7ff bf86 	b.w	8005ea0 <std>
 8005f94:	20000538 	.word	0x20000538
 8005f98:	20000400 	.word	0x20000400
 8005f9c:	08005f0d 	.word	0x08005f0d

08005fa0 <__sfp_lock_acquire>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	@ (8005fa8 <__sfp_lock_acquire+0x8>)
 8005fa2:	f000 b954 	b.w	800624e <__retarget_lock_acquire_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000541 	.word	0x20000541

08005fac <__sfp_lock_release>:
 8005fac:	4801      	ldr	r0, [pc, #4]	@ (8005fb4 <__sfp_lock_release+0x8>)
 8005fae:	f000 b94f 	b.w	8006250 <__retarget_lock_release_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	20000541 	.word	0x20000541

08005fb8 <__sinit>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	f7ff fff0 	bl	8005fa0 <__sfp_lock_acquire>
 8005fc0:	6a23      	ldr	r3, [r4, #32]
 8005fc2:	b11b      	cbz	r3, 8005fcc <__sinit+0x14>
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	f7ff bff0 	b.w	8005fac <__sfp_lock_release>
 8005fcc:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <__sinit+0x28>)
 8005fce:	6223      	str	r3, [r4, #32]
 8005fd0:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <__sinit+0x2c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f5      	bne.n	8005fc4 <__sinit+0xc>
 8005fd8:	f7ff ffc4 	bl	8005f64 <global_stdio_init.part.0>
 8005fdc:	e7f2      	b.n	8005fc4 <__sinit+0xc>
 8005fde:	bf00      	nop
 8005fe0:	08005f25 	.word	0x08005f25
 8005fe4:	20000538 	.word	0x20000538

08005fe8 <_fwalk_sglue>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	4607      	mov	r7, r0
 8005fee:	4688      	mov	r8, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8005ffc:	d505      	bpl.n	800600a <_fwalk_sglue+0x22>
 8005ffe:	6824      	ldr	r4, [r4, #0]
 8006000:	2c00      	cmp	r4, #0
 8006002:	d1f7      	bne.n	8005ff4 <_fwalk_sglue+0xc>
 8006004:	4630      	mov	r0, r6
 8006006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600a:	89ab      	ldrh	r3, [r5, #12]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d907      	bls.n	8006020 <_fwalk_sglue+0x38>
 8006010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006014:	3301      	adds	r3, #1
 8006016:	d003      	beq.n	8006020 <_fwalk_sglue+0x38>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	47c0      	blx	r8
 800601e:	4306      	orrs	r6, r0
 8006020:	3568      	adds	r5, #104	@ 0x68
 8006022:	e7e9      	b.n	8005ff8 <_fwalk_sglue+0x10>

08006024 <sniprintf>:
 8006024:	b40c      	push	{r2, r3}
 8006026:	b530      	push	{r4, r5, lr}
 8006028:	4b17      	ldr	r3, [pc, #92]	@ (8006088 <sniprintf+0x64>)
 800602a:	1e0c      	subs	r4, r1, #0
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	b09d      	sub	sp, #116	@ 0x74
 8006030:	da08      	bge.n	8006044 <sniprintf+0x20>
 8006032:	238b      	movs	r3, #139	@ 0x8b
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	b01d      	add	sp, #116	@ 0x74
 800603c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006040:	b002      	add	sp, #8
 8006042:	4770      	bx	lr
 8006044:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800604c:	bf0c      	ite	eq
 800604e:	4623      	moveq	r3, r4
 8006050:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006054:	9304      	str	r3, [sp, #16]
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006064:	4628      	mov	r0, r5
 8006066:	ab21      	add	r3, sp, #132	@ 0x84
 8006068:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800606a:	a902      	add	r1, sp, #8
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	f002 fbe1 	bl	8008834 <_svfiprintf_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	bfbc      	itt	lt
 8006076:	238b      	movlt	r3, #139	@ 0x8b
 8006078:	602b      	strlt	r3, [r5, #0]
 800607a:	2c00      	cmp	r4, #0
 800607c:	d0dd      	beq.n	800603a <sniprintf+0x16>
 800607e:	2200      	movs	r2, #0
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e7d9      	b.n	800603a <sniprintf+0x16>
 8006086:	bf00      	nop
 8006088:	20000018 	.word	0x20000018

0800608c <siprintf>:
 800608c:	b40e      	push	{r1, r2, r3}
 800608e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006092:	b500      	push	{lr}
 8006094:	b09c      	sub	sp, #112	@ 0x70
 8006096:	ab1d      	add	r3, sp, #116	@ 0x74
 8006098:	9002      	str	r0, [sp, #8]
 800609a:	9006      	str	r0, [sp, #24]
 800609c:	9107      	str	r1, [sp, #28]
 800609e:	9104      	str	r1, [sp, #16]
 80060a0:	4808      	ldr	r0, [pc, #32]	@ (80060c4 <siprintf+0x38>)
 80060a2:	4909      	ldr	r1, [pc, #36]	@ (80060c8 <siprintf+0x3c>)
 80060a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a8:	9105      	str	r1, [sp, #20]
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	a902      	add	r1, sp, #8
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	f002 fbc0 	bl	8008834 <_svfiprintf_r>
 80060b4:	2200      	movs	r2, #0
 80060b6:	9b02      	ldr	r3, [sp, #8]
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	b01c      	add	sp, #112	@ 0x70
 80060bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c0:	b003      	add	sp, #12
 80060c2:	4770      	bx	lr
 80060c4:	20000018 	.word	0x20000018
 80060c8:	ffff0208 	.word	0xffff0208

080060cc <__sread>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	460c      	mov	r4, r1
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	f000 f86c 	bl	80061b0 <_read_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	bfab      	itete	ge
 80060dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060de:	89a3      	ldrhlt	r3, [r4, #12]
 80060e0:	181b      	addge	r3, r3, r0
 80060e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060e6:	bfac      	ite	ge
 80060e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060ea:	81a3      	strhlt	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__swrite>:
 80060ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	461f      	mov	r7, r3
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	4605      	mov	r5, r0
 80060f8:	05db      	lsls	r3, r3, #23
 80060fa:	460c      	mov	r4, r1
 80060fc:	4616      	mov	r6, r2
 80060fe:	d505      	bpl.n	800610c <__swrite+0x1e>
 8006100:	2302      	movs	r3, #2
 8006102:	2200      	movs	r2, #0
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	f000 f840 	bl	800618c <_lseek_r>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	4632      	mov	r2, r6
 8006110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	4628      	mov	r0, r5
 8006118:	463b      	mov	r3, r7
 800611a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	f000 b857 	b.w	80061d4 <_write_r>

08006126 <__sseek>:
 8006126:	b510      	push	{r4, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 f82d 	bl	800618c <_lseek_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	bf15      	itete	ne
 8006138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800613a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800613e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006142:	81a3      	strheq	r3, [r4, #12]
 8006144:	bf18      	it	ne
 8006146:	81a3      	strhne	r3, [r4, #12]
 8006148:	bd10      	pop	{r4, pc}

0800614a <__sclose>:
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 b80d 	b.w	800616c <_close_r>

08006152 <memset>:
 8006152:	4603      	mov	r3, r0
 8006154:	4402      	add	r2, r0
 8006156:	4293      	cmp	r3, r2
 8006158:	d100      	bne.n	800615c <memset+0xa>
 800615a:	4770      	bx	lr
 800615c:	f803 1b01 	strb.w	r1, [r3], #1
 8006160:	e7f9      	b.n	8006156 <memset+0x4>
	...

08006164 <_localeconv_r>:
 8006164:	4800      	ldr	r0, [pc, #0]	@ (8006168 <_localeconv_r+0x4>)
 8006166:	4770      	bx	lr
 8006168:	20000158 	.word	0x20000158

0800616c <_close_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	2300      	movs	r3, #0
 8006170:	4d05      	ldr	r5, [pc, #20]	@ (8006188 <_close_r+0x1c>)
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fb fdec 	bl	8001d54 <_close>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_close_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_close_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	2000053c 	.word	0x2000053c

0800618c <_lseek_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	2200      	movs	r2, #0
 8006196:	4d05      	ldr	r5, [pc, #20]	@ (80061ac <_lseek_r+0x20>)
 8006198:	602a      	str	r2, [r5, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f7fb fdfe 	bl	8001d9c <_lseek>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_lseek_r+0x1e>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_lseek_r+0x1e>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	2000053c 	.word	0x2000053c

080061b0 <_read_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	2200      	movs	r2, #0
 80061ba:	4d05      	ldr	r5, [pc, #20]	@ (80061d0 <_read_r+0x20>)
 80061bc:	602a      	str	r2, [r5, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	f7fb fd8f 	bl	8001ce2 <_read>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_read_r+0x1e>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_read_r+0x1e>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	2000053c 	.word	0x2000053c

080061d4 <_write_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	2200      	movs	r2, #0
 80061de:	4d05      	ldr	r5, [pc, #20]	@ (80061f4 <_write_r+0x20>)
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fb fd9a 	bl	8001d1c <_write>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_write_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_write_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	2000053c 	.word	0x2000053c

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	@ (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000018 	.word	0x20000018

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	2600      	movs	r6, #0
 8006208:	4d0c      	ldr	r5, [pc, #48]	@ (800623c <__libc_init_array+0x38>)
 800620a:	4c0d      	ldr	r4, [pc, #52]	@ (8006240 <__libc_init_array+0x3c>)
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	f003 fb68 	bl	80098e8 <_init>
 8006218:	2600      	movs	r6, #0
 800621a:	4d0a      	ldr	r5, [pc, #40]	@ (8006244 <__libc_init_array+0x40>)
 800621c:	4c0a      	ldr	r4, [pc, #40]	@ (8006248 <__libc_init_array+0x44>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08009df8 	.word	0x08009df8
 8006240:	08009df8 	.word	0x08009df8
 8006244:	08009df8 	.word	0x08009df8
 8006248:	08009dfc 	.word	0x08009dfc

0800624c <__retarget_lock_init_recursive>:
 800624c:	4770      	bx	lr

0800624e <__retarget_lock_acquire_recursive>:
 800624e:	4770      	bx	lr

08006250 <__retarget_lock_release_recursive>:
 8006250:	4770      	bx	lr

08006252 <memchr>:
 8006252:	4603      	mov	r3, r0
 8006254:	b510      	push	{r4, lr}
 8006256:	b2c9      	uxtb	r1, r1
 8006258:	4402      	add	r2, r0
 800625a:	4293      	cmp	r3, r2
 800625c:	4618      	mov	r0, r3
 800625e:	d101      	bne.n	8006264 <memchr+0x12>
 8006260:	2000      	movs	r0, #0
 8006262:	e003      	b.n	800626c <memchr+0x1a>
 8006264:	7804      	ldrb	r4, [r0, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	428c      	cmp	r4, r1
 800626a:	d1f6      	bne.n	800625a <memchr+0x8>
 800626c:	bd10      	pop	{r4, pc}

0800626e <memcpy>:
 800626e:	440a      	add	r2, r1
 8006270:	4291      	cmp	r1, r2
 8006272:	f100 33ff 	add.w	r3, r0, #4294967295
 8006276:	d100      	bne.n	800627a <memcpy+0xc>
 8006278:	4770      	bx	lr
 800627a:	b510      	push	{r4, lr}
 800627c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006280:	4291      	cmp	r1, r2
 8006282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006286:	d1f9      	bne.n	800627c <memcpy+0xe>
 8006288:	bd10      	pop	{r4, pc}
	...

0800628c <nanf>:
 800628c:	4800      	ldr	r0, [pc, #0]	@ (8006290 <nanf+0x4>)
 800628e:	4770      	bx	lr
 8006290:	7fc00000 	.word	0x7fc00000

08006294 <quorem>:
 8006294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	6903      	ldr	r3, [r0, #16]
 800629a:	690c      	ldr	r4, [r1, #16]
 800629c:	4607      	mov	r7, r0
 800629e:	42a3      	cmp	r3, r4
 80062a0:	db7e      	blt.n	80063a0 <quorem+0x10c>
 80062a2:	3c01      	subs	r4, #1
 80062a4:	00a3      	lsls	r3, r4, #2
 80062a6:	f100 0514 	add.w	r5, r0, #20
 80062aa:	f101 0814 	add.w	r8, r1, #20
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062be:	3301      	adds	r3, #1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80062c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062ca:	d32e      	bcc.n	800632a <quorem+0x96>
 80062cc:	f04f 0a00 	mov.w	sl, #0
 80062d0:	46c4      	mov	ip, r8
 80062d2:	46ae      	mov	lr, r5
 80062d4:	46d3      	mov	fp, sl
 80062d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062da:	b298      	uxth	r0, r3
 80062dc:	fb06 a000 	mla	r0, r6, r0, sl
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	0c02      	lsrs	r2, r0, #16
 80062e4:	fb06 2303 	mla	r3, r6, r3, r2
 80062e8:	f8de 2000 	ldr.w	r2, [lr]
 80062ec:	b280      	uxth	r0, r0
 80062ee:	b292      	uxth	r2, r2
 80062f0:	1a12      	subs	r2, r2, r0
 80062f2:	445a      	add	r2, fp
 80062f4:	f8de 0000 	ldr.w	r0, [lr]
 80062f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006302:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006306:	b292      	uxth	r2, r2
 8006308:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800630c:	45e1      	cmp	r9, ip
 800630e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006312:	f84e 2b04 	str.w	r2, [lr], #4
 8006316:	d2de      	bcs.n	80062d6 <quorem+0x42>
 8006318:	9b00      	ldr	r3, [sp, #0]
 800631a:	58eb      	ldr	r3, [r5, r3]
 800631c:	b92b      	cbnz	r3, 800632a <quorem+0x96>
 800631e:	9b01      	ldr	r3, [sp, #4]
 8006320:	3b04      	subs	r3, #4
 8006322:	429d      	cmp	r5, r3
 8006324:	461a      	mov	r2, r3
 8006326:	d32f      	bcc.n	8006388 <quorem+0xf4>
 8006328:	613c      	str	r4, [r7, #16]
 800632a:	4638      	mov	r0, r7
 800632c:	f001 f9c4 	bl	80076b8 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	db25      	blt.n	8006380 <quorem+0xec>
 8006334:	4629      	mov	r1, r5
 8006336:	2000      	movs	r0, #0
 8006338:	f858 2b04 	ldr.w	r2, [r8], #4
 800633c:	f8d1 c000 	ldr.w	ip, [r1]
 8006340:	fa1f fe82 	uxth.w	lr, r2
 8006344:	fa1f f38c 	uxth.w	r3, ip
 8006348:	eba3 030e 	sub.w	r3, r3, lr
 800634c:	4403      	add	r3, r0
 800634e:	0c12      	lsrs	r2, r2, #16
 8006350:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006354:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006358:	b29b      	uxth	r3, r3
 800635a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635e:	45c1      	cmp	r9, r8
 8006360:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006364:	f841 3b04 	str.w	r3, [r1], #4
 8006368:	d2e6      	bcs.n	8006338 <quorem+0xa4>
 800636a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800636e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006372:	b922      	cbnz	r2, 800637e <quorem+0xea>
 8006374:	3b04      	subs	r3, #4
 8006376:	429d      	cmp	r5, r3
 8006378:	461a      	mov	r2, r3
 800637a:	d30b      	bcc.n	8006394 <quorem+0x100>
 800637c:	613c      	str	r4, [r7, #16]
 800637e:	3601      	adds	r6, #1
 8006380:	4630      	mov	r0, r6
 8006382:	b003      	add	sp, #12
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	3b04      	subs	r3, #4
 800638c:	2a00      	cmp	r2, #0
 800638e:	d1cb      	bne.n	8006328 <quorem+0x94>
 8006390:	3c01      	subs	r4, #1
 8006392:	e7c6      	b.n	8006322 <quorem+0x8e>
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	3b04      	subs	r3, #4
 8006398:	2a00      	cmp	r2, #0
 800639a:	d1ef      	bne.n	800637c <quorem+0xe8>
 800639c:	3c01      	subs	r4, #1
 800639e:	e7ea      	b.n	8006376 <quorem+0xe2>
 80063a0:	2000      	movs	r0, #0
 80063a2:	e7ee      	b.n	8006382 <quorem+0xee>
 80063a4:	0000      	movs	r0, r0
	...

080063a8 <_dtoa_r>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	4614      	mov	r4, r2
 80063ae:	461d      	mov	r5, r3
 80063b0:	69c7      	ldr	r7, [r0, #28]
 80063b2:	b097      	sub	sp, #92	@ 0x5c
 80063b4:	4683      	mov	fp, r0
 80063b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80063bc:	b97f      	cbnz	r7, 80063de <_dtoa_r+0x36>
 80063be:	2010      	movs	r0, #16
 80063c0:	f000 fe02 	bl	8006fc8 <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80063ca:	b920      	cbnz	r0, 80063d6 <_dtoa_r+0x2e>
 80063cc:	21ef      	movs	r1, #239	@ 0xef
 80063ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006670 <_dtoa_r+0x2c8>)
 80063d0:	48a8      	ldr	r0, [pc, #672]	@ (8006674 <_dtoa_r+0x2cc>)
 80063d2:	f002 fc15 	bl	8008c00 <__assert_func>
 80063d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063da:	6007      	str	r7, [r0, #0]
 80063dc:	60c7      	str	r7, [r0, #12]
 80063de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	b159      	cbz	r1, 80063fe <_dtoa_r+0x56>
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	2301      	movs	r3, #1
 80063ea:	4093      	lsls	r3, r2
 80063ec:	604a      	str	r2, [r1, #4]
 80063ee:	608b      	str	r3, [r1, #8]
 80063f0:	4658      	mov	r0, fp
 80063f2:	f000 fedf 	bl	80071b4 <_Bfree>
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	1e2b      	subs	r3, r5, #0
 8006400:	bfaf      	iteee	ge
 8006402:	2300      	movge	r3, #0
 8006404:	2201      	movlt	r2, #1
 8006406:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800640a:	9303      	strlt	r3, [sp, #12]
 800640c:	bfa8      	it	ge
 800640e:	6033      	strge	r3, [r6, #0]
 8006410:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006414:	4b98      	ldr	r3, [pc, #608]	@ (8006678 <_dtoa_r+0x2d0>)
 8006416:	bfb8      	it	lt
 8006418:	6032      	strlt	r2, [r6, #0]
 800641a:	ea33 0308 	bics.w	r3, r3, r8
 800641e:	d112      	bne.n	8006446 <_dtoa_r+0x9e>
 8006420:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006424:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800642c:	4323      	orrs	r3, r4
 800642e:	f000 8550 	beq.w	8006ed2 <_dtoa_r+0xb2a>
 8006432:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006434:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800667c <_dtoa_r+0x2d4>
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8552 	beq.w	8006ee2 <_dtoa_r+0xb3a>
 800643e:	f10a 0303 	add.w	r3, sl, #3
 8006442:	f000 bd4c 	b.w	8006ede <_dtoa_r+0xb36>
 8006446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800644a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800644e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	2300      	movs	r3, #0
 8006456:	f7fa faa7 	bl	80009a8 <__aeabi_dcmpeq>
 800645a:	4607      	mov	r7, r0
 800645c:	b158      	cbz	r0, 8006476 <_dtoa_r+0xce>
 800645e:	2301      	movs	r3, #1
 8006460:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006466:	b113      	cbz	r3, 800646e <_dtoa_r+0xc6>
 8006468:	4b85      	ldr	r3, [pc, #532]	@ (8006680 <_dtoa_r+0x2d8>)
 800646a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006684 <_dtoa_r+0x2dc>
 8006472:	f000 bd36 	b.w	8006ee2 <_dtoa_r+0xb3a>
 8006476:	ab14      	add	r3, sp, #80	@ 0x50
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	ab15      	add	r3, sp, #84	@ 0x54
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4658      	mov	r0, fp
 8006480:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006484:	f001 fa30 	bl	80078e8 <__d2b>
 8006488:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800648c:	4681      	mov	r9, r0
 800648e:	2e00      	cmp	r6, #0
 8006490:	d077      	beq.n	8006582 <_dtoa_r+0x1da>
 8006492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006498:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800649c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80064aa:	4619      	mov	r1, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	4b76      	ldr	r3, [pc, #472]	@ (8006688 <_dtoa_r+0x2e0>)
 80064b0:	f7f9 fe5a 	bl	8000168 <__aeabi_dsub>
 80064b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006658 <_dtoa_r+0x2b0>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7fa f80d 	bl	80004d8 <__aeabi_dmul>
 80064be:	a368      	add	r3, pc, #416	@ (adr r3, 8006660 <_dtoa_r+0x2b8>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7f9 fe52 	bl	800016c <__adddf3>
 80064c8:	4604      	mov	r4, r0
 80064ca:	4630      	mov	r0, r6
 80064cc:	460d      	mov	r5, r1
 80064ce:	f7f9 ff99 	bl	8000404 <__aeabi_i2d>
 80064d2:	a365      	add	r3, pc, #404	@ (adr r3, 8006668 <_dtoa_r+0x2c0>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fffe 	bl	80004d8 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 fe42 	bl	800016c <__adddf3>
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	f7fa faa4 	bl	8000a38 <__aeabi_d2iz>
 80064f0:	2200      	movs	r2, #0
 80064f2:	4607      	mov	r7, r0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa fa5f 	bl	80009bc <__aeabi_dcmplt>
 80064fe:	b140      	cbz	r0, 8006512 <_dtoa_r+0x16a>
 8006500:	4638      	mov	r0, r7
 8006502:	f7f9 ff7f 	bl	8000404 <__aeabi_i2d>
 8006506:	4622      	mov	r2, r4
 8006508:	462b      	mov	r3, r5
 800650a:	f7fa fa4d 	bl	80009a8 <__aeabi_dcmpeq>
 800650e:	b900      	cbnz	r0, 8006512 <_dtoa_r+0x16a>
 8006510:	3f01      	subs	r7, #1
 8006512:	2f16      	cmp	r7, #22
 8006514:	d853      	bhi.n	80065be <_dtoa_r+0x216>
 8006516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800651a:	4b5c      	ldr	r3, [pc, #368]	@ (800668c <_dtoa_r+0x2e4>)
 800651c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa fa4a 	bl	80009bc <__aeabi_dcmplt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d04a      	beq.n	80065c2 <_dtoa_r+0x21a>
 800652c:	2300      	movs	r3, #0
 800652e:	3f01      	subs	r7, #1
 8006530:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006532:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006534:	1b9b      	subs	r3, r3, r6
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	bf46      	itte	mi
 800653a:	f1c3 0801 	rsbmi	r8, r3, #1
 800653e:	2300      	movmi	r3, #0
 8006540:	f04f 0800 	movpl.w	r8, #0
 8006544:	9209      	str	r2, [sp, #36]	@ 0x24
 8006546:	bf48      	it	mi
 8006548:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800654a:	2f00      	cmp	r7, #0
 800654c:	db3b      	blt.n	80065c6 <_dtoa_r+0x21e>
 800654e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006550:	970e      	str	r7, [sp, #56]	@ 0x38
 8006552:	443b      	add	r3, r7
 8006554:	9309      	str	r3, [sp, #36]	@ 0x24
 8006556:	2300      	movs	r3, #0
 8006558:	930a      	str	r3, [sp, #40]	@ 0x28
 800655a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800655c:	2b09      	cmp	r3, #9
 800655e:	d866      	bhi.n	800662e <_dtoa_r+0x286>
 8006560:	2b05      	cmp	r3, #5
 8006562:	bfc4      	itt	gt
 8006564:	3b04      	subgt	r3, #4
 8006566:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006568:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800656a:	bfc8      	it	gt
 800656c:	2400      	movgt	r4, #0
 800656e:	f1a3 0302 	sub.w	r3, r3, #2
 8006572:	bfd8      	it	le
 8006574:	2401      	movle	r4, #1
 8006576:	2b03      	cmp	r3, #3
 8006578:	d864      	bhi.n	8006644 <_dtoa_r+0x29c>
 800657a:	e8df f003 	tbb	[pc, r3]
 800657e:	382b      	.short	0x382b
 8006580:	5636      	.short	0x5636
 8006582:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006586:	441e      	add	r6, r3
 8006588:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800658c:	2b20      	cmp	r3, #32
 800658e:	bfc1      	itttt	gt
 8006590:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006594:	fa08 f803 	lslgt.w	r8, r8, r3
 8006598:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800659c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065a0:	bfd6      	itet	le
 80065a2:	f1c3 0320 	rsble	r3, r3, #32
 80065a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80065aa:	fa04 f003 	lslle.w	r0, r4, r3
 80065ae:	f7f9 ff19 	bl	80003e4 <__aeabi_ui2d>
 80065b2:	2201      	movs	r2, #1
 80065b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065b8:	3e01      	subs	r6, #1
 80065ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80065bc:	e775      	b.n	80064aa <_dtoa_r+0x102>
 80065be:	2301      	movs	r3, #1
 80065c0:	e7b6      	b.n	8006530 <_dtoa_r+0x188>
 80065c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80065c4:	e7b5      	b.n	8006532 <_dtoa_r+0x18a>
 80065c6:	427b      	negs	r3, r7
 80065c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ca:	2300      	movs	r3, #0
 80065cc:	eba8 0807 	sub.w	r8, r8, r7
 80065d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80065d2:	e7c2      	b.n	800655a <_dtoa_r+0x1b2>
 80065d4:	2300      	movs	r3, #0
 80065d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc35      	bgt.n	800664a <_dtoa_r+0x2a2>
 80065de:	2301      	movs	r3, #1
 80065e0:	461a      	mov	r2, r3
 80065e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80065e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80065e8:	e00b      	b.n	8006602 <_dtoa_r+0x25a>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e7f3      	b.n	80065d6 <_dtoa_r+0x22e>
 80065ee:	2300      	movs	r3, #0
 80065f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	9308      	str	r3, [sp, #32]
 80065f8:	3301      	adds	r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	9307      	str	r3, [sp, #28]
 80065fe:	bfb8      	it	lt
 8006600:	2301      	movlt	r3, #1
 8006602:	2100      	movs	r1, #0
 8006604:	2204      	movs	r2, #4
 8006606:	f8db 001c 	ldr.w	r0, [fp, #28]
 800660a:	f102 0514 	add.w	r5, r2, #20
 800660e:	429d      	cmp	r5, r3
 8006610:	d91f      	bls.n	8006652 <_dtoa_r+0x2aa>
 8006612:	6041      	str	r1, [r0, #4]
 8006614:	4658      	mov	r0, fp
 8006616:	f000 fd8d 	bl	8007134 <_Balloc>
 800661a:	4682      	mov	sl, r0
 800661c:	2800      	cmp	r0, #0
 800661e:	d139      	bne.n	8006694 <_dtoa_r+0x2ec>
 8006620:	4602      	mov	r2, r0
 8006622:	f240 11af 	movw	r1, #431	@ 0x1af
 8006626:	4b1a      	ldr	r3, [pc, #104]	@ (8006690 <_dtoa_r+0x2e8>)
 8006628:	e6d2      	b.n	80063d0 <_dtoa_r+0x28>
 800662a:	2301      	movs	r3, #1
 800662c:	e7e0      	b.n	80065f0 <_dtoa_r+0x248>
 800662e:	2401      	movs	r4, #1
 8006630:	2300      	movs	r3, #0
 8006632:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006634:	9320      	str	r3, [sp, #128]	@ 0x80
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	2200      	movs	r2, #0
 800663c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006640:	2312      	movs	r3, #18
 8006642:	e7d0      	b.n	80065e6 <_dtoa_r+0x23e>
 8006644:	2301      	movs	r3, #1
 8006646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006648:	e7f5      	b.n	8006636 <_dtoa_r+0x28e>
 800664a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800664c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006650:	e7d7      	b.n	8006602 <_dtoa_r+0x25a>
 8006652:	3101      	adds	r1, #1
 8006654:	0052      	lsls	r2, r2, #1
 8006656:	e7d8      	b.n	800660a <_dtoa_r+0x262>
 8006658:	636f4361 	.word	0x636f4361
 800665c:	3fd287a7 	.word	0x3fd287a7
 8006660:	8b60c8b3 	.word	0x8b60c8b3
 8006664:	3fc68a28 	.word	0x3fc68a28
 8006668:	509f79fb 	.word	0x509f79fb
 800666c:	3fd34413 	.word	0x3fd34413
 8006670:	08009a08 	.word	0x08009a08
 8006674:	08009a1f 	.word	0x08009a1f
 8006678:	7ff00000 	.word	0x7ff00000
 800667c:	08009a04 	.word	0x08009a04
 8006680:	080099d3 	.word	0x080099d3
 8006684:	080099d2 	.word	0x080099d2
 8006688:	3ff80000 	.word	0x3ff80000
 800668c:	08009b18 	.word	0x08009b18
 8006690:	08009a77 	.word	0x08009a77
 8006694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	2b0e      	cmp	r3, #14
 800669e:	f200 80a4 	bhi.w	80067ea <_dtoa_r+0x442>
 80066a2:	2c00      	cmp	r4, #0
 80066a4:	f000 80a1 	beq.w	80067ea <_dtoa_r+0x442>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	dd33      	ble.n	8006714 <_dtoa_r+0x36c>
 80066ac:	4b86      	ldr	r3, [pc, #536]	@ (80068c8 <_dtoa_r+0x520>)
 80066ae:	f007 020f 	and.w	r2, r7, #15
 80066b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b6:	05f8      	lsls	r0, r7, #23
 80066b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066c4:	d516      	bpl.n	80066f4 <_dtoa_r+0x34c>
 80066c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ca:	4b80      	ldr	r3, [pc, #512]	@ (80068cc <_dtoa_r+0x524>)
 80066cc:	2603      	movs	r6, #3
 80066ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d2:	f7fa f82b 	bl	800072c <__aeabi_ddiv>
 80066d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066da:	f004 040f 	and.w	r4, r4, #15
 80066de:	4d7b      	ldr	r5, [pc, #492]	@ (80068cc <_dtoa_r+0x524>)
 80066e0:	b954      	cbnz	r4, 80066f8 <_dtoa_r+0x350>
 80066e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	f7fa f81f 	bl	800072c <__aeabi_ddiv>
 80066ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f2:	e028      	b.n	8006746 <_dtoa_r+0x39e>
 80066f4:	2602      	movs	r6, #2
 80066f6:	e7f2      	b.n	80066de <_dtoa_r+0x336>
 80066f8:	07e1      	lsls	r1, r4, #31
 80066fa:	d508      	bpl.n	800670e <_dtoa_r+0x366>
 80066fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006704:	f7f9 fee8 	bl	80004d8 <__aeabi_dmul>
 8006708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670c:	3601      	adds	r6, #1
 800670e:	1064      	asrs	r4, r4, #1
 8006710:	3508      	adds	r5, #8
 8006712:	e7e5      	b.n	80066e0 <_dtoa_r+0x338>
 8006714:	f000 80d2 	beq.w	80068bc <_dtoa_r+0x514>
 8006718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800671c:	427c      	negs	r4, r7
 800671e:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <_dtoa_r+0x520>)
 8006720:	f004 020f 	and.w	r2, r4, #15
 8006724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fed4 	bl	80004d8 <__aeabi_dmul>
 8006730:	2602      	movs	r6, #2
 8006732:	2300      	movs	r3, #0
 8006734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006738:	4d64      	ldr	r5, [pc, #400]	@ (80068cc <_dtoa_r+0x524>)
 800673a:	1124      	asrs	r4, r4, #4
 800673c:	2c00      	cmp	r4, #0
 800673e:	f040 80b2 	bne.w	80068a6 <_dtoa_r+0x4fe>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d3      	bne.n	80066ee <_dtoa_r+0x346>
 8006746:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800674a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80b7 	beq.w	80068c0 <_dtoa_r+0x518>
 8006752:	2200      	movs	r2, #0
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	4b5d      	ldr	r3, [pc, #372]	@ (80068d0 <_dtoa_r+0x528>)
 800675a:	f7fa f92f 	bl	80009bc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	f000 80ae 	beq.w	80068c0 <_dtoa_r+0x518>
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80aa 	beq.w	80068c0 <_dtoa_r+0x518>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd37      	ble.n	80067e2 <_dtoa_r+0x43a>
 8006772:	1e7b      	subs	r3, r7, #1
 8006774:	4620      	mov	r0, r4
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	2200      	movs	r2, #0
 800677a:	4629      	mov	r1, r5
 800677c:	4b55      	ldr	r3, [pc, #340]	@ (80068d4 <_dtoa_r+0x52c>)
 800677e:	f7f9 feab 	bl	80004d8 <__aeabi_dmul>
 8006782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006786:	9c08      	ldr	r4, [sp, #32]
 8006788:	3601      	adds	r6, #1
 800678a:	4630      	mov	r0, r6
 800678c:	f7f9 fe3a 	bl	8000404 <__aeabi_i2d>
 8006790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <_dtoa_r+0x530>)
 800679c:	f7f9 fce6 	bl	800016c <__adddf3>
 80067a0:	4605      	mov	r5, r0
 80067a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	f040 809a 	bne.w	80068e0 <_dtoa_r+0x538>
 80067ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	4b4a      	ldr	r3, [pc, #296]	@ (80068dc <_dtoa_r+0x534>)
 80067b4:	f7f9 fcd8 	bl	8000168 <__aeabi_dsub>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4633      	mov	r3, r6
 80067c4:	f7fa f918 	bl	80009f8 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f040 828e 	bne.w	8006cea <_dtoa_r+0x942>
 80067ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d2:	462a      	mov	r2, r5
 80067d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067d8:	f7fa f8f0 	bl	80009bc <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 8127 	bne.w	8006a30 <_dtoa_r+0x688>
 80067e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f2c0 8163 	blt.w	8006ab8 <_dtoa_r+0x710>
 80067f2:	2f0e      	cmp	r7, #14
 80067f4:	f300 8160 	bgt.w	8006ab8 <_dtoa_r+0x710>
 80067f8:	4b33      	ldr	r3, [pc, #204]	@ (80068c8 <_dtoa_r+0x520>)
 80067fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006802:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006806:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006808:	2b00      	cmp	r3, #0
 800680a:	da03      	bge.n	8006814 <_dtoa_r+0x46c>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f340 8100 	ble.w	8006a14 <_dtoa_r+0x66c>
 8006814:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006818:	4656      	mov	r6, sl
 800681a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 ff83 	bl	800072c <__aeabi_ddiv>
 8006826:	f7fa f907 	bl	8000a38 <__aeabi_d2iz>
 800682a:	4680      	mov	r8, r0
 800682c:	f7f9 fdea 	bl	8000404 <__aeabi_i2d>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	f7f9 fe50 	bl	80004d8 <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7f9 fc92 	bl	8000168 <__aeabi_dsub>
 8006844:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006848:	9d07      	ldr	r5, [sp, #28]
 800684a:	f806 4b01 	strb.w	r4, [r6], #1
 800684e:	eba6 040a 	sub.w	r4, r6, sl
 8006852:	42a5      	cmp	r5, r4
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	f040 8116 	bne.w	8006a88 <_dtoa_r+0x6e0>
 800685c:	f7f9 fc86 	bl	800016c <__adddf3>
 8006860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006864:	4604      	mov	r4, r0
 8006866:	460d      	mov	r5, r1
 8006868:	f7fa f8c6 	bl	80009f8 <__aeabi_dcmpgt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f040 80f8 	bne.w	8006a62 <_dtoa_r+0x6ba>
 8006872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006876:	4620      	mov	r0, r4
 8006878:	4629      	mov	r1, r5
 800687a:	f7fa f895 	bl	80009a8 <__aeabi_dcmpeq>
 800687e:	b118      	cbz	r0, 8006888 <_dtoa_r+0x4e0>
 8006880:	f018 0f01 	tst.w	r8, #1
 8006884:	f040 80ed 	bne.w	8006a62 <_dtoa_r+0x6ba>
 8006888:	4649      	mov	r1, r9
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fc92 	bl	80071b4 <_Bfree>
 8006890:	2300      	movs	r3, #0
 8006892:	7033      	strb	r3, [r6, #0]
 8006894:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006896:	3701      	adds	r7, #1
 8006898:	601f      	str	r7, [r3, #0]
 800689a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8320 	beq.w	8006ee2 <_dtoa_r+0xb3a>
 80068a2:	601e      	str	r6, [r3, #0]
 80068a4:	e31d      	b.n	8006ee2 <_dtoa_r+0xb3a>
 80068a6:	07e2      	lsls	r2, r4, #31
 80068a8:	d505      	bpl.n	80068b6 <_dtoa_r+0x50e>
 80068aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068ae:	f7f9 fe13 	bl	80004d8 <__aeabi_dmul>
 80068b2:	2301      	movs	r3, #1
 80068b4:	3601      	adds	r6, #1
 80068b6:	1064      	asrs	r4, r4, #1
 80068b8:	3508      	adds	r5, #8
 80068ba:	e73f      	b.n	800673c <_dtoa_r+0x394>
 80068bc:	2602      	movs	r6, #2
 80068be:	e742      	b.n	8006746 <_dtoa_r+0x39e>
 80068c0:	9c07      	ldr	r4, [sp, #28]
 80068c2:	9704      	str	r7, [sp, #16]
 80068c4:	e761      	b.n	800678a <_dtoa_r+0x3e2>
 80068c6:	bf00      	nop
 80068c8:	08009b18 	.word	0x08009b18
 80068cc:	08009af0 	.word	0x08009af0
 80068d0:	3ff00000 	.word	0x3ff00000
 80068d4:	40240000 	.word	0x40240000
 80068d8:	401c0000 	.word	0x401c0000
 80068dc:	40140000 	.word	0x40140000
 80068e0:	4b70      	ldr	r3, [pc, #448]	@ (8006aa4 <_dtoa_r+0x6fc>)
 80068e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068ec:	4454      	add	r4, sl
 80068ee:	2900      	cmp	r1, #0
 80068f0:	d045      	beq.n	800697e <_dtoa_r+0x5d6>
 80068f2:	2000      	movs	r0, #0
 80068f4:	496c      	ldr	r1, [pc, #432]	@ (8006aa8 <_dtoa_r+0x700>)
 80068f6:	f7f9 ff19 	bl	800072c <__aeabi_ddiv>
 80068fa:	4633      	mov	r3, r6
 80068fc:	462a      	mov	r2, r5
 80068fe:	f7f9 fc33 	bl	8000168 <__aeabi_dsub>
 8006902:	4656      	mov	r6, sl
 8006904:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800690c:	f7fa f894 	bl	8000a38 <__aeabi_d2iz>
 8006910:	4605      	mov	r5, r0
 8006912:	f7f9 fd77 	bl	8000404 <__aeabi_i2d>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691e:	f7f9 fc23 	bl	8000168 <__aeabi_dsub>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	3530      	adds	r5, #48	@ 0x30
 8006928:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800692c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006930:	f806 5b01 	strb.w	r5, [r6], #1
 8006934:	f7fa f842 	bl	80009bc <__aeabi_dcmplt>
 8006938:	2800      	cmp	r0, #0
 800693a:	d163      	bne.n	8006a04 <_dtoa_r+0x65c>
 800693c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006940:	2000      	movs	r0, #0
 8006942:	495a      	ldr	r1, [pc, #360]	@ (8006aac <_dtoa_r+0x704>)
 8006944:	f7f9 fc10 	bl	8000168 <__aeabi_dsub>
 8006948:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800694c:	f7fa f836 	bl	80009bc <__aeabi_dcmplt>
 8006950:	2800      	cmp	r0, #0
 8006952:	f040 8087 	bne.w	8006a64 <_dtoa_r+0x6bc>
 8006956:	42a6      	cmp	r6, r4
 8006958:	f43f af43 	beq.w	80067e2 <_dtoa_r+0x43a>
 800695c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006960:	2200      	movs	r2, #0
 8006962:	4b53      	ldr	r3, [pc, #332]	@ (8006ab0 <_dtoa_r+0x708>)
 8006964:	f7f9 fdb8 	bl	80004d8 <__aeabi_dmul>
 8006968:	2200      	movs	r2, #0
 800696a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800696e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006972:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab0 <_dtoa_r+0x708>)
 8006974:	f7f9 fdb0 	bl	80004d8 <__aeabi_dmul>
 8006978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800697c:	e7c4      	b.n	8006908 <_dtoa_r+0x560>
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	f7f9 fda9 	bl	80004d8 <__aeabi_dmul>
 8006986:	4656      	mov	r6, sl
 8006988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800698c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800698e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006992:	f7fa f851 	bl	8000a38 <__aeabi_d2iz>
 8006996:	4605      	mov	r5, r0
 8006998:	f7f9 fd34 	bl	8000404 <__aeabi_i2d>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	f7f9 fbe0 	bl	8000168 <__aeabi_dsub>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	3530      	adds	r5, #48	@ 0x30
 80069ae:	f806 5b01 	strb.w	r5, [r6], #1
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	d124      	bne.n	8006a08 <_dtoa_r+0x660>
 80069be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069c2:	4b39      	ldr	r3, [pc, #228]	@ (8006aa8 <_dtoa_r+0x700>)
 80069c4:	f7f9 fbd2 	bl	800016c <__adddf3>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d0:	f7fa f812 	bl	80009f8 <__aeabi_dcmpgt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d145      	bne.n	8006a64 <_dtoa_r+0x6bc>
 80069d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069dc:	2000      	movs	r0, #0
 80069de:	4932      	ldr	r1, [pc, #200]	@ (8006aa8 <_dtoa_r+0x700>)
 80069e0:	f7f9 fbc2 	bl	8000168 <__aeabi_dsub>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ec:	f7f9 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	f43f aef6 	beq.w	80067e2 <_dtoa_r+0x43a>
 80069f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80069f8:	1e73      	subs	r3, r6, #1
 80069fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a00:	2b30      	cmp	r3, #48	@ 0x30
 8006a02:	d0f8      	beq.n	80069f6 <_dtoa_r+0x64e>
 8006a04:	9f04      	ldr	r7, [sp, #16]
 8006a06:	e73f      	b.n	8006888 <_dtoa_r+0x4e0>
 8006a08:	4b29      	ldr	r3, [pc, #164]	@ (8006ab0 <_dtoa_r+0x708>)
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a12:	e7bc      	b.n	800698e <_dtoa_r+0x5e6>
 8006a14:	d10c      	bne.n	8006a30 <_dtoa_r+0x688>
 8006a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <_dtoa_r+0x70c>)
 8006a1e:	f7f9 fd5b 	bl	80004d8 <__aeabi_dmul>
 8006a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a26:	f7f9 ffdd 	bl	80009e4 <__aeabi_dcmpge>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f000 815b 	beq.w	8006ce6 <_dtoa_r+0x93e>
 8006a30:	2400      	movs	r4, #0
 8006a32:	4625      	mov	r5, r4
 8006a34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a36:	4656      	mov	r6, sl
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	9304      	str	r3, [sp, #16]
 8006a3c:	2700      	movs	r7, #0
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4658      	mov	r0, fp
 8006a42:	f000 fbb7 	bl	80071b4 <_Bfree>
 8006a46:	2d00      	cmp	r5, #0
 8006a48:	d0dc      	beq.n	8006a04 <_dtoa_r+0x65c>
 8006a4a:	b12f      	cbz	r7, 8006a58 <_dtoa_r+0x6b0>
 8006a4c:	42af      	cmp	r7, r5
 8006a4e:	d003      	beq.n	8006a58 <_dtoa_r+0x6b0>
 8006a50:	4639      	mov	r1, r7
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fbae 	bl	80071b4 <_Bfree>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4658      	mov	r0, fp
 8006a5c:	f000 fbaa 	bl	80071b4 <_Bfree>
 8006a60:	e7d0      	b.n	8006a04 <_dtoa_r+0x65c>
 8006a62:	9704      	str	r7, [sp, #16]
 8006a64:	4633      	mov	r3, r6
 8006a66:	461e      	mov	r6, r3
 8006a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a6c:	2a39      	cmp	r2, #57	@ 0x39
 8006a6e:	d107      	bne.n	8006a80 <_dtoa_r+0x6d8>
 8006a70:	459a      	cmp	sl, r3
 8006a72:	d1f8      	bne.n	8006a66 <_dtoa_r+0x6be>
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	3201      	adds	r2, #1
 8006a78:	9204      	str	r2, [sp, #16]
 8006a7a:	2230      	movs	r2, #48	@ 0x30
 8006a7c:	f88a 2000 	strb.w	r2, [sl]
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	3201      	adds	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e7bd      	b.n	8006a04 <_dtoa_r+0x65c>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4b09      	ldr	r3, [pc, #36]	@ (8006ab0 <_dtoa_r+0x708>)
 8006a8c:	f7f9 fd24 	bl	80004d8 <__aeabi_dmul>
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	f7f9 ff86 	bl	80009a8 <__aeabi_dcmpeq>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f aebc 	beq.w	800681a <_dtoa_r+0x472>
 8006aa2:	e6f1      	b.n	8006888 <_dtoa_r+0x4e0>
 8006aa4:	08009b18 	.word	0x08009b18
 8006aa8:	3fe00000 	.word	0x3fe00000
 8006aac:	3ff00000 	.word	0x3ff00000
 8006ab0:	40240000 	.word	0x40240000
 8006ab4:	40140000 	.word	0x40140000
 8006ab8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	f000 80db 	beq.w	8006c76 <_dtoa_r+0x8ce>
 8006ac0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ac2:	2a01      	cmp	r2, #1
 8006ac4:	f300 80bf 	bgt.w	8006c46 <_dtoa_r+0x89e>
 8006ac8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	f000 80b7 	beq.w	8006c3e <_dtoa_r+0x896>
 8006ad0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ad4:	4646      	mov	r6, r8
 8006ad6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ada:	2101      	movs	r1, #1
 8006adc:	441a      	add	r2, r3
 8006ade:	4658      	mov	r0, fp
 8006ae0:	4498      	add	r8, r3
 8006ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ae4:	f000 fc64 	bl	80073b0 <__i2b>
 8006ae8:	4605      	mov	r5, r0
 8006aea:	b15e      	cbz	r6, 8006b04 <_dtoa_r+0x75c>
 8006aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dd08      	ble.n	8006b04 <_dtoa_r+0x75c>
 8006af2:	42b3      	cmp	r3, r6
 8006af4:	bfa8      	it	ge
 8006af6:	4633      	movge	r3, r6
 8006af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006afa:	eba8 0803 	sub.w	r8, r8, r3
 8006afe:	1af6      	subs	r6, r6, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b06:	b1f3      	cbz	r3, 8006b46 <_dtoa_r+0x79e>
 8006b08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80b7 	beq.w	8006c7e <_dtoa_r+0x8d6>
 8006b10:	b18c      	cbz	r4, 8006b36 <_dtoa_r+0x78e>
 8006b12:	4629      	mov	r1, r5
 8006b14:	4622      	mov	r2, r4
 8006b16:	4658      	mov	r0, fp
 8006b18:	f000 fd08 	bl	800752c <__pow5mult>
 8006b1c:	464a      	mov	r2, r9
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4605      	mov	r5, r0
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fc5a 	bl	80073dc <__multiply>
 8006b28:	4649      	mov	r1, r9
 8006b2a:	9004      	str	r0, [sp, #16]
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fb41 	bl	80071b4 <_Bfree>
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	4699      	mov	r9, r3
 8006b36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b38:	1b1a      	subs	r2, r3, r4
 8006b3a:	d004      	beq.n	8006b46 <_dtoa_r+0x79e>
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f000 fcf4 	bl	800752c <__pow5mult>
 8006b44:	4681      	mov	r9, r0
 8006b46:	2101      	movs	r1, #1
 8006b48:	4658      	mov	r0, fp
 8006b4a:	f000 fc31 	bl	80073b0 <__i2b>
 8006b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b50:	4604      	mov	r4, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 81c9 	beq.w	8006eea <_dtoa_r+0xb42>
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f000 fce5 	bl	800752c <__pow5mult>
 8006b62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b64:	4604      	mov	r4, r0
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f300 808f 	bgt.w	8006c8a <_dtoa_r+0x8e2>
 8006b6c:	9b02      	ldr	r3, [sp, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 8087 	bne.w	8006c82 <_dtoa_r+0x8da>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 8083 	bne.w	8006c86 <_dtoa_r+0x8de>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b86:	0d1b      	lsrs	r3, r3, #20
 8006b88:	051b      	lsls	r3, r3, #20
 8006b8a:	b12b      	cbz	r3, 8006b98 <_dtoa_r+0x7f0>
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	3301      	adds	r3, #1
 8006b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b96:	2301      	movs	r3, #1
 8006b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 81aa 	beq.w	8006ef6 <_dtoa_r+0xb4e>
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ba8:	6918      	ldr	r0, [r3, #16]
 8006baa:	f000 fbb5 	bl	8007318 <__hi0bits>
 8006bae:	f1c0 0020 	rsb	r0, r0, #32
 8006bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb4:	4418      	add	r0, r3
 8006bb6:	f010 001f 	ands.w	r0, r0, #31
 8006bba:	d071      	beq.n	8006ca0 <_dtoa_r+0x8f8>
 8006bbc:	f1c0 0320 	rsb	r3, r0, #32
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	dd65      	ble.n	8006c90 <_dtoa_r+0x8e8>
 8006bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc6:	f1c0 001c 	rsb	r0, r0, #28
 8006bca:	4403      	add	r3, r0
 8006bcc:	4480      	add	r8, r0
 8006bce:	4406      	add	r6, r0
 8006bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd2:	f1b8 0f00 	cmp.w	r8, #0
 8006bd6:	dd05      	ble.n	8006be4 <_dtoa_r+0x83c>
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4642      	mov	r2, r8
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 fcff 	bl	80075e0 <__lshift>
 8006be2:	4681      	mov	r9, r0
 8006be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd05      	ble.n	8006bf6 <_dtoa_r+0x84e>
 8006bea:	4621      	mov	r1, r4
 8006bec:	461a      	mov	r2, r3
 8006bee:	4658      	mov	r0, fp
 8006bf0:	f000 fcf6 	bl	80075e0 <__lshift>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d053      	beq.n	8006ca4 <_dtoa_r+0x8fc>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f000 fd5a 	bl	80076b8 <__mcmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	da4d      	bge.n	8006ca4 <_dtoa_r+0x8fc>
 8006c08:	1e7b      	subs	r3, r7, #1
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	220a      	movs	r2, #10
 8006c10:	2300      	movs	r3, #0
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 faf0 	bl	80071f8 <__multadd>
 8006c18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c1a:	4681      	mov	r9, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 816c 	beq.w	8006efa <_dtoa_r+0xb52>
 8006c22:	2300      	movs	r3, #0
 8006c24:	4629      	mov	r1, r5
 8006c26:	220a      	movs	r2, #10
 8006c28:	4658      	mov	r0, fp
 8006c2a:	f000 fae5 	bl	80071f8 <__multadd>
 8006c2e:	9b08      	ldr	r3, [sp, #32]
 8006c30:	4605      	mov	r5, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dc61      	bgt.n	8006cfa <_dtoa_r+0x952>
 8006c36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	dc3b      	bgt.n	8006cb4 <_dtoa_r+0x90c>
 8006c3c:	e05d      	b.n	8006cfa <_dtoa_r+0x952>
 8006c3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c40:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c44:	e746      	b.n	8006ad4 <_dtoa_r+0x72c>
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	1e5c      	subs	r4, r3, #1
 8006c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	bfbf      	itttt	lt
 8006c50:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c52:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006c54:	1ae3      	sublt	r3, r4, r3
 8006c56:	18d2      	addlt	r2, r2, r3
 8006c58:	bfa8      	it	ge
 8006c5a:	1b1c      	subge	r4, r3, r4
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	bfbe      	ittt	lt
 8006c60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c62:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006c64:	2400      	movlt	r4, #0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfb5      	itete	lt
 8006c6a:	eba8 0603 	sublt.w	r6, r8, r3
 8006c6e:	4646      	movge	r6, r8
 8006c70:	2300      	movlt	r3, #0
 8006c72:	9b07      	ldrge	r3, [sp, #28]
 8006c74:	e730      	b.n	8006ad8 <_dtoa_r+0x730>
 8006c76:	4646      	mov	r6, r8
 8006c78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c7c:	e735      	b.n	8006aea <_dtoa_r+0x742>
 8006c7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c80:	e75c      	b.n	8006b3c <_dtoa_r+0x794>
 8006c82:	2300      	movs	r3, #0
 8006c84:	e788      	b.n	8006b98 <_dtoa_r+0x7f0>
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	e786      	b.n	8006b98 <_dtoa_r+0x7f0>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8e:	e788      	b.n	8006ba2 <_dtoa_r+0x7fa>
 8006c90:	d09f      	beq.n	8006bd2 <_dtoa_r+0x82a>
 8006c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c94:	331c      	adds	r3, #28
 8006c96:	441a      	add	r2, r3
 8006c98:	4498      	add	r8, r3
 8006c9a:	441e      	add	r6, r3
 8006c9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c9e:	e798      	b.n	8006bd2 <_dtoa_r+0x82a>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	e7f6      	b.n	8006c92 <_dtoa_r+0x8ea>
 8006ca4:	9b07      	ldr	r3, [sp, #28]
 8006ca6:	9704      	str	r7, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dc20      	bgt.n	8006cee <_dtoa_r+0x946>
 8006cac:	9308      	str	r3, [sp, #32]
 8006cae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	dd1e      	ble.n	8006cf2 <_dtoa_r+0x94a>
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f47f aebc 	bne.w	8006a34 <_dtoa_r+0x68c>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f000 fa99 	bl	80071f8 <__multadd>
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4648      	mov	r0, r9
 8006ccc:	f000 fcf4 	bl	80076b8 <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	f77f aeaf 	ble.w	8006a34 <_dtoa_r+0x68c>
 8006cd6:	2331      	movs	r3, #49	@ 0x31
 8006cd8:	4656      	mov	r6, sl
 8006cda:	f806 3b01 	strb.w	r3, [r6], #1
 8006cde:	9b04      	ldr	r3, [sp, #16]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	e6aa      	b.n	8006a3c <_dtoa_r+0x694>
 8006ce6:	9c07      	ldr	r4, [sp, #28]
 8006ce8:	9704      	str	r7, [sp, #16]
 8006cea:	4625      	mov	r5, r4
 8006cec:	e7f3      	b.n	8006cd6 <_dtoa_r+0x92e>
 8006cee:	9b07      	ldr	r3, [sp, #28]
 8006cf0:	9308      	str	r3, [sp, #32]
 8006cf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8104 	beq.w	8006f02 <_dtoa_r+0xb5a>
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	dd05      	ble.n	8006d0a <_dtoa_r+0x962>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4632      	mov	r2, r6
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 fc6c 	bl	80075e0 <__lshift>
 8006d08:	4605      	mov	r5, r0
 8006d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d05a      	beq.n	8006dc6 <_dtoa_r+0xa1e>
 8006d10:	4658      	mov	r0, fp
 8006d12:	6869      	ldr	r1, [r5, #4]
 8006d14:	f000 fa0e 	bl	8007134 <_Balloc>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	b928      	cbnz	r0, 8006d28 <_dtoa_r+0x980>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d22:	4b83      	ldr	r3, [pc, #524]	@ (8006f30 <_dtoa_r+0xb88>)
 8006d24:	f7ff bb54 	b.w	80063d0 <_dtoa_r+0x28>
 8006d28:	692a      	ldr	r2, [r5, #16]
 8006d2a:	f105 010c 	add.w	r1, r5, #12
 8006d2e:	3202      	adds	r2, #2
 8006d30:	0092      	lsls	r2, r2, #2
 8006d32:	300c      	adds	r0, #12
 8006d34:	f7ff fa9b 	bl	800626e <memcpy>
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f000 fc4f 	bl	80075e0 <__lshift>
 8006d42:	462f      	mov	r7, r5
 8006d44:	4605      	mov	r5, r0
 8006d46:	f10a 0301 	add.w	r3, sl, #1
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	9b08      	ldr	r3, [sp, #32]
 8006d4e:	4453      	add	r3, sl
 8006d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4648      	mov	r0, r9
 8006d62:	9302      	str	r3, [sp, #8]
 8006d64:	f7ff fa96 	bl	8006294 <quorem>
 8006d68:	4639      	mov	r1, r7
 8006d6a:	9008      	str	r0, [sp, #32]
 8006d6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d70:	4648      	mov	r0, r9
 8006d72:	f000 fca1 	bl	80076b8 <__mcmp>
 8006d76:	462a      	mov	r2, r5
 8006d78:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4658      	mov	r0, fp
 8006d7e:	f000 fcb7 	bl	80076f0 <__mdiff>
 8006d82:	68c2      	ldr	r2, [r0, #12]
 8006d84:	4606      	mov	r6, r0
 8006d86:	bb02      	cbnz	r2, 8006dca <_dtoa_r+0xa22>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fc94 	bl	80076b8 <__mcmp>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4631      	mov	r1, r6
 8006d94:	4658      	mov	r0, fp
 8006d96:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d98:	f000 fa0c 	bl	80071b4 <_Bfree>
 8006d9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006da0:	9e07      	ldr	r6, [sp, #28]
 8006da2:	ea43 0102 	orr.w	r1, r3, r2
 8006da6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da8:	4319      	orrs	r1, r3
 8006daa:	d110      	bne.n	8006dce <_dtoa_r+0xa26>
 8006dac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006db0:	d029      	beq.n	8006e06 <_dtoa_r+0xa5e>
 8006db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd02      	ble.n	8006dbe <_dtoa_r+0xa16>
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006dbe:	9b02      	ldr	r3, [sp, #8]
 8006dc0:	f883 8000 	strb.w	r8, [r3]
 8006dc4:	e63b      	b.n	8006a3e <_dtoa_r+0x696>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	e7bb      	b.n	8006d42 <_dtoa_r+0x99a>
 8006dca:	2201      	movs	r2, #1
 8006dcc:	e7e1      	b.n	8006d92 <_dtoa_r+0x9ea>
 8006dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db04      	blt.n	8006dde <_dtoa_r+0xa36>
 8006dd4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	d120      	bne.n	8006e20 <_dtoa_r+0xa78>
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	dded      	ble.n	8006dbe <_dtoa_r+0xa16>
 8006de2:	4649      	mov	r1, r9
 8006de4:	2201      	movs	r2, #1
 8006de6:	4658      	mov	r0, fp
 8006de8:	f000 fbfa 	bl	80075e0 <__lshift>
 8006dec:	4621      	mov	r1, r4
 8006dee:	4681      	mov	r9, r0
 8006df0:	f000 fc62 	bl	80076b8 <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc03      	bgt.n	8006e00 <_dtoa_r+0xa58>
 8006df8:	d1e1      	bne.n	8006dbe <_dtoa_r+0xa16>
 8006dfa:	f018 0f01 	tst.w	r8, #1
 8006dfe:	d0de      	beq.n	8006dbe <_dtoa_r+0xa16>
 8006e00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e04:	d1d8      	bne.n	8006db8 <_dtoa_r+0xa10>
 8006e06:	2339      	movs	r3, #57	@ 0x39
 8006e08:	9a02      	ldr	r2, [sp, #8]
 8006e0a:	7013      	strb	r3, [r2, #0]
 8006e0c:	4633      	mov	r3, r6
 8006e0e:	461e      	mov	r6, r3
 8006e10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	2a39      	cmp	r2, #57	@ 0x39
 8006e18:	d052      	beq.n	8006ec0 <_dtoa_r+0xb18>
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e60e      	b.n	8006a3e <_dtoa_r+0x696>
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	dd07      	ble.n	8006e34 <_dtoa_r+0xa8c>
 8006e24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e28:	d0ed      	beq.n	8006e06 <_dtoa_r+0xa5e>
 8006e2a:	9a02      	ldr	r2, [sp, #8]
 8006e2c:	f108 0301 	add.w	r3, r8, #1
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	e604      	b.n	8006a3e <_dtoa_r+0x696>
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	9a07      	ldr	r2, [sp, #28]
 8006e38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d028      	beq.n	8006e94 <_dtoa_r+0xaec>
 8006e42:	4649      	mov	r1, r9
 8006e44:	2300      	movs	r3, #0
 8006e46:	220a      	movs	r2, #10
 8006e48:	4658      	mov	r0, fp
 8006e4a:	f000 f9d5 	bl	80071f8 <__multadd>
 8006e4e:	42af      	cmp	r7, r5
 8006e50:	4681      	mov	r9, r0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	f04f 020a 	mov.w	r2, #10
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	4658      	mov	r0, fp
 8006e5e:	d107      	bne.n	8006e70 <_dtoa_r+0xac8>
 8006e60:	f000 f9ca 	bl	80071f8 <__multadd>
 8006e64:	4607      	mov	r7, r0
 8006e66:	4605      	mov	r5, r0
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9307      	str	r3, [sp, #28]
 8006e6e:	e774      	b.n	8006d5a <_dtoa_r+0x9b2>
 8006e70:	f000 f9c2 	bl	80071f8 <__multadd>
 8006e74:	4629      	mov	r1, r5
 8006e76:	4607      	mov	r7, r0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	220a      	movs	r2, #10
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f000 f9bb 	bl	80071f8 <__multadd>
 8006e82:	4605      	mov	r5, r0
 8006e84:	e7f0      	b.n	8006e68 <_dtoa_r+0xac0>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	2700      	movs	r7, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfcc      	ite	gt
 8006e8e:	461e      	movgt	r6, r3
 8006e90:	2601      	movle	r6, #1
 8006e92:	4456      	add	r6, sl
 8006e94:	4649      	mov	r1, r9
 8006e96:	2201      	movs	r2, #1
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f000 fba1 	bl	80075e0 <__lshift>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4681      	mov	r9, r0
 8006ea2:	f000 fc09 	bl	80076b8 <__mcmp>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	dcb0      	bgt.n	8006e0c <_dtoa_r+0xa64>
 8006eaa:	d102      	bne.n	8006eb2 <_dtoa_r+0xb0a>
 8006eac:	f018 0f01 	tst.w	r8, #1
 8006eb0:	d1ac      	bne.n	8006e0c <_dtoa_r+0xa64>
 8006eb2:	4633      	mov	r3, r6
 8006eb4:	461e      	mov	r6, r3
 8006eb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eba:	2a30      	cmp	r2, #48	@ 0x30
 8006ebc:	d0fa      	beq.n	8006eb4 <_dtoa_r+0xb0c>
 8006ebe:	e5be      	b.n	8006a3e <_dtoa_r+0x696>
 8006ec0:	459a      	cmp	sl, r3
 8006ec2:	d1a4      	bne.n	8006e0e <_dtoa_r+0xa66>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	2331      	movs	r3, #49	@ 0x31
 8006ecc:	f88a 3000 	strb.w	r3, [sl]
 8006ed0:	e5b5      	b.n	8006a3e <_dtoa_r+0x696>
 8006ed2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ed4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f34 <_dtoa_r+0xb8c>
 8006ed8:	b11b      	cbz	r3, 8006ee2 <_dtoa_r+0xb3a>
 8006eda:	f10a 0308 	add.w	r3, sl, #8
 8006ede:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	b017      	add	sp, #92	@ 0x5c
 8006ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	f77f ae3d 	ble.w	8006b6c <_dtoa_r+0x7c4>
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e65b      	b.n	8006bb2 <_dtoa_r+0x80a>
 8006efa:	9b08      	ldr	r3, [sp, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f77f aed6 	ble.w	8006cae <_dtoa_r+0x906>
 8006f02:	4656      	mov	r6, sl
 8006f04:	4621      	mov	r1, r4
 8006f06:	4648      	mov	r0, r9
 8006f08:	f7ff f9c4 	bl	8006294 <quorem>
 8006f0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f10:	9b08      	ldr	r3, [sp, #32]
 8006f12:	f806 8b01 	strb.w	r8, [r6], #1
 8006f16:	eba6 020a 	sub.w	r2, r6, sl
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	ddb3      	ble.n	8006e86 <_dtoa_r+0xade>
 8006f1e:	4649      	mov	r1, r9
 8006f20:	2300      	movs	r3, #0
 8006f22:	220a      	movs	r2, #10
 8006f24:	4658      	mov	r0, fp
 8006f26:	f000 f967 	bl	80071f8 <__multadd>
 8006f2a:	4681      	mov	r9, r0
 8006f2c:	e7ea      	b.n	8006f04 <_dtoa_r+0xb5c>
 8006f2e:	bf00      	nop
 8006f30:	08009a77 	.word	0x08009a77
 8006f34:	080099fb 	.word	0x080099fb

08006f38 <_free_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d040      	beq.n	8006fc2 <_free_r+0x8a>
 8006f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f44:	1f0c      	subs	r4, r1, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfb8      	it	lt
 8006f4a:	18e4      	addlt	r4, r4, r3
 8006f4c:	f000 f8e6 	bl	800711c <__malloc_lock>
 8006f50:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc4 <_free_r+0x8c>)
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x2c>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f60:	f000 b8e2 	b.w	8007128 <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x42>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	1821      	adds	r1, r4, r0
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1809      	addeq	r1, r1, r0
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x1e>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x4c>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x42>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1850      	adds	r0, r2, r1
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x6c>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	4401      	add	r1, r0
 8006f90:	1850      	adds	r0, r2, r1
 8006f92:	4283      	cmp	r3, r0
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x22>
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4408      	add	r0, r1
 8006f9e:	6010      	str	r0, [r2, #0]
 8006fa0:	6053      	str	r3, [r2, #4]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x22>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x74>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x22>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	1821      	adds	r1, r4, r0
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf01      	itttt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	1809      	addeq	r1, r1, r0
 8006fba:	6021      	streq	r1, [r4, #0]
 8006fbc:	6063      	str	r3, [r4, #4]
 8006fbe:	6054      	str	r4, [r2, #4]
 8006fc0:	e7cb      	b.n	8006f5a <_free_r+0x22>
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20000548 	.word	0x20000548

08006fc8 <malloc>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	@ (8006fd4 <malloc+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f000 b825 	b.w	800701c <_malloc_r>
 8006fd2:	bf00      	nop
 8006fd4:	20000018 	.word	0x20000018

08006fd8 <sbrk_aligned>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4e0f      	ldr	r6, [pc, #60]	@ (8007018 <sbrk_aligned+0x40>)
 8006fdc:	460c      	mov	r4, r1
 8006fde:	6831      	ldr	r1, [r6, #0]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	b911      	cbnz	r1, 8006fea <sbrk_aligned+0x12>
 8006fe4:	f001 fdf6 	bl	8008bd4 <_sbrk_r>
 8006fe8:	6030      	str	r0, [r6, #0]
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f001 fdf1 	bl	8008bd4 <_sbrk_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d103      	bne.n	8006ffe <sbrk_aligned+0x26>
 8006ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	1cc4      	adds	r4, r0, #3
 8007000:	f024 0403 	bic.w	r4, r4, #3
 8007004:	42a0      	cmp	r0, r4
 8007006:	d0f8      	beq.n	8006ffa <sbrk_aligned+0x22>
 8007008:	1a21      	subs	r1, r4, r0
 800700a:	4628      	mov	r0, r5
 800700c:	f001 fde2 	bl	8008bd4 <_sbrk_r>
 8007010:	3001      	adds	r0, #1
 8007012:	d1f2      	bne.n	8006ffa <sbrk_aligned+0x22>
 8007014:	e7ef      	b.n	8006ff6 <sbrk_aligned+0x1e>
 8007016:	bf00      	nop
 8007018:	20000544 	.word	0x20000544

0800701c <_malloc_r>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	1ccd      	adds	r5, r1, #3
 8007022:	f025 0503 	bic.w	r5, r5, #3
 8007026:	3508      	adds	r5, #8
 8007028:	2d0c      	cmp	r5, #12
 800702a:	bf38      	it	cc
 800702c:	250c      	movcc	r5, #12
 800702e:	2d00      	cmp	r5, #0
 8007030:	4606      	mov	r6, r0
 8007032:	db01      	blt.n	8007038 <_malloc_r+0x1c>
 8007034:	42a9      	cmp	r1, r5
 8007036:	d904      	bls.n	8007042 <_malloc_r+0x26>
 8007038:	230c      	movs	r3, #12
 800703a:	6033      	str	r3, [r6, #0]
 800703c:	2000      	movs	r0, #0
 800703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007118 <_malloc_r+0xfc>
 8007046:	f000 f869 	bl	800711c <__malloc_lock>
 800704a:	f8d8 3000 	ldr.w	r3, [r8]
 800704e:	461c      	mov	r4, r3
 8007050:	bb44      	cbnz	r4, 80070a4 <_malloc_r+0x88>
 8007052:	4629      	mov	r1, r5
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff ffbf 	bl	8006fd8 <sbrk_aligned>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	4604      	mov	r4, r0
 800705e:	d158      	bne.n	8007112 <_malloc_r+0xf6>
 8007060:	f8d8 4000 	ldr.w	r4, [r8]
 8007064:	4627      	mov	r7, r4
 8007066:	2f00      	cmp	r7, #0
 8007068:	d143      	bne.n	80070f2 <_malloc_r+0xd6>
 800706a:	2c00      	cmp	r4, #0
 800706c:	d04b      	beq.n	8007106 <_malloc_r+0xea>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	4639      	mov	r1, r7
 8007072:	4630      	mov	r0, r6
 8007074:	eb04 0903 	add.w	r9, r4, r3
 8007078:	f001 fdac 	bl	8008bd4 <_sbrk_r>
 800707c:	4581      	cmp	r9, r0
 800707e:	d142      	bne.n	8007106 <_malloc_r+0xea>
 8007080:	6821      	ldr	r1, [r4, #0]
 8007082:	4630      	mov	r0, r6
 8007084:	1a6d      	subs	r5, r5, r1
 8007086:	4629      	mov	r1, r5
 8007088:	f7ff ffa6 	bl	8006fd8 <sbrk_aligned>
 800708c:	3001      	adds	r0, #1
 800708e:	d03a      	beq.n	8007106 <_malloc_r+0xea>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	442b      	add	r3, r5
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	f8d8 3000 	ldr.w	r3, [r8]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	bb62      	cbnz	r2, 80070f8 <_malloc_r+0xdc>
 800709e:	f8c8 7000 	str.w	r7, [r8]
 80070a2:	e00f      	b.n	80070c4 <_malloc_r+0xa8>
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	1b52      	subs	r2, r2, r5
 80070a8:	d420      	bmi.n	80070ec <_malloc_r+0xd0>
 80070aa:	2a0b      	cmp	r2, #11
 80070ac:	d917      	bls.n	80070de <_malloc_r+0xc2>
 80070ae:	1961      	adds	r1, r4, r5
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	6059      	strne	r1, [r3, #4]
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	bf08      	it	eq
 80070bc:	f8c8 1000 	streq.w	r1, [r8]
 80070c0:	5162      	str	r2, [r4, r5]
 80070c2:	604b      	str	r3, [r1, #4]
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 f82f 	bl	8007128 <__malloc_unlock>
 80070ca:	f104 000b 	add.w	r0, r4, #11
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	f020 0007 	bic.w	r0, r0, #7
 80070d4:	1ac2      	subs	r2, r0, r3
 80070d6:	bf1c      	itt	ne
 80070d8:	1a1b      	subne	r3, r3, r0
 80070da:	50a3      	strne	r3, [r4, r2]
 80070dc:	e7af      	b.n	800703e <_malloc_r+0x22>
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	bf0c      	ite	eq
 80070e4:	f8c8 2000 	streq.w	r2, [r8]
 80070e8:	605a      	strne	r2, [r3, #4]
 80070ea:	e7eb      	b.n	80070c4 <_malloc_r+0xa8>
 80070ec:	4623      	mov	r3, r4
 80070ee:	6864      	ldr	r4, [r4, #4]
 80070f0:	e7ae      	b.n	8007050 <_malloc_r+0x34>
 80070f2:	463c      	mov	r4, r7
 80070f4:	687f      	ldr	r7, [r7, #4]
 80070f6:	e7b6      	b.n	8007066 <_malloc_r+0x4a>
 80070f8:	461a      	mov	r2, r3
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d1fb      	bne.n	80070f8 <_malloc_r+0xdc>
 8007100:	2300      	movs	r3, #0
 8007102:	6053      	str	r3, [r2, #4]
 8007104:	e7de      	b.n	80070c4 <_malloc_r+0xa8>
 8007106:	230c      	movs	r3, #12
 8007108:	4630      	mov	r0, r6
 800710a:	6033      	str	r3, [r6, #0]
 800710c:	f000 f80c 	bl	8007128 <__malloc_unlock>
 8007110:	e794      	b.n	800703c <_malloc_r+0x20>
 8007112:	6005      	str	r5, [r0, #0]
 8007114:	e7d6      	b.n	80070c4 <_malloc_r+0xa8>
 8007116:	bf00      	nop
 8007118:	20000548 	.word	0x20000548

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <__malloc_lock+0x8>)
 800711e:	f7ff b896 	b.w	800624e <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20000540 	.word	0x20000540

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__malloc_unlock+0x8>)
 800712a:	f7ff b891 	b.w	8006250 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20000540 	.word	0x20000540

08007134 <_Balloc>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	69c6      	ldr	r6, [r0, #28]
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	b976      	cbnz	r6, 800715c <_Balloc+0x28>
 800713e:	2010      	movs	r0, #16
 8007140:	f7ff ff42 	bl	8006fc8 <malloc>
 8007144:	4602      	mov	r2, r0
 8007146:	61e0      	str	r0, [r4, #28]
 8007148:	b920      	cbnz	r0, 8007154 <_Balloc+0x20>
 800714a:	216b      	movs	r1, #107	@ 0x6b
 800714c:	4b17      	ldr	r3, [pc, #92]	@ (80071ac <_Balloc+0x78>)
 800714e:	4818      	ldr	r0, [pc, #96]	@ (80071b0 <_Balloc+0x7c>)
 8007150:	f001 fd56 	bl	8008c00 <__assert_func>
 8007154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007158:	6006      	str	r6, [r0, #0]
 800715a:	60c6      	str	r6, [r0, #12]
 800715c:	69e6      	ldr	r6, [r4, #28]
 800715e:	68f3      	ldr	r3, [r6, #12]
 8007160:	b183      	cbz	r3, 8007184 <_Balloc+0x50>
 8007162:	69e3      	ldr	r3, [r4, #28]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800716a:	b9b8      	cbnz	r0, 800719c <_Balloc+0x68>
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f605 	lsl.w	r6, r1, r5
 8007172:	1d72      	adds	r2, r6, #5
 8007174:	4620      	mov	r0, r4
 8007176:	0092      	lsls	r2, r2, #2
 8007178:	f001 fd60 	bl	8008c3c <_calloc_r>
 800717c:	b160      	cbz	r0, 8007198 <_Balloc+0x64>
 800717e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007182:	e00e      	b.n	80071a2 <_Balloc+0x6e>
 8007184:	2221      	movs	r2, #33	@ 0x21
 8007186:	2104      	movs	r1, #4
 8007188:	4620      	mov	r0, r4
 800718a:	f001 fd57 	bl	8008c3c <_calloc_r>
 800718e:	69e3      	ldr	r3, [r4, #28]
 8007190:	60f0      	str	r0, [r6, #12]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e4      	bne.n	8007162 <_Balloc+0x2e>
 8007198:	2000      	movs	r0, #0
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	6802      	ldr	r2, [r0, #0]
 800719e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071a2:	2300      	movs	r3, #0
 80071a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071a8:	e7f7      	b.n	800719a <_Balloc+0x66>
 80071aa:	bf00      	nop
 80071ac:	08009a08 	.word	0x08009a08
 80071b0:	08009a88 	.word	0x08009a88

080071b4 <_Bfree>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	69c6      	ldr	r6, [r0, #28]
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b976      	cbnz	r6, 80071dc <_Bfree+0x28>
 80071be:	2010      	movs	r0, #16
 80071c0:	f7ff ff02 	bl	8006fc8 <malloc>
 80071c4:	4602      	mov	r2, r0
 80071c6:	61e8      	str	r0, [r5, #28]
 80071c8:	b920      	cbnz	r0, 80071d4 <_Bfree+0x20>
 80071ca:	218f      	movs	r1, #143	@ 0x8f
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <_Bfree+0x3c>)
 80071ce:	4809      	ldr	r0, [pc, #36]	@ (80071f4 <_Bfree+0x40>)
 80071d0:	f001 fd16 	bl	8008c00 <__assert_func>
 80071d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d8:	6006      	str	r6, [r0, #0]
 80071da:	60c6      	str	r6, [r0, #12]
 80071dc:	b13c      	cbz	r4, 80071ee <_Bfree+0x3a>
 80071de:	69eb      	ldr	r3, [r5, #28]
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e8:	6021      	str	r1, [r4, #0]
 80071ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	08009a08 	.word	0x08009a08
 80071f4:	08009a88 	.word	0x08009a88

080071f8 <__multadd>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4607      	mov	r7, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	461e      	mov	r6, r3
 8007202:	2000      	movs	r0, #0
 8007204:	690d      	ldr	r5, [r1, #16]
 8007206:	f101 0c14 	add.w	ip, r1, #20
 800720a:	f8dc 3000 	ldr.w	r3, [ip]
 800720e:	3001      	adds	r0, #1
 8007210:	b299      	uxth	r1, r3
 8007212:	fb02 6101 	mla	r1, r2, r1, r6
 8007216:	0c1e      	lsrs	r6, r3, #16
 8007218:	0c0b      	lsrs	r3, r1, #16
 800721a:	fb02 3306 	mla	r3, r2, r6, r3
 800721e:	b289      	uxth	r1, r1
 8007220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007224:	4285      	cmp	r5, r0
 8007226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800722a:	f84c 1b04 	str.w	r1, [ip], #4
 800722e:	dcec      	bgt.n	800720a <__multadd+0x12>
 8007230:	b30e      	cbz	r6, 8007276 <__multadd+0x7e>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc19      	bgt.n	800726c <__multadd+0x74>
 8007238:	6861      	ldr	r1, [r4, #4]
 800723a:	4638      	mov	r0, r7
 800723c:	3101      	adds	r1, #1
 800723e:	f7ff ff79 	bl	8007134 <_Balloc>
 8007242:	4680      	mov	r8, r0
 8007244:	b928      	cbnz	r0, 8007252 <__multadd+0x5a>
 8007246:	4602      	mov	r2, r0
 8007248:	21ba      	movs	r1, #186	@ 0xba
 800724a:	4b0c      	ldr	r3, [pc, #48]	@ (800727c <__multadd+0x84>)
 800724c:	480c      	ldr	r0, [pc, #48]	@ (8007280 <__multadd+0x88>)
 800724e:	f001 fcd7 	bl	8008c00 <__assert_func>
 8007252:	6922      	ldr	r2, [r4, #16]
 8007254:	f104 010c 	add.w	r1, r4, #12
 8007258:	3202      	adds	r2, #2
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	300c      	adds	r0, #12
 800725e:	f7ff f806 	bl	800626e <memcpy>
 8007262:	4621      	mov	r1, r4
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff ffa5 	bl	80071b4 <_Bfree>
 800726a:	4644      	mov	r4, r8
 800726c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007270:	3501      	adds	r5, #1
 8007272:	615e      	str	r6, [r3, #20]
 8007274:	6125      	str	r5, [r4, #16]
 8007276:	4620      	mov	r0, r4
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	08009a77 	.word	0x08009a77
 8007280:	08009a88 	.word	0x08009a88

08007284 <__s2b>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	4615      	mov	r5, r2
 800728a:	2209      	movs	r2, #9
 800728c:	461f      	mov	r7, r3
 800728e:	3308      	adds	r3, #8
 8007290:	460c      	mov	r4, r1
 8007292:	fb93 f3f2 	sdiv	r3, r3, r2
 8007296:	4606      	mov	r6, r0
 8007298:	2201      	movs	r2, #1
 800729a:	2100      	movs	r1, #0
 800729c:	429a      	cmp	r2, r3
 800729e:	db09      	blt.n	80072b4 <__s2b+0x30>
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7ff ff47 	bl	8007134 <_Balloc>
 80072a6:	b940      	cbnz	r0, 80072ba <__s2b+0x36>
 80072a8:	4602      	mov	r2, r0
 80072aa:	21d3      	movs	r1, #211	@ 0xd3
 80072ac:	4b18      	ldr	r3, [pc, #96]	@ (8007310 <__s2b+0x8c>)
 80072ae:	4819      	ldr	r0, [pc, #100]	@ (8007314 <__s2b+0x90>)
 80072b0:	f001 fca6 	bl	8008c00 <__assert_func>
 80072b4:	0052      	lsls	r2, r2, #1
 80072b6:	3101      	adds	r1, #1
 80072b8:	e7f0      	b.n	800729c <__s2b+0x18>
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	2d09      	cmp	r5, #9
 80072be:	6143      	str	r3, [r0, #20]
 80072c0:	f04f 0301 	mov.w	r3, #1
 80072c4:	6103      	str	r3, [r0, #16]
 80072c6:	dd16      	ble.n	80072f6 <__s2b+0x72>
 80072c8:	f104 0909 	add.w	r9, r4, #9
 80072cc:	46c8      	mov	r8, r9
 80072ce:	442c      	add	r4, r5
 80072d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072d4:	4601      	mov	r1, r0
 80072d6:	220a      	movs	r2, #10
 80072d8:	4630      	mov	r0, r6
 80072da:	3b30      	subs	r3, #48	@ 0x30
 80072dc:	f7ff ff8c 	bl	80071f8 <__multadd>
 80072e0:	45a0      	cmp	r8, r4
 80072e2:	d1f5      	bne.n	80072d0 <__s2b+0x4c>
 80072e4:	f1a5 0408 	sub.w	r4, r5, #8
 80072e8:	444c      	add	r4, r9
 80072ea:	1b2d      	subs	r5, r5, r4
 80072ec:	1963      	adds	r3, r4, r5
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	db04      	blt.n	80072fc <__s2b+0x78>
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	2509      	movs	r5, #9
 80072f8:	340a      	adds	r4, #10
 80072fa:	e7f6      	b.n	80072ea <__s2b+0x66>
 80072fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007300:	4601      	mov	r1, r0
 8007302:	220a      	movs	r2, #10
 8007304:	4630      	mov	r0, r6
 8007306:	3b30      	subs	r3, #48	@ 0x30
 8007308:	f7ff ff76 	bl	80071f8 <__multadd>
 800730c:	e7ee      	b.n	80072ec <__s2b+0x68>
 800730e:	bf00      	nop
 8007310:	08009a77 	.word	0x08009a77
 8007314:	08009a88 	.word	0x08009a88

08007318 <__hi0bits>:
 8007318:	4603      	mov	r3, r0
 800731a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800731e:	bf3a      	itte	cc
 8007320:	0403      	lslcc	r3, r0, #16
 8007322:	2010      	movcc	r0, #16
 8007324:	2000      	movcs	r0, #0
 8007326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800732a:	bf3c      	itt	cc
 800732c:	021b      	lslcc	r3, r3, #8
 800732e:	3008      	addcc	r0, #8
 8007330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007334:	bf3c      	itt	cc
 8007336:	011b      	lslcc	r3, r3, #4
 8007338:	3004      	addcc	r0, #4
 800733a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800733e:	bf3c      	itt	cc
 8007340:	009b      	lslcc	r3, r3, #2
 8007342:	3002      	addcc	r0, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	db05      	blt.n	8007354 <__hi0bits+0x3c>
 8007348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800734c:	f100 0001 	add.w	r0, r0, #1
 8007350:	bf08      	it	eq
 8007352:	2020      	moveq	r0, #32
 8007354:	4770      	bx	lr

08007356 <__lo0bits>:
 8007356:	6803      	ldr	r3, [r0, #0]
 8007358:	4602      	mov	r2, r0
 800735a:	f013 0007 	ands.w	r0, r3, #7
 800735e:	d00b      	beq.n	8007378 <__lo0bits+0x22>
 8007360:	07d9      	lsls	r1, r3, #31
 8007362:	d421      	bmi.n	80073a8 <__lo0bits+0x52>
 8007364:	0798      	lsls	r0, r3, #30
 8007366:	bf49      	itett	mi
 8007368:	085b      	lsrmi	r3, r3, #1
 800736a:	089b      	lsrpl	r3, r3, #2
 800736c:	2001      	movmi	r0, #1
 800736e:	6013      	strmi	r3, [r2, #0]
 8007370:	bf5c      	itt	pl
 8007372:	2002      	movpl	r0, #2
 8007374:	6013      	strpl	r3, [r2, #0]
 8007376:	4770      	bx	lr
 8007378:	b299      	uxth	r1, r3
 800737a:	b909      	cbnz	r1, 8007380 <__lo0bits+0x2a>
 800737c:	2010      	movs	r0, #16
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	b909      	cbnz	r1, 8007388 <__lo0bits+0x32>
 8007384:	3008      	adds	r0, #8
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	0719      	lsls	r1, r3, #28
 800738a:	bf04      	itt	eq
 800738c:	091b      	lsreq	r3, r3, #4
 800738e:	3004      	addeq	r0, #4
 8007390:	0799      	lsls	r1, r3, #30
 8007392:	bf04      	itt	eq
 8007394:	089b      	lsreq	r3, r3, #2
 8007396:	3002      	addeq	r0, #2
 8007398:	07d9      	lsls	r1, r3, #31
 800739a:	d403      	bmi.n	80073a4 <__lo0bits+0x4e>
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	f100 0001 	add.w	r0, r0, #1
 80073a2:	d003      	beq.n	80073ac <__lo0bits+0x56>
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	4770      	bx	lr
 80073a8:	2000      	movs	r0, #0
 80073aa:	4770      	bx	lr
 80073ac:	2020      	movs	r0, #32
 80073ae:	4770      	bx	lr

080073b0 <__i2b>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	2101      	movs	r1, #1
 80073b6:	f7ff febd 	bl	8007134 <_Balloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	b928      	cbnz	r0, 80073ca <__i2b+0x1a>
 80073be:	f240 1145 	movw	r1, #325	@ 0x145
 80073c2:	4b04      	ldr	r3, [pc, #16]	@ (80073d4 <__i2b+0x24>)
 80073c4:	4804      	ldr	r0, [pc, #16]	@ (80073d8 <__i2b+0x28>)
 80073c6:	f001 fc1b 	bl	8008c00 <__assert_func>
 80073ca:	2301      	movs	r3, #1
 80073cc:	6144      	str	r4, [r0, #20]
 80073ce:	6103      	str	r3, [r0, #16]
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	08009a77 	.word	0x08009a77
 80073d8:	08009a88 	.word	0x08009a88

080073dc <__multiply>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4614      	mov	r4, r2
 80073e2:	690a      	ldr	r2, [r1, #16]
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	460f      	mov	r7, r1
 80073e8:	429a      	cmp	r2, r3
 80073ea:	bfa2      	ittt	ge
 80073ec:	4623      	movge	r3, r4
 80073ee:	460c      	movge	r4, r1
 80073f0:	461f      	movge	r7, r3
 80073f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073fa:	68a3      	ldr	r3, [r4, #8]
 80073fc:	6861      	ldr	r1, [r4, #4]
 80073fe:	eb0a 0609 	add.w	r6, sl, r9
 8007402:	42b3      	cmp	r3, r6
 8007404:	b085      	sub	sp, #20
 8007406:	bfb8      	it	lt
 8007408:	3101      	addlt	r1, #1
 800740a:	f7ff fe93 	bl	8007134 <_Balloc>
 800740e:	b930      	cbnz	r0, 800741e <__multiply+0x42>
 8007410:	4602      	mov	r2, r0
 8007412:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007416:	4b43      	ldr	r3, [pc, #268]	@ (8007524 <__multiply+0x148>)
 8007418:	4843      	ldr	r0, [pc, #268]	@ (8007528 <__multiply+0x14c>)
 800741a:	f001 fbf1 	bl	8008c00 <__assert_func>
 800741e:	f100 0514 	add.w	r5, r0, #20
 8007422:	462b      	mov	r3, r5
 8007424:	2200      	movs	r2, #0
 8007426:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800742a:	4543      	cmp	r3, r8
 800742c:	d321      	bcc.n	8007472 <__multiply+0x96>
 800742e:	f107 0114 	add.w	r1, r7, #20
 8007432:	f104 0214 	add.w	r2, r4, #20
 8007436:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800743a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800743e:	9302      	str	r3, [sp, #8]
 8007440:	1b13      	subs	r3, r2, r4
 8007442:	3b15      	subs	r3, #21
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	3304      	adds	r3, #4
 800744a:	f104 0715 	add.w	r7, r4, #21
 800744e:	42ba      	cmp	r2, r7
 8007450:	bf38      	it	cc
 8007452:	2304      	movcc	r3, #4
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	9b02      	ldr	r3, [sp, #8]
 8007458:	9103      	str	r1, [sp, #12]
 800745a:	428b      	cmp	r3, r1
 800745c:	d80c      	bhi.n	8007478 <__multiply+0x9c>
 800745e:	2e00      	cmp	r6, #0
 8007460:	dd03      	ble.n	800746a <__multiply+0x8e>
 8007462:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007466:	2b00      	cmp	r3, #0
 8007468:	d05a      	beq.n	8007520 <__multiply+0x144>
 800746a:	6106      	str	r6, [r0, #16]
 800746c:	b005      	add	sp, #20
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	f843 2b04 	str.w	r2, [r3], #4
 8007476:	e7d8      	b.n	800742a <__multiply+0x4e>
 8007478:	f8b1 a000 	ldrh.w	sl, [r1]
 800747c:	f1ba 0f00 	cmp.w	sl, #0
 8007480:	d023      	beq.n	80074ca <__multiply+0xee>
 8007482:	46a9      	mov	r9, r5
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	f104 0e14 	add.w	lr, r4, #20
 800748c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007490:	f8d9 3000 	ldr.w	r3, [r9]
 8007494:	fa1f fb87 	uxth.w	fp, r7
 8007498:	b29b      	uxth	r3, r3
 800749a:	fb0a 330b 	mla	r3, sl, fp, r3
 800749e:	4463      	add	r3, ip
 80074a0:	f8d9 c000 	ldr.w	ip, [r9]
 80074a4:	0c3f      	lsrs	r7, r7, #16
 80074a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074aa:	fb0a c707 	mla	r7, sl, r7, ip
 80074ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074b8:	4572      	cmp	r2, lr
 80074ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074be:	f849 3b04 	str.w	r3, [r9], #4
 80074c2:	d8e3      	bhi.n	800748c <__multiply+0xb0>
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	f845 c003 	str.w	ip, [r5, r3]
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	3104      	adds	r1, #4
 80074ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074d2:	f1b9 0f00 	cmp.w	r9, #0
 80074d6:	d021      	beq.n	800751c <__multiply+0x140>
 80074d8:	46ae      	mov	lr, r5
 80074da:	f04f 0a00 	mov.w	sl, #0
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	f104 0c14 	add.w	ip, r4, #20
 80074e4:	f8bc b000 	ldrh.w	fp, [ip]
 80074e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	fb09 770b 	mla	r7, r9, fp, r7
 80074f2:	4457      	add	r7, sl
 80074f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074f8:	f84e 3b04 	str.w	r3, [lr], #4
 80074fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007504:	f8be 3000 	ldrh.w	r3, [lr]
 8007508:	4562      	cmp	r2, ip
 800750a:	fb09 330a 	mla	r3, r9, sl, r3
 800750e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007516:	d8e5      	bhi.n	80074e4 <__multiply+0x108>
 8007518:	9f01      	ldr	r7, [sp, #4]
 800751a:	51eb      	str	r3, [r5, r7]
 800751c:	3504      	adds	r5, #4
 800751e:	e79a      	b.n	8007456 <__multiply+0x7a>
 8007520:	3e01      	subs	r6, #1
 8007522:	e79c      	b.n	800745e <__multiply+0x82>
 8007524:	08009a77 	.word	0x08009a77
 8007528:	08009a88 	.word	0x08009a88

0800752c <__pow5mult>:
 800752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007530:	4615      	mov	r5, r2
 8007532:	f012 0203 	ands.w	r2, r2, #3
 8007536:	4607      	mov	r7, r0
 8007538:	460e      	mov	r6, r1
 800753a:	d007      	beq.n	800754c <__pow5mult+0x20>
 800753c:	4c25      	ldr	r4, [pc, #148]	@ (80075d4 <__pow5mult+0xa8>)
 800753e:	3a01      	subs	r2, #1
 8007540:	2300      	movs	r3, #0
 8007542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007546:	f7ff fe57 	bl	80071f8 <__multadd>
 800754a:	4606      	mov	r6, r0
 800754c:	10ad      	asrs	r5, r5, #2
 800754e:	d03d      	beq.n	80075cc <__pow5mult+0xa0>
 8007550:	69fc      	ldr	r4, [r7, #28]
 8007552:	b97c      	cbnz	r4, 8007574 <__pow5mult+0x48>
 8007554:	2010      	movs	r0, #16
 8007556:	f7ff fd37 	bl	8006fc8 <malloc>
 800755a:	4602      	mov	r2, r0
 800755c:	61f8      	str	r0, [r7, #28]
 800755e:	b928      	cbnz	r0, 800756c <__pow5mult+0x40>
 8007560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007564:	4b1c      	ldr	r3, [pc, #112]	@ (80075d8 <__pow5mult+0xac>)
 8007566:	481d      	ldr	r0, [pc, #116]	@ (80075dc <__pow5mult+0xb0>)
 8007568:	f001 fb4a 	bl	8008c00 <__assert_func>
 800756c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007570:	6004      	str	r4, [r0, #0]
 8007572:	60c4      	str	r4, [r0, #12]
 8007574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800757c:	b94c      	cbnz	r4, 8007592 <__pow5mult+0x66>
 800757e:	f240 2171 	movw	r1, #625	@ 0x271
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff14 	bl	80073b0 <__i2b>
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007590:	6003      	str	r3, [r0, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	07eb      	lsls	r3, r5, #31
 8007598:	d50a      	bpl.n	80075b0 <__pow5mult+0x84>
 800759a:	4631      	mov	r1, r6
 800759c:	4622      	mov	r2, r4
 800759e:	4638      	mov	r0, r7
 80075a0:	f7ff ff1c 	bl	80073dc <__multiply>
 80075a4:	4680      	mov	r8, r0
 80075a6:	4631      	mov	r1, r6
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff fe03 	bl	80071b4 <_Bfree>
 80075ae:	4646      	mov	r6, r8
 80075b0:	106d      	asrs	r5, r5, #1
 80075b2:	d00b      	beq.n	80075cc <__pow5mult+0xa0>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	b938      	cbnz	r0, 80075c8 <__pow5mult+0x9c>
 80075b8:	4622      	mov	r2, r4
 80075ba:	4621      	mov	r1, r4
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ff0d 	bl	80073dc <__multiply>
 80075c2:	6020      	str	r0, [r4, #0]
 80075c4:	f8c0 9000 	str.w	r9, [r0]
 80075c8:	4604      	mov	r4, r0
 80075ca:	e7e4      	b.n	8007596 <__pow5mult+0x6a>
 80075cc:	4630      	mov	r0, r6
 80075ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d2:	bf00      	nop
 80075d4:	08009ae4 	.word	0x08009ae4
 80075d8:	08009a08 	.word	0x08009a08
 80075dc:	08009a88 	.word	0x08009a88

080075e0 <__lshift>:
 80075e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	4607      	mov	r7, r0
 80075e8:	4691      	mov	r9, r2
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	6849      	ldr	r1, [r1, #4]
 80075ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075f8:	f108 0601 	add.w	r6, r8, #1
 80075fc:	42b3      	cmp	r3, r6
 80075fe:	db0b      	blt.n	8007618 <__lshift+0x38>
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff fd97 	bl	8007134 <_Balloc>
 8007606:	4605      	mov	r5, r0
 8007608:	b948      	cbnz	r0, 800761e <__lshift+0x3e>
 800760a:	4602      	mov	r2, r0
 800760c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <__lshift+0xd0>)
 8007612:	4828      	ldr	r0, [pc, #160]	@ (80076b4 <__lshift+0xd4>)
 8007614:	f001 faf4 	bl	8008c00 <__assert_func>
 8007618:	3101      	adds	r1, #1
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	e7ee      	b.n	80075fc <__lshift+0x1c>
 800761e:	2300      	movs	r3, #0
 8007620:	f100 0114 	add.w	r1, r0, #20
 8007624:	f100 0210 	add.w	r2, r0, #16
 8007628:	4618      	mov	r0, r3
 800762a:	4553      	cmp	r3, sl
 800762c:	db33      	blt.n	8007696 <__lshift+0xb6>
 800762e:	6920      	ldr	r0, [r4, #16]
 8007630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007634:	f104 0314 	add.w	r3, r4, #20
 8007638:	f019 091f 	ands.w	r9, r9, #31
 800763c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007644:	d02b      	beq.n	800769e <__lshift+0xbe>
 8007646:	468a      	mov	sl, r1
 8007648:	2200      	movs	r2, #0
 800764a:	f1c9 0e20 	rsb	lr, r9, #32
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	fa00 f009 	lsl.w	r0, r0, r9
 8007654:	4310      	orrs	r0, r2
 8007656:	f84a 0b04 	str.w	r0, [sl], #4
 800765a:	f853 2b04 	ldr.w	r2, [r3], #4
 800765e:	459c      	cmp	ip, r3
 8007660:	fa22 f20e 	lsr.w	r2, r2, lr
 8007664:	d8f3      	bhi.n	800764e <__lshift+0x6e>
 8007666:	ebac 0304 	sub.w	r3, ip, r4
 800766a:	3b15      	subs	r3, #21
 800766c:	f023 0303 	bic.w	r3, r3, #3
 8007670:	3304      	adds	r3, #4
 8007672:	f104 0015 	add.w	r0, r4, #21
 8007676:	4584      	cmp	ip, r0
 8007678:	bf38      	it	cc
 800767a:	2304      	movcc	r3, #4
 800767c:	50ca      	str	r2, [r1, r3]
 800767e:	b10a      	cbz	r2, 8007684 <__lshift+0xa4>
 8007680:	f108 0602 	add.w	r6, r8, #2
 8007684:	3e01      	subs	r6, #1
 8007686:	4638      	mov	r0, r7
 8007688:	4621      	mov	r1, r4
 800768a:	612e      	str	r6, [r5, #16]
 800768c:	f7ff fd92 	bl	80071b4 <_Bfree>
 8007690:	4628      	mov	r0, r5
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	f842 0f04 	str.w	r0, [r2, #4]!
 800769a:	3301      	adds	r3, #1
 800769c:	e7c5      	b.n	800762a <__lshift+0x4a>
 800769e:	3904      	subs	r1, #4
 80076a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a4:	459c      	cmp	ip, r3
 80076a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80076aa:	d8f9      	bhi.n	80076a0 <__lshift+0xc0>
 80076ac:	e7ea      	b.n	8007684 <__lshift+0xa4>
 80076ae:	bf00      	nop
 80076b0:	08009a77 	.word	0x08009a77
 80076b4:	08009a88 	.word	0x08009a88

080076b8 <__mcmp>:
 80076b8:	4603      	mov	r3, r0
 80076ba:	690a      	ldr	r2, [r1, #16]
 80076bc:	6900      	ldr	r0, [r0, #16]
 80076be:	b530      	push	{r4, r5, lr}
 80076c0:	1a80      	subs	r0, r0, r2
 80076c2:	d10e      	bne.n	80076e2 <__mcmp+0x2a>
 80076c4:	3314      	adds	r3, #20
 80076c6:	3114      	adds	r1, #20
 80076c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076d8:	4295      	cmp	r5, r2
 80076da:	d003      	beq.n	80076e4 <__mcmp+0x2c>
 80076dc:	d205      	bcs.n	80076ea <__mcmp+0x32>
 80076de:	f04f 30ff 	mov.w	r0, #4294967295
 80076e2:	bd30      	pop	{r4, r5, pc}
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	d3f3      	bcc.n	80076d0 <__mcmp+0x18>
 80076e8:	e7fb      	b.n	80076e2 <__mcmp+0x2a>
 80076ea:	2001      	movs	r0, #1
 80076ec:	e7f9      	b.n	80076e2 <__mcmp+0x2a>
	...

080076f0 <__mdiff>:
 80076f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4689      	mov	r9, r1
 80076f6:	4606      	mov	r6, r0
 80076f8:	4611      	mov	r1, r2
 80076fa:	4648      	mov	r0, r9
 80076fc:	4614      	mov	r4, r2
 80076fe:	f7ff ffdb 	bl	80076b8 <__mcmp>
 8007702:	1e05      	subs	r5, r0, #0
 8007704:	d112      	bne.n	800772c <__mdiff+0x3c>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff fd13 	bl	8007134 <_Balloc>
 800770e:	4602      	mov	r2, r0
 8007710:	b928      	cbnz	r0, 800771e <__mdiff+0x2e>
 8007712:	f240 2137 	movw	r1, #567	@ 0x237
 8007716:	4b3e      	ldr	r3, [pc, #248]	@ (8007810 <__mdiff+0x120>)
 8007718:	483e      	ldr	r0, [pc, #248]	@ (8007814 <__mdiff+0x124>)
 800771a:	f001 fa71 	bl	8008c00 <__assert_func>
 800771e:	2301      	movs	r3, #1
 8007720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007724:	4610      	mov	r0, r2
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	bfbc      	itt	lt
 800772e:	464b      	movlt	r3, r9
 8007730:	46a1      	movlt	r9, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007738:	bfba      	itte	lt
 800773a:	461c      	movlt	r4, r3
 800773c:	2501      	movlt	r5, #1
 800773e:	2500      	movge	r5, #0
 8007740:	f7ff fcf8 	bl	8007134 <_Balloc>
 8007744:	4602      	mov	r2, r0
 8007746:	b918      	cbnz	r0, 8007750 <__mdiff+0x60>
 8007748:	f240 2145 	movw	r1, #581	@ 0x245
 800774c:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <__mdiff+0x120>)
 800774e:	e7e3      	b.n	8007718 <__mdiff+0x28>
 8007750:	f100 0b14 	add.w	fp, r0, #20
 8007754:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007758:	f109 0310 	add.w	r3, r9, #16
 800775c:	60c5      	str	r5, [r0, #12]
 800775e:	f04f 0c00 	mov.w	ip, #0
 8007762:	f109 0514 	add.w	r5, r9, #20
 8007766:	46d9      	mov	r9, fp
 8007768:	6926      	ldr	r6, [r4, #16]
 800776a:	f104 0e14 	add.w	lr, r4, #20
 800776e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007772:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	9b01      	ldr	r3, [sp, #4]
 800777a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800777e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007782:	b281      	uxth	r1, r0
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	fa1f f38a 	uxth.w	r3, sl
 800778a:	1a5b      	subs	r3, r3, r1
 800778c:	0c00      	lsrs	r0, r0, #16
 800778e:	4463      	add	r3, ip
 8007790:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007794:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800779e:	4576      	cmp	r6, lr
 80077a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a4:	f849 3b04 	str.w	r3, [r9], #4
 80077a8:	d8e6      	bhi.n	8007778 <__mdiff+0x88>
 80077aa:	1b33      	subs	r3, r6, r4
 80077ac:	3b15      	subs	r3, #21
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	3415      	adds	r4, #21
 80077b4:	3304      	adds	r3, #4
 80077b6:	42a6      	cmp	r6, r4
 80077b8:	bf38      	it	cc
 80077ba:	2304      	movcc	r3, #4
 80077bc:	441d      	add	r5, r3
 80077be:	445b      	add	r3, fp
 80077c0:	461e      	mov	r6, r3
 80077c2:	462c      	mov	r4, r5
 80077c4:	4544      	cmp	r4, r8
 80077c6:	d30e      	bcc.n	80077e6 <__mdiff+0xf6>
 80077c8:	f108 0103 	add.w	r1, r8, #3
 80077cc:	1b49      	subs	r1, r1, r5
 80077ce:	f021 0103 	bic.w	r1, r1, #3
 80077d2:	3d03      	subs	r5, #3
 80077d4:	45a8      	cmp	r8, r5
 80077d6:	bf38      	it	cc
 80077d8:	2100      	movcc	r1, #0
 80077da:	440b      	add	r3, r1
 80077dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077e0:	b199      	cbz	r1, 800780a <__mdiff+0x11a>
 80077e2:	6117      	str	r7, [r2, #16]
 80077e4:	e79e      	b.n	8007724 <__mdiff+0x34>
 80077e6:	46e6      	mov	lr, ip
 80077e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80077ec:	fa1f fc81 	uxth.w	ip, r1
 80077f0:	44f4      	add	ip, lr
 80077f2:	0c08      	lsrs	r0, r1, #16
 80077f4:	4471      	add	r1, lr
 80077f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077fa:	b289      	uxth	r1, r1
 80077fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007804:	f846 1b04 	str.w	r1, [r6], #4
 8007808:	e7dc      	b.n	80077c4 <__mdiff+0xd4>
 800780a:	3f01      	subs	r7, #1
 800780c:	e7e6      	b.n	80077dc <__mdiff+0xec>
 800780e:	bf00      	nop
 8007810:	08009a77 	.word	0x08009a77
 8007814:	08009a88 	.word	0x08009a88

08007818 <__ulp>:
 8007818:	4b0e      	ldr	r3, [pc, #56]	@ (8007854 <__ulp+0x3c>)
 800781a:	400b      	ands	r3, r1
 800781c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007820:	2b00      	cmp	r3, #0
 8007822:	dc08      	bgt.n	8007836 <__ulp+0x1e>
 8007824:	425b      	negs	r3, r3
 8007826:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800782a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800782e:	da04      	bge.n	800783a <__ulp+0x22>
 8007830:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007834:	4113      	asrs	r3, r2
 8007836:	2200      	movs	r2, #0
 8007838:	e008      	b.n	800784c <__ulp+0x34>
 800783a:	f1a2 0314 	sub.w	r3, r2, #20
 800783e:	2b1e      	cmp	r3, #30
 8007840:	bfd6      	itet	le
 8007842:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007846:	2201      	movgt	r2, #1
 8007848:	40da      	lsrle	r2, r3
 800784a:	2300      	movs	r3, #0
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	7ff00000 	.word	0x7ff00000

08007858 <__b2d>:
 8007858:	6902      	ldr	r2, [r0, #16]
 800785a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785c:	f100 0614 	add.w	r6, r0, #20
 8007860:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007864:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007868:	4f1e      	ldr	r7, [pc, #120]	@ (80078e4 <__b2d+0x8c>)
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff fd54 	bl	8007318 <__hi0bits>
 8007870:	4603      	mov	r3, r0
 8007872:	f1c0 0020 	rsb	r0, r0, #32
 8007876:	2b0a      	cmp	r3, #10
 8007878:	f1a2 0504 	sub.w	r5, r2, #4
 800787c:	6008      	str	r0, [r1, #0]
 800787e:	dc12      	bgt.n	80078a6 <__b2d+0x4e>
 8007880:	42ae      	cmp	r6, r5
 8007882:	bf2c      	ite	cs
 8007884:	2200      	movcs	r2, #0
 8007886:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800788a:	f1c3 0c0b 	rsb	ip, r3, #11
 800788e:	3315      	adds	r3, #21
 8007890:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007894:	fa04 f303 	lsl.w	r3, r4, r3
 8007898:	fa22 f20c 	lsr.w	r2, r2, ip
 800789c:	ea4e 0107 	orr.w	r1, lr, r7
 80078a0:	431a      	orrs	r2, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a6:	42ae      	cmp	r6, r5
 80078a8:	bf36      	itet	cc
 80078aa:	f1a2 0508 	subcc.w	r5, r2, #8
 80078ae:	2200      	movcs	r2, #0
 80078b0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80078b4:	3b0b      	subs	r3, #11
 80078b6:	d012      	beq.n	80078de <__b2d+0x86>
 80078b8:	f1c3 0720 	rsb	r7, r3, #32
 80078bc:	fa22 f107 	lsr.w	r1, r2, r7
 80078c0:	409c      	lsls	r4, r3
 80078c2:	430c      	orrs	r4, r1
 80078c4:	42b5      	cmp	r5, r6
 80078c6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80078ca:	bf94      	ite	ls
 80078cc:	2400      	movls	r4, #0
 80078ce:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80078d2:	409a      	lsls	r2, r3
 80078d4:	40fc      	lsrs	r4, r7
 80078d6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80078da:	4322      	orrs	r2, r4
 80078dc:	e7e1      	b.n	80078a2 <__b2d+0x4a>
 80078de:	ea44 0107 	orr.w	r1, r4, r7
 80078e2:	e7de      	b.n	80078a2 <__b2d+0x4a>
 80078e4:	3ff00000 	.word	0x3ff00000

080078e8 <__d2b>:
 80078e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80078ec:	2101      	movs	r1, #1
 80078ee:	4690      	mov	r8, r2
 80078f0:	4699      	mov	r9, r3
 80078f2:	9e08      	ldr	r6, [sp, #32]
 80078f4:	f7ff fc1e 	bl	8007134 <_Balloc>
 80078f8:	4604      	mov	r4, r0
 80078fa:	b930      	cbnz	r0, 800790a <__d2b+0x22>
 80078fc:	4602      	mov	r2, r0
 80078fe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007902:	4b23      	ldr	r3, [pc, #140]	@ (8007990 <__d2b+0xa8>)
 8007904:	4823      	ldr	r0, [pc, #140]	@ (8007994 <__d2b+0xac>)
 8007906:	f001 f97b 	bl	8008c00 <__assert_func>
 800790a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800790e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007912:	b10d      	cbz	r5, 8007918 <__d2b+0x30>
 8007914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f1b8 0300 	subs.w	r3, r8, #0
 800791e:	d024      	beq.n	800796a <__d2b+0x82>
 8007920:	4668      	mov	r0, sp
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f7ff fd17 	bl	8007356 <__lo0bits>
 8007928:	e9dd 1200 	ldrd	r1, r2, [sp]
 800792c:	b1d8      	cbz	r0, 8007966 <__d2b+0x7e>
 800792e:	f1c0 0320 	rsb	r3, r0, #32
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	430b      	orrs	r3, r1
 8007938:	40c2      	lsrs	r2, r0
 800793a:	6163      	str	r3, [r4, #20]
 800793c:	9201      	str	r2, [sp, #4]
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf0c      	ite	eq
 8007944:	2201      	moveq	r2, #1
 8007946:	2202      	movne	r2, #2
 8007948:	61a3      	str	r3, [r4, #24]
 800794a:	6122      	str	r2, [r4, #16]
 800794c:	b1ad      	cbz	r5, 800797a <__d2b+0x92>
 800794e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007952:	4405      	add	r5, r0
 8007954:	6035      	str	r5, [r6, #0]
 8007956:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800795a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795c:	6018      	str	r0, [r3, #0]
 800795e:	4620      	mov	r0, r4
 8007960:	b002      	add	sp, #8
 8007962:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007966:	6161      	str	r1, [r4, #20]
 8007968:	e7e9      	b.n	800793e <__d2b+0x56>
 800796a:	a801      	add	r0, sp, #4
 800796c:	f7ff fcf3 	bl	8007356 <__lo0bits>
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	6163      	str	r3, [r4, #20]
 8007976:	3020      	adds	r0, #32
 8007978:	e7e7      	b.n	800794a <__d2b+0x62>
 800797a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800797e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007982:	6030      	str	r0, [r6, #0]
 8007984:	6918      	ldr	r0, [r3, #16]
 8007986:	f7ff fcc7 	bl	8007318 <__hi0bits>
 800798a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800798e:	e7e4      	b.n	800795a <__d2b+0x72>
 8007990:	08009a77 	.word	0x08009a77
 8007994:	08009a88 	.word	0x08009a88

08007998 <__ratio>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	b085      	sub	sp, #20
 800799e:	e9cd 1000 	strd	r1, r0, [sp]
 80079a2:	a902      	add	r1, sp, #8
 80079a4:	f7ff ff58 	bl	8007858 <__b2d>
 80079a8:	468b      	mov	fp, r1
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	9800      	ldr	r0, [sp, #0]
 80079b0:	a903      	add	r1, sp, #12
 80079b2:	f7ff ff51 	bl	8007858 <__b2d>
 80079b6:	460d      	mov	r5, r1
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	4689      	mov	r9, r1
 80079bc:	6919      	ldr	r1, [r3, #16]
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	4604      	mov	r4, r0
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	4630      	mov	r0, r6
 80079c6:	1ac9      	subs	r1, r1, r3
 80079c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bfcd      	iteet	gt
 80079d6:	463a      	movgt	r2, r7
 80079d8:	462a      	movle	r2, r5
 80079da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80079e2:	bfd8      	it	le
 80079e4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80079e8:	464b      	mov	r3, r9
 80079ea:	4622      	mov	r2, r4
 80079ec:	4659      	mov	r1, fp
 80079ee:	f7f8 fe9d 	bl	800072c <__aeabi_ddiv>
 80079f2:	b005      	add	sp, #20
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079f8 <__copybits>:
 80079f8:	3901      	subs	r1, #1
 80079fa:	b570      	push	{r4, r5, r6, lr}
 80079fc:	1149      	asrs	r1, r1, #5
 80079fe:	6914      	ldr	r4, [r2, #16]
 8007a00:	3101      	adds	r1, #1
 8007a02:	f102 0314 	add.w	r3, r2, #20
 8007a06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a0e:	1f05      	subs	r5, r0, #4
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d30c      	bcc.n	8007a2e <__copybits+0x36>
 8007a14:	1aa3      	subs	r3, r4, r2
 8007a16:	3b11      	subs	r3, #17
 8007a18:	f023 0303 	bic.w	r3, r3, #3
 8007a1c:	3211      	adds	r2, #17
 8007a1e:	42a2      	cmp	r2, r4
 8007a20:	bf88      	it	hi
 8007a22:	2300      	movhi	r3, #0
 8007a24:	4418      	add	r0, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	4288      	cmp	r0, r1
 8007a2a:	d305      	bcc.n	8007a38 <__copybits+0x40>
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}
 8007a2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a32:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a36:	e7eb      	b.n	8007a10 <__copybits+0x18>
 8007a38:	f840 3b04 	str.w	r3, [r0], #4
 8007a3c:	e7f4      	b.n	8007a28 <__copybits+0x30>

08007a3e <__any_on>:
 8007a3e:	f100 0214 	add.w	r2, r0, #20
 8007a42:	6900      	ldr	r0, [r0, #16]
 8007a44:	114b      	asrs	r3, r1, #5
 8007a46:	4298      	cmp	r0, r3
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	db11      	blt.n	8007a70 <__any_on+0x32>
 8007a4c:	dd0a      	ble.n	8007a64 <__any_on+0x26>
 8007a4e:	f011 011f 	ands.w	r1, r1, #31
 8007a52:	d007      	beq.n	8007a64 <__any_on+0x26>
 8007a54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a58:	fa24 f001 	lsr.w	r0, r4, r1
 8007a5c:	fa00 f101 	lsl.w	r1, r0, r1
 8007a60:	428c      	cmp	r4, r1
 8007a62:	d10b      	bne.n	8007a7c <__any_on+0x3e>
 8007a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d803      	bhi.n	8007a74 <__any_on+0x36>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	bd10      	pop	{r4, pc}
 8007a70:	4603      	mov	r3, r0
 8007a72:	e7f7      	b.n	8007a64 <__any_on+0x26>
 8007a74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	d0f5      	beq.n	8007a68 <__any_on+0x2a>
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	e7f6      	b.n	8007a6e <__any_on+0x30>

08007a80 <sulp>:
 8007a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a84:	460f      	mov	r7, r1
 8007a86:	4690      	mov	r8, r2
 8007a88:	f7ff fec6 	bl	8007818 <__ulp>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	f1b8 0f00 	cmp.w	r8, #0
 8007a94:	d011      	beq.n	8007aba <sulp+0x3a>
 8007a96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd0b      	ble.n	8007aba <sulp+0x3a>
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	051b      	lsls	r3, r3, #20
 8007aa6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007aaa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007aae:	4622      	mov	r2, r4
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	f7f8 fd11 	bl	80004d8 <__aeabi_dmul>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	4620      	mov	r0, r4
 8007abc:	4629      	mov	r1, r5
 8007abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac2:	0000      	movs	r0, r0
 8007ac4:	0000      	movs	r0, r0
	...

08007ac8 <_strtod_l>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	b09f      	sub	sp, #124	@ 0x7c
 8007ace:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007ad6:	f04f 0a00 	mov.w	sl, #0
 8007ada:	f04f 0b00 	mov.w	fp, #0
 8007ade:	460a      	mov	r2, r1
 8007ae0:	9005      	str	r0, [sp, #20]
 8007ae2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ae4:	7811      	ldrb	r1, [r2, #0]
 8007ae6:	292b      	cmp	r1, #43	@ 0x2b
 8007ae8:	d048      	beq.n	8007b7c <_strtod_l+0xb4>
 8007aea:	d836      	bhi.n	8007b5a <_strtod_l+0x92>
 8007aec:	290d      	cmp	r1, #13
 8007aee:	d830      	bhi.n	8007b52 <_strtod_l+0x8a>
 8007af0:	2908      	cmp	r1, #8
 8007af2:	d830      	bhi.n	8007b56 <_strtod_l+0x8e>
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d039      	beq.n	8007b6c <_strtod_l+0xa4>
 8007af8:	2200      	movs	r2, #0
 8007afa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007afc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007afe:	782a      	ldrb	r2, [r5, #0]
 8007b00:	2a30      	cmp	r2, #48	@ 0x30
 8007b02:	f040 80b1 	bne.w	8007c68 <_strtod_l+0x1a0>
 8007b06:	786a      	ldrb	r2, [r5, #1]
 8007b08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b0c:	2a58      	cmp	r2, #88	@ 0x58
 8007b0e:	d16c      	bne.n	8007bea <_strtod_l+0x122>
 8007b10:	9302      	str	r3, [sp, #8]
 8007b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b14:	4a8e      	ldr	r2, [pc, #568]	@ (8007d50 <_strtod_l+0x288>)
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	ab1a      	add	r3, sp, #104	@ 0x68
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	9805      	ldr	r0, [sp, #20]
 8007b1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b20:	a919      	add	r1, sp, #100	@ 0x64
 8007b22:	f001 f907 	bl	8008d34 <__gethex>
 8007b26:	f010 060f 	ands.w	r6, r0, #15
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	d005      	beq.n	8007b3a <_strtod_l+0x72>
 8007b2e:	2e06      	cmp	r6, #6
 8007b30:	d126      	bne.n	8007b80 <_strtod_l+0xb8>
 8007b32:	2300      	movs	r3, #0
 8007b34:	3501      	adds	r5, #1
 8007b36:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8584 	bne.w	800864a <_strtod_l+0xb82>
 8007b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b44:	b1bb      	cbz	r3, 8007b76 <_strtod_l+0xae>
 8007b46:	4650      	mov	r0, sl
 8007b48:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007b4c:	b01f      	add	sp, #124	@ 0x7c
 8007b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b52:	2920      	cmp	r1, #32
 8007b54:	d1d0      	bne.n	8007af8 <_strtod_l+0x30>
 8007b56:	3201      	adds	r2, #1
 8007b58:	e7c3      	b.n	8007ae2 <_strtod_l+0x1a>
 8007b5a:	292d      	cmp	r1, #45	@ 0x2d
 8007b5c:	d1cc      	bne.n	8007af8 <_strtod_l+0x30>
 8007b5e:	2101      	movs	r1, #1
 8007b60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b62:	1c51      	adds	r1, r2, #1
 8007b64:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b66:	7852      	ldrb	r2, [r2, #1]
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	d1c7      	bne.n	8007afc <_strtod_l+0x34>
 8007b6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 8568 	bne.w	8008646 <_strtod_l+0xb7e>
 8007b76:	4650      	mov	r0, sl
 8007b78:	4659      	mov	r1, fp
 8007b7a:	e7e7      	b.n	8007b4c <_strtod_l+0x84>
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	e7ef      	b.n	8007b60 <_strtod_l+0x98>
 8007b80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b82:	b13a      	cbz	r2, 8007b94 <_strtod_l+0xcc>
 8007b84:	2135      	movs	r1, #53	@ 0x35
 8007b86:	a81c      	add	r0, sp, #112	@ 0x70
 8007b88:	f7ff ff36 	bl	80079f8 <__copybits>
 8007b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b8e:	9805      	ldr	r0, [sp, #20]
 8007b90:	f7ff fb10 	bl	80071b4 <_Bfree>
 8007b94:	3e01      	subs	r6, #1
 8007b96:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b98:	2e04      	cmp	r6, #4
 8007b9a:	d806      	bhi.n	8007baa <_strtod_l+0xe2>
 8007b9c:	e8df f006 	tbb	[pc, r6]
 8007ba0:	201d0314 	.word	0x201d0314
 8007ba4:	14          	.byte	0x14
 8007ba5:	00          	.byte	0x00
 8007ba6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007baa:	05e1      	lsls	r1, r4, #23
 8007bac:	bf48      	it	mi
 8007bae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007bb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bb6:	0d1b      	lsrs	r3, r3, #20
 8007bb8:	051b      	lsls	r3, r3, #20
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1bd      	bne.n	8007b3a <_strtod_l+0x72>
 8007bbe:	f7fe fb1b 	bl	80061f8 <__errno>
 8007bc2:	2322      	movs	r3, #34	@ 0x22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	e7b8      	b.n	8007b3a <_strtod_l+0x72>
 8007bc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007bcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007bd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bd4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bd8:	e7e7      	b.n	8007baa <_strtod_l+0xe2>
 8007bda:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007d54 <_strtod_l+0x28c>
 8007bde:	e7e4      	b.n	8007baa <_strtod_l+0xe2>
 8007be0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007be4:	f04f 3aff 	mov.w	sl, #4294967295
 8007be8:	e7df      	b.n	8007baa <_strtod_l+0xe2>
 8007bea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bf0:	785b      	ldrb	r3, [r3, #1]
 8007bf2:	2b30      	cmp	r3, #48	@ 0x30
 8007bf4:	d0f9      	beq.n	8007bea <_strtod_l+0x122>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d09f      	beq.n	8007b3a <_strtod_l+0x72>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c00:	220a      	movs	r2, #10
 8007c02:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c04:	2300      	movs	r3, #0
 8007c06:	461f      	mov	r7, r3
 8007c08:	9308      	str	r3, [sp, #32]
 8007c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c0c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c0e:	7805      	ldrb	r5, [r0, #0]
 8007c10:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007c14:	b2d9      	uxtb	r1, r3
 8007c16:	2909      	cmp	r1, #9
 8007c18:	d928      	bls.n	8007c6c <_strtod_l+0x1a4>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	494e      	ldr	r1, [pc, #312]	@ (8007d58 <_strtod_l+0x290>)
 8007c1e:	f000 ffc7 	bl	8008bb0 <strncmp>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d032      	beq.n	8007c8c <_strtod_l+0x1c4>
 8007c26:	2000      	movs	r0, #0
 8007c28:	462a      	mov	r2, r5
 8007c2a:	4681      	mov	r9, r0
 8007c2c:	463d      	mov	r5, r7
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2a65      	cmp	r2, #101	@ 0x65
 8007c32:	d001      	beq.n	8007c38 <_strtod_l+0x170>
 8007c34:	2a45      	cmp	r2, #69	@ 0x45
 8007c36:	d114      	bne.n	8007c62 <_strtod_l+0x19a>
 8007c38:	b91d      	cbnz	r5, 8007c42 <_strtod_l+0x17a>
 8007c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c3c:	4302      	orrs	r2, r0
 8007c3e:	d095      	beq.n	8007b6c <_strtod_l+0xa4>
 8007c40:	2500      	movs	r5, #0
 8007c42:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c44:	1c62      	adds	r2, r4, #1
 8007c46:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c48:	7862      	ldrb	r2, [r4, #1]
 8007c4a:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c4c:	d077      	beq.n	8007d3e <_strtod_l+0x276>
 8007c4e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c50:	d07b      	beq.n	8007d4a <_strtod_l+0x282>
 8007c52:	f04f 0c00 	mov.w	ip, #0
 8007c56:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c5a:	2909      	cmp	r1, #9
 8007c5c:	f240 8082 	bls.w	8007d64 <_strtod_l+0x29c>
 8007c60:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c62:	f04f 0800 	mov.w	r8, #0
 8007c66:	e0a2      	b.n	8007dae <_strtod_l+0x2e6>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e7c7      	b.n	8007bfc <_strtod_l+0x134>
 8007c6c:	2f08      	cmp	r7, #8
 8007c6e:	bfd5      	itete	le
 8007c70:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c72:	9908      	ldrgt	r1, [sp, #32]
 8007c74:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c78:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c7c:	f100 0001 	add.w	r0, r0, #1
 8007c80:	bfd4      	ite	le
 8007c82:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c84:	9308      	strgt	r3, [sp, #32]
 8007c86:	3701      	adds	r7, #1
 8007c88:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c8a:	e7bf      	b.n	8007c0c <_strtod_l+0x144>
 8007c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c92:	785a      	ldrb	r2, [r3, #1]
 8007c94:	b37f      	cbz	r7, 8007cf6 <_strtod_l+0x22e>
 8007c96:	4681      	mov	r9, r0
 8007c98:	463d      	mov	r5, r7
 8007c9a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	d912      	bls.n	8007cc8 <_strtod_l+0x200>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e7c4      	b.n	8007c30 <_strtod_l+0x168>
 8007ca6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ca8:	3001      	adds	r0, #1
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cae:	785a      	ldrb	r2, [r3, #1]
 8007cb0:	2a30      	cmp	r2, #48	@ 0x30
 8007cb2:	d0f8      	beq.n	8007ca6 <_strtod_l+0x1de>
 8007cb4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	f200 84cb 	bhi.w	8008654 <_strtod_l+0xb8c>
 8007cbe:	4681      	mov	r9, r0
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cc6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cc8:	3a30      	subs	r2, #48	@ 0x30
 8007cca:	f100 0301 	add.w	r3, r0, #1
 8007cce:	d02a      	beq.n	8007d26 <_strtod_l+0x25e>
 8007cd0:	4499      	add	r9, r3
 8007cd2:	210a      	movs	r1, #10
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	eb00 0c05 	add.w	ip, r0, r5
 8007cda:	4563      	cmp	r3, ip
 8007cdc:	d10d      	bne.n	8007cfa <_strtod_l+0x232>
 8007cde:	1c69      	adds	r1, r5, #1
 8007ce0:	4401      	add	r1, r0
 8007ce2:	4428      	add	r0, r5
 8007ce4:	2808      	cmp	r0, #8
 8007ce6:	dc16      	bgt.n	8007d16 <_strtod_l+0x24e>
 8007ce8:	230a      	movs	r3, #10
 8007cea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cec:	fb03 2300 	mla	r3, r3, r0, r2
 8007cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e018      	b.n	8007d28 <_strtod_l+0x260>
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	e7da      	b.n	8007cb0 <_strtod_l+0x1e8>
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	f103 0301 	add.w	r3, r3, #1
 8007d00:	dc03      	bgt.n	8007d0a <_strtod_l+0x242>
 8007d02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d04:	434e      	muls	r6, r1
 8007d06:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d08:	e7e7      	b.n	8007cda <_strtod_l+0x212>
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	bfde      	ittt	le
 8007d0e:	9e08      	ldrle	r6, [sp, #32]
 8007d10:	434e      	mulle	r6, r1
 8007d12:	9608      	strle	r6, [sp, #32]
 8007d14:	e7e1      	b.n	8007cda <_strtod_l+0x212>
 8007d16:	280f      	cmp	r0, #15
 8007d18:	dceb      	bgt.n	8007cf2 <_strtod_l+0x22a>
 8007d1a:	230a      	movs	r3, #10
 8007d1c:	9808      	ldr	r0, [sp, #32]
 8007d1e:	fb03 2300 	mla	r3, r3, r0, r2
 8007d22:	9308      	str	r3, [sp, #32]
 8007d24:	e7e5      	b.n	8007cf2 <_strtod_l+0x22a>
 8007d26:	4629      	mov	r1, r5
 8007d28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	1c50      	adds	r0, r2, #1
 8007d2e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d30:	7852      	ldrb	r2, [r2, #1]
 8007d32:	4618      	mov	r0, r3
 8007d34:	e7b1      	b.n	8007c9a <_strtod_l+0x1d2>
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e77d      	b.n	8007c3a <_strtod_l+0x172>
 8007d3e:	f04f 0c00 	mov.w	ip, #0
 8007d42:	1ca2      	adds	r2, r4, #2
 8007d44:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d46:	78a2      	ldrb	r2, [r4, #2]
 8007d48:	e785      	b.n	8007c56 <_strtod_l+0x18e>
 8007d4a:	f04f 0c01 	mov.w	ip, #1
 8007d4e:	e7f8      	b.n	8007d42 <_strtod_l+0x27a>
 8007d50:	08009bf8 	.word	0x08009bf8
 8007d54:	7ff00000 	.word	0x7ff00000
 8007d58:	08009be0 	.word	0x08009be0
 8007d5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d5e:	1c51      	adds	r1, r2, #1
 8007d60:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d62:	7852      	ldrb	r2, [r2, #1]
 8007d64:	2a30      	cmp	r2, #48	@ 0x30
 8007d66:	d0f9      	beq.n	8007d5c <_strtod_l+0x294>
 8007d68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d6c:	2908      	cmp	r1, #8
 8007d6e:	f63f af78 	bhi.w	8007c62 <_strtod_l+0x19a>
 8007d72:	f04f 080a 	mov.w	r8, #10
 8007d76:	3a30      	subs	r2, #48	@ 0x30
 8007d78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d80:	1c56      	adds	r6, r2, #1
 8007d82:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d84:	7852      	ldrb	r2, [r2, #1]
 8007d86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d8a:	f1be 0f09 	cmp.w	lr, #9
 8007d8e:	d939      	bls.n	8007e04 <_strtod_l+0x33c>
 8007d90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d96:	1a76      	subs	r6, r6, r1
 8007d98:	2e08      	cmp	r6, #8
 8007d9a:	dc03      	bgt.n	8007da4 <_strtod_l+0x2dc>
 8007d9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d9e:	4588      	cmp	r8, r1
 8007da0:	bfa8      	it	ge
 8007da2:	4688      	movge	r8, r1
 8007da4:	f1bc 0f00 	cmp.w	ip, #0
 8007da8:	d001      	beq.n	8007dae <_strtod_l+0x2e6>
 8007daa:	f1c8 0800 	rsb	r8, r8, #0
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	d14e      	bne.n	8007e50 <_strtod_l+0x388>
 8007db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007db4:	4308      	orrs	r0, r1
 8007db6:	f47f aec0 	bne.w	8007b3a <_strtod_l+0x72>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f47f aed6 	bne.w	8007b6c <_strtod_l+0xa4>
 8007dc0:	2a69      	cmp	r2, #105	@ 0x69
 8007dc2:	d028      	beq.n	8007e16 <_strtod_l+0x34e>
 8007dc4:	dc25      	bgt.n	8007e12 <_strtod_l+0x34a>
 8007dc6:	2a49      	cmp	r2, #73	@ 0x49
 8007dc8:	d025      	beq.n	8007e16 <_strtod_l+0x34e>
 8007dca:	2a4e      	cmp	r2, #78	@ 0x4e
 8007dcc:	f47f aece 	bne.w	8007b6c <_strtod_l+0xa4>
 8007dd0:	499a      	ldr	r1, [pc, #616]	@ (800803c <_strtod_l+0x574>)
 8007dd2:	a819      	add	r0, sp, #100	@ 0x64
 8007dd4:	f001 f9d0 	bl	8009178 <__match>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f43f aec7 	beq.w	8007b6c <_strtod_l+0xa4>
 8007dde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b28      	cmp	r3, #40	@ 0x28
 8007de4:	d12e      	bne.n	8007e44 <_strtod_l+0x37c>
 8007de6:	4996      	ldr	r1, [pc, #600]	@ (8008040 <_strtod_l+0x578>)
 8007de8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007dea:	a819      	add	r0, sp, #100	@ 0x64
 8007dec:	f001 f9d8 	bl	80091a0 <__hexnan>
 8007df0:	2805      	cmp	r0, #5
 8007df2:	d127      	bne.n	8007e44 <_strtod_l+0x37c>
 8007df4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007df6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007dfa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dfe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e02:	e69a      	b.n	8007b3a <_strtod_l+0x72>
 8007e04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e06:	fb08 2101 	mla	r1, r8, r1, r2
 8007e0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e10:	e7b5      	b.n	8007d7e <_strtod_l+0x2b6>
 8007e12:	2a6e      	cmp	r2, #110	@ 0x6e
 8007e14:	e7da      	b.n	8007dcc <_strtod_l+0x304>
 8007e16:	498b      	ldr	r1, [pc, #556]	@ (8008044 <_strtod_l+0x57c>)
 8007e18:	a819      	add	r0, sp, #100	@ 0x64
 8007e1a:	f001 f9ad 	bl	8009178 <__match>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f aea4 	beq.w	8007b6c <_strtod_l+0xa4>
 8007e24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e26:	4988      	ldr	r1, [pc, #544]	@ (8008048 <_strtod_l+0x580>)
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	a819      	add	r0, sp, #100	@ 0x64
 8007e2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e2e:	f001 f9a3 	bl	8009178 <__match>
 8007e32:	b910      	cbnz	r0, 8007e3a <_strtod_l+0x372>
 8007e34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e36:	3301      	adds	r3, #1
 8007e38:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e3a:	f04f 0a00 	mov.w	sl, #0
 8007e3e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800804c <_strtod_l+0x584>
 8007e42:	e67a      	b.n	8007b3a <_strtod_l+0x72>
 8007e44:	4882      	ldr	r0, [pc, #520]	@ (8008050 <_strtod_l+0x588>)
 8007e46:	f000 fed5 	bl	8008bf4 <nan>
 8007e4a:	4682      	mov	sl, r0
 8007e4c:	468b      	mov	fp, r1
 8007e4e:	e674      	b.n	8007b3a <_strtod_l+0x72>
 8007e50:	eba8 0309 	sub.w	r3, r8, r9
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	bf08      	it	eq
 8007e58:	462f      	moveq	r7, r5
 8007e5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e5c:	2d10      	cmp	r5, #16
 8007e5e:	462c      	mov	r4, r5
 8007e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e62:	bfa8      	it	ge
 8007e64:	2410      	movge	r4, #16
 8007e66:	f7f8 fabd 	bl	80003e4 <__aeabi_ui2d>
 8007e6a:	2d09      	cmp	r5, #9
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	dc11      	bgt.n	8007e96 <_strtod_l+0x3ce>
 8007e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f43f ae60 	beq.w	8007b3a <_strtod_l+0x72>
 8007e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7c:	dd76      	ble.n	8007f6c <_strtod_l+0x4a4>
 8007e7e:	2b16      	cmp	r3, #22
 8007e80:	dc5d      	bgt.n	8007f3e <_strtod_l+0x476>
 8007e82:	4974      	ldr	r1, [pc, #464]	@ (8008054 <_strtod_l+0x58c>)
 8007e84:	4652      	mov	r2, sl
 8007e86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	e7d9      	b.n	8007e4a <_strtod_l+0x382>
 8007e96:	4b6f      	ldr	r3, [pc, #444]	@ (8008054 <_strtod_l+0x58c>)
 8007e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ea0:	f7f8 fb1a 	bl	80004d8 <__aeabi_dmul>
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	9808      	ldr	r0, [sp, #32]
 8007ea8:	468b      	mov	fp, r1
 8007eaa:	f7f8 fa9b 	bl	80003e4 <__aeabi_ui2d>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 f959 	bl	800016c <__adddf3>
 8007eba:	2d0f      	cmp	r5, #15
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	468b      	mov	fp, r1
 8007ec0:	ddd7      	ble.n	8007e72 <_strtod_l+0x3aa>
 8007ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec4:	1b2c      	subs	r4, r5, r4
 8007ec6:	441c      	add	r4, r3
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	f340 8096 	ble.w	8007ffa <_strtod_l+0x532>
 8007ece:	f014 030f 	ands.w	r3, r4, #15
 8007ed2:	d00a      	beq.n	8007eea <_strtod_l+0x422>
 8007ed4:	495f      	ldr	r1, [pc, #380]	@ (8008054 <_strtod_l+0x58c>)
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ee0:	465b      	mov	r3, fp
 8007ee2:	f7f8 faf9 	bl	80004d8 <__aeabi_dmul>
 8007ee6:	4682      	mov	sl, r0
 8007ee8:	468b      	mov	fp, r1
 8007eea:	f034 040f 	bics.w	r4, r4, #15
 8007eee:	d073      	beq.n	8007fd8 <_strtod_l+0x510>
 8007ef0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ef4:	dd48      	ble.n	8007f88 <_strtod_l+0x4c0>
 8007ef6:	2400      	movs	r4, #0
 8007ef8:	46a0      	mov	r8, r4
 8007efa:	46a1      	mov	r9, r4
 8007efc:	940a      	str	r4, [sp, #40]	@ 0x28
 8007efe:	2322      	movs	r3, #34	@ 0x22
 8007f00:	f04f 0a00 	mov.w	sl, #0
 8007f04:	9a05      	ldr	r2, [sp, #20]
 8007f06:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800804c <_strtod_l+0x584>
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f43f ae13 	beq.w	8007b3a <_strtod_l+0x72>
 8007f14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f16:	9805      	ldr	r0, [sp, #20]
 8007f18:	f7ff f94c 	bl	80071b4 <_Bfree>
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	9805      	ldr	r0, [sp, #20]
 8007f20:	f7ff f948 	bl	80071b4 <_Bfree>
 8007f24:	4641      	mov	r1, r8
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	f7ff f944 	bl	80071b4 <_Bfree>
 8007f2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f2e:	9805      	ldr	r0, [sp, #20]
 8007f30:	f7ff f940 	bl	80071b4 <_Bfree>
 8007f34:	4621      	mov	r1, r4
 8007f36:	9805      	ldr	r0, [sp, #20]
 8007f38:	f7ff f93c 	bl	80071b4 <_Bfree>
 8007f3c:	e5fd      	b.n	8007b3a <_strtod_l+0x72>
 8007f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f44:	4293      	cmp	r3, r2
 8007f46:	dbbc      	blt.n	8007ec2 <_strtod_l+0x3fa>
 8007f48:	4c42      	ldr	r4, [pc, #264]	@ (8008054 <_strtod_l+0x58c>)
 8007f4a:	f1c5 050f 	rsb	r5, r5, #15
 8007f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f52:	4652      	mov	r2, sl
 8007f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f58:	465b      	mov	r3, fp
 8007f5a:	f7f8 fabd 	bl	80004d8 <__aeabi_dmul>
 8007f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f60:	1b5d      	subs	r5, r3, r5
 8007f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f6a:	e791      	b.n	8007e90 <_strtod_l+0x3c8>
 8007f6c:	3316      	adds	r3, #22
 8007f6e:	dba8      	blt.n	8007ec2 <_strtod_l+0x3fa>
 8007f70:	4b38      	ldr	r3, [pc, #224]	@ (8008054 <_strtod_l+0x58c>)
 8007f72:	eba9 0808 	sub.w	r8, r9, r8
 8007f76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f80:	4659      	mov	r1, fp
 8007f82:	f7f8 fbd3 	bl	800072c <__aeabi_ddiv>
 8007f86:	e760      	b.n	8007e4a <_strtod_l+0x382>
 8007f88:	4b33      	ldr	r3, [pc, #204]	@ (8008058 <_strtod_l+0x590>)
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	9308      	str	r3, [sp, #32]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4659      	mov	r1, fp
 8007f92:	461e      	mov	r6, r3
 8007f94:	1124      	asrs	r4, r4, #4
 8007f96:	2c01      	cmp	r4, #1
 8007f98:	dc21      	bgt.n	8007fde <_strtod_l+0x516>
 8007f9a:	b10b      	cbz	r3, 8007fa0 <_strtod_l+0x4d8>
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	492d      	ldr	r1, [pc, #180]	@ (8008058 <_strtod_l+0x590>)
 8007fa2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007fa6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007faa:	4652      	mov	r2, sl
 8007fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb0:	465b      	mov	r3, fp
 8007fb2:	f7f8 fa91 	bl	80004d8 <__aeabi_dmul>
 8007fb6:	4b25      	ldr	r3, [pc, #148]	@ (800804c <_strtod_l+0x584>)
 8007fb8:	460a      	mov	r2, r1
 8007fba:	400b      	ands	r3, r1
 8007fbc:	4927      	ldr	r1, [pc, #156]	@ (800805c <_strtod_l+0x594>)
 8007fbe:	4682      	mov	sl, r0
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	d898      	bhi.n	8007ef6 <_strtod_l+0x42e>
 8007fc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf86      	itte	hi
 8007fcc:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fd0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008060 <_strtod_l+0x598>
 8007fd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	e07a      	b.n	80080d4 <_strtod_l+0x60c>
 8007fde:	07e2      	lsls	r2, r4, #31
 8007fe0:	d505      	bpl.n	8007fee <_strtod_l+0x526>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	2301      	movs	r3, #1
 8007fee:	9a08      	ldr	r2, [sp, #32]
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	3208      	adds	r2, #8
 8007ff4:	1064      	asrs	r4, r4, #1
 8007ff6:	9208      	str	r2, [sp, #32]
 8007ff8:	e7cd      	b.n	8007f96 <_strtod_l+0x4ce>
 8007ffa:	d0ed      	beq.n	8007fd8 <_strtod_l+0x510>
 8007ffc:	4264      	negs	r4, r4
 8007ffe:	f014 020f 	ands.w	r2, r4, #15
 8008002:	d00a      	beq.n	800801a <_strtod_l+0x552>
 8008004:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <_strtod_l+0x58c>)
 8008006:	4650      	mov	r0, sl
 8008008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800800c:	4659      	mov	r1, fp
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 fb8b 	bl	800072c <__aeabi_ddiv>
 8008016:	4682      	mov	sl, r0
 8008018:	468b      	mov	fp, r1
 800801a:	1124      	asrs	r4, r4, #4
 800801c:	d0dc      	beq.n	8007fd8 <_strtod_l+0x510>
 800801e:	2c1f      	cmp	r4, #31
 8008020:	dd20      	ble.n	8008064 <_strtod_l+0x59c>
 8008022:	2400      	movs	r4, #0
 8008024:	46a0      	mov	r8, r4
 8008026:	46a1      	mov	r9, r4
 8008028:	940a      	str	r4, [sp, #40]	@ 0x28
 800802a:	2322      	movs	r3, #34	@ 0x22
 800802c:	9a05      	ldr	r2, [sp, #20]
 800802e:	f04f 0a00 	mov.w	sl, #0
 8008032:	f04f 0b00 	mov.w	fp, #0
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e768      	b.n	8007f0c <_strtod_l+0x444>
 800803a:	bf00      	nop
 800803c:	080099cf 	.word	0x080099cf
 8008040:	08009be4 	.word	0x08009be4
 8008044:	080099c7 	.word	0x080099c7
 8008048:	080099fe 	.word	0x080099fe
 800804c:	7ff00000 	.word	0x7ff00000
 8008050:	08009d8d 	.word	0x08009d8d
 8008054:	08009b18 	.word	0x08009b18
 8008058:	08009af0 	.word	0x08009af0
 800805c:	7ca00000 	.word	0x7ca00000
 8008060:	7fefffff 	.word	0x7fefffff
 8008064:	f014 0310 	ands.w	r3, r4, #16
 8008068:	bf18      	it	ne
 800806a:	236a      	movne	r3, #106	@ 0x6a
 800806c:	4650      	mov	r0, sl
 800806e:	9308      	str	r3, [sp, #32]
 8008070:	4659      	mov	r1, fp
 8008072:	2300      	movs	r3, #0
 8008074:	4ea9      	ldr	r6, [pc, #676]	@ (800831c <_strtod_l+0x854>)
 8008076:	07e2      	lsls	r2, r4, #31
 8008078:	d504      	bpl.n	8008084 <_strtod_l+0x5bc>
 800807a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800807e:	f7f8 fa2b 	bl	80004d8 <__aeabi_dmul>
 8008082:	2301      	movs	r3, #1
 8008084:	1064      	asrs	r4, r4, #1
 8008086:	f106 0608 	add.w	r6, r6, #8
 800808a:	d1f4      	bne.n	8008076 <_strtod_l+0x5ae>
 800808c:	b10b      	cbz	r3, 8008092 <_strtod_l+0x5ca>
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	b1b3      	cbz	r3, 80080c4 <_strtod_l+0x5fc>
 8008096:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800809a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800809e:	2b00      	cmp	r3, #0
 80080a0:	4659      	mov	r1, fp
 80080a2:	dd0f      	ble.n	80080c4 <_strtod_l+0x5fc>
 80080a4:	2b1f      	cmp	r3, #31
 80080a6:	dd57      	ble.n	8008158 <_strtod_l+0x690>
 80080a8:	2b34      	cmp	r3, #52	@ 0x34
 80080aa:	bfd8      	it	le
 80080ac:	f04f 33ff 	movle.w	r3, #4294967295
 80080b0:	f04f 0a00 	mov.w	sl, #0
 80080b4:	bfcf      	iteee	gt
 80080b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80080ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80080be:	4093      	lslle	r3, r2
 80080c0:	ea03 0b01 	andle.w	fp, r3, r1
 80080c4:	2200      	movs	r2, #0
 80080c6:	2300      	movs	r3, #0
 80080c8:	4650      	mov	r0, sl
 80080ca:	4659      	mov	r1, fp
 80080cc:	f7f8 fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d1a6      	bne.n	8008022 <_strtod_l+0x55a>
 80080d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d6:	463a      	mov	r2, r7
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080dc:	462b      	mov	r3, r5
 80080de:	9805      	ldr	r0, [sp, #20]
 80080e0:	f7ff f8d0 	bl	8007284 <__s2b>
 80080e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f af05 	beq.w	8007ef6 <_strtod_l+0x42e>
 80080ec:	2400      	movs	r4, #0
 80080ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f0:	eba9 0308 	sub.w	r3, r9, r8
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	bfa8      	it	ge
 80080f8:	2300      	movge	r3, #0
 80080fa:	46a0      	mov	r8, r4
 80080fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80080fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008102:	9316      	str	r3, [sp, #88]	@ 0x58
 8008104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008106:	9805      	ldr	r0, [sp, #20]
 8008108:	6859      	ldr	r1, [r3, #4]
 800810a:	f7ff f813 	bl	8007134 <_Balloc>
 800810e:	4681      	mov	r9, r0
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f aef4 	beq.w	8007efe <_strtod_l+0x436>
 8008116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008118:	300c      	adds	r0, #12
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	f103 010c 	add.w	r1, r3, #12
 8008120:	3202      	adds	r2, #2
 8008122:	0092      	lsls	r2, r2, #2
 8008124:	f7fe f8a3 	bl	800626e <memcpy>
 8008128:	ab1c      	add	r3, sp, #112	@ 0x70
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4652      	mov	r2, sl
 8008132:	465b      	mov	r3, fp
 8008134:	9805      	ldr	r0, [sp, #20]
 8008136:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800813a:	f7ff fbd5 	bl	80078e8 <__d2b>
 800813e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008140:	2800      	cmp	r0, #0
 8008142:	f43f aedc 	beq.w	8007efe <_strtod_l+0x436>
 8008146:	2101      	movs	r1, #1
 8008148:	9805      	ldr	r0, [sp, #20]
 800814a:	f7ff f931 	bl	80073b0 <__i2b>
 800814e:	4680      	mov	r8, r0
 8008150:	b948      	cbnz	r0, 8008166 <_strtod_l+0x69e>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	e6d2      	b.n	8007efe <_strtod_l+0x436>
 8008158:	f04f 32ff 	mov.w	r2, #4294967295
 800815c:	fa02 f303 	lsl.w	r3, r2, r3
 8008160:	ea03 0a0a 	and.w	sl, r3, sl
 8008164:	e7ae      	b.n	80080c4 <_strtod_l+0x5fc>
 8008166:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008168:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800816a:	2d00      	cmp	r5, #0
 800816c:	bfab      	itete	ge
 800816e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008170:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008172:	18ef      	addge	r7, r5, r3
 8008174:	1b5e      	sublt	r6, r3, r5
 8008176:	9b08      	ldr	r3, [sp, #32]
 8008178:	bfa8      	it	ge
 800817a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800817c:	eba5 0503 	sub.w	r5, r5, r3
 8008180:	4415      	add	r5, r2
 8008182:	4b67      	ldr	r3, [pc, #412]	@ (8008320 <_strtod_l+0x858>)
 8008184:	f105 35ff 	add.w	r5, r5, #4294967295
 8008188:	bfb8      	it	lt
 800818a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800818c:	429d      	cmp	r5, r3
 800818e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008192:	da50      	bge.n	8008236 <_strtod_l+0x76e>
 8008194:	1b5b      	subs	r3, r3, r5
 8008196:	2b1f      	cmp	r3, #31
 8008198:	f04f 0101 	mov.w	r1, #1
 800819c:	eba2 0203 	sub.w	r2, r2, r3
 80081a0:	dc3d      	bgt.n	800821e <_strtod_l+0x756>
 80081a2:	fa01 f303 	lsl.w	r3, r1, r3
 80081a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081a8:	2300      	movs	r3, #0
 80081aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80081ac:	18bd      	adds	r5, r7, r2
 80081ae:	9b08      	ldr	r3, [sp, #32]
 80081b0:	42af      	cmp	r7, r5
 80081b2:	4416      	add	r6, r2
 80081b4:	441e      	add	r6, r3
 80081b6:	463b      	mov	r3, r7
 80081b8:	bfa8      	it	ge
 80081ba:	462b      	movge	r3, r5
 80081bc:	42b3      	cmp	r3, r6
 80081be:	bfa8      	it	ge
 80081c0:	4633      	movge	r3, r6
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bfc2      	ittt	gt
 80081c6:	1aed      	subgt	r5, r5, r3
 80081c8:	1af6      	subgt	r6, r6, r3
 80081ca:	1aff      	subgt	r7, r7, r3
 80081cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd16      	ble.n	8008200 <_strtod_l+0x738>
 80081d2:	4641      	mov	r1, r8
 80081d4:	461a      	mov	r2, r3
 80081d6:	9805      	ldr	r0, [sp, #20]
 80081d8:	f7ff f9a8 	bl	800752c <__pow5mult>
 80081dc:	4680      	mov	r8, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d0b7      	beq.n	8008152 <_strtod_l+0x68a>
 80081e2:	4601      	mov	r1, r0
 80081e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081e6:	9805      	ldr	r0, [sp, #20]
 80081e8:	f7ff f8f8 	bl	80073dc <__multiply>
 80081ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f ae85 	beq.w	8007efe <_strtod_l+0x436>
 80081f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081f6:	9805      	ldr	r0, [sp, #20]
 80081f8:	f7fe ffdc 	bl	80071b4 <_Bfree>
 80081fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008200:	2d00      	cmp	r5, #0
 8008202:	dc1d      	bgt.n	8008240 <_strtod_l+0x778>
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	dd23      	ble.n	8008252 <_strtod_l+0x78a>
 800820a:	4649      	mov	r1, r9
 800820c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800820e:	9805      	ldr	r0, [sp, #20]
 8008210:	f7ff f98c 	bl	800752c <__pow5mult>
 8008214:	4681      	mov	r9, r0
 8008216:	b9e0      	cbnz	r0, 8008252 <_strtod_l+0x78a>
 8008218:	f04f 0900 	mov.w	r9, #0
 800821c:	e66f      	b.n	8007efe <_strtod_l+0x436>
 800821e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008222:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008226:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800822a:	35e2      	adds	r5, #226	@ 0xe2
 800822c:	fa01 f305 	lsl.w	r3, r1, r5
 8008230:	9310      	str	r3, [sp, #64]	@ 0x40
 8008232:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008234:	e7ba      	b.n	80081ac <_strtod_l+0x6e4>
 8008236:	2300      	movs	r3, #0
 8008238:	9310      	str	r3, [sp, #64]	@ 0x40
 800823a:	2301      	movs	r3, #1
 800823c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800823e:	e7b5      	b.n	80081ac <_strtod_l+0x6e4>
 8008240:	462a      	mov	r2, r5
 8008242:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	f7ff f9cb 	bl	80075e0 <__lshift>
 800824a:	901a      	str	r0, [sp, #104]	@ 0x68
 800824c:	2800      	cmp	r0, #0
 800824e:	d1d9      	bne.n	8008204 <_strtod_l+0x73c>
 8008250:	e655      	b.n	8007efe <_strtod_l+0x436>
 8008252:	2e00      	cmp	r6, #0
 8008254:	dd07      	ble.n	8008266 <_strtod_l+0x79e>
 8008256:	4649      	mov	r1, r9
 8008258:	4632      	mov	r2, r6
 800825a:	9805      	ldr	r0, [sp, #20]
 800825c:	f7ff f9c0 	bl	80075e0 <__lshift>
 8008260:	4681      	mov	r9, r0
 8008262:	2800      	cmp	r0, #0
 8008264:	d0d8      	beq.n	8008218 <_strtod_l+0x750>
 8008266:	2f00      	cmp	r7, #0
 8008268:	dd08      	ble.n	800827c <_strtod_l+0x7b4>
 800826a:	4641      	mov	r1, r8
 800826c:	463a      	mov	r2, r7
 800826e:	9805      	ldr	r0, [sp, #20]
 8008270:	f7ff f9b6 	bl	80075e0 <__lshift>
 8008274:	4680      	mov	r8, r0
 8008276:	2800      	cmp	r0, #0
 8008278:	f43f ae41 	beq.w	8007efe <_strtod_l+0x436>
 800827c:	464a      	mov	r2, r9
 800827e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008280:	9805      	ldr	r0, [sp, #20]
 8008282:	f7ff fa35 	bl	80076f0 <__mdiff>
 8008286:	4604      	mov	r4, r0
 8008288:	2800      	cmp	r0, #0
 800828a:	f43f ae38 	beq.w	8007efe <_strtod_l+0x436>
 800828e:	68c3      	ldr	r3, [r0, #12]
 8008290:	4641      	mov	r1, r8
 8008292:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008294:	2300      	movs	r3, #0
 8008296:	60c3      	str	r3, [r0, #12]
 8008298:	f7ff fa0e 	bl	80076b8 <__mcmp>
 800829c:	2800      	cmp	r0, #0
 800829e:	da45      	bge.n	800832c <_strtod_l+0x864>
 80082a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082a2:	ea53 030a 	orrs.w	r3, r3, sl
 80082a6:	d16b      	bne.n	8008380 <_strtod_l+0x8b8>
 80082a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d167      	bne.n	8008380 <_strtod_l+0x8b8>
 80082b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082b4:	0d1b      	lsrs	r3, r3, #20
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082bc:	d960      	bls.n	8008380 <_strtod_l+0x8b8>
 80082be:	6963      	ldr	r3, [r4, #20]
 80082c0:	b913      	cbnz	r3, 80082c8 <_strtod_l+0x800>
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	dd5b      	ble.n	8008380 <_strtod_l+0x8b8>
 80082c8:	4621      	mov	r1, r4
 80082ca:	2201      	movs	r2, #1
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	f7ff f987 	bl	80075e0 <__lshift>
 80082d2:	4641      	mov	r1, r8
 80082d4:	4604      	mov	r4, r0
 80082d6:	f7ff f9ef 	bl	80076b8 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	dd50      	ble.n	8008380 <_strtod_l+0x8b8>
 80082de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e2:	9a08      	ldr	r2, [sp, #32]
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	051b      	lsls	r3, r3, #20
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d06a      	beq.n	80083c2 <_strtod_l+0x8fa>
 80082ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082f0:	d867      	bhi.n	80083c2 <_strtod_l+0x8fa>
 80082f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082f6:	f67f ae98 	bls.w	800802a <_strtod_l+0x562>
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <_strtod_l+0x85c>)
 8008300:	2200      	movs	r2, #0
 8008302:	f7f8 f8e9 	bl	80004d8 <__aeabi_dmul>
 8008306:	4b08      	ldr	r3, [pc, #32]	@ (8008328 <_strtod_l+0x860>)
 8008308:	4682      	mov	sl, r0
 800830a:	400b      	ands	r3, r1
 800830c:	468b      	mov	fp, r1
 800830e:	2b00      	cmp	r3, #0
 8008310:	f47f ae00 	bne.w	8007f14 <_strtod_l+0x44c>
 8008314:	2322      	movs	r3, #34	@ 0x22
 8008316:	9a05      	ldr	r2, [sp, #20]
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e5fb      	b.n	8007f14 <_strtod_l+0x44c>
 800831c:	08009c10 	.word	0x08009c10
 8008320:	fffffc02 	.word	0xfffffc02
 8008324:	39500000 	.word	0x39500000
 8008328:	7ff00000 	.word	0x7ff00000
 800832c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008330:	d165      	bne.n	80083fe <_strtod_l+0x936>
 8008332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008338:	b35a      	cbz	r2, 8008392 <_strtod_l+0x8ca>
 800833a:	4a99      	ldr	r2, [pc, #612]	@ (80085a0 <_strtod_l+0xad8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d12b      	bne.n	8008398 <_strtod_l+0x8d0>
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	4651      	mov	r1, sl
 8008344:	b303      	cbz	r3, 8008388 <_strtod_l+0x8c0>
 8008346:	465a      	mov	r2, fp
 8008348:	4b96      	ldr	r3, [pc, #600]	@ (80085a4 <_strtod_l+0xadc>)
 800834a:	4013      	ands	r3, r2
 800834c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	d81b      	bhi.n	800838e <_strtod_l+0x8c6>
 8008356:	0d1b      	lsrs	r3, r3, #20
 8008358:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	4299      	cmp	r1, r3
 8008362:	d119      	bne.n	8008398 <_strtod_l+0x8d0>
 8008364:	4b90      	ldr	r3, [pc, #576]	@ (80085a8 <_strtod_l+0xae0>)
 8008366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008368:	429a      	cmp	r2, r3
 800836a:	d102      	bne.n	8008372 <_strtod_l+0x8aa>
 800836c:	3101      	adds	r1, #1
 800836e:	f43f adc6 	beq.w	8007efe <_strtod_l+0x436>
 8008372:	f04f 0a00 	mov.w	sl, #0
 8008376:	4b8b      	ldr	r3, [pc, #556]	@ (80085a4 <_strtod_l+0xadc>)
 8008378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800837a:	401a      	ands	r2, r3
 800837c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1b9      	bne.n	80082fa <_strtod_l+0x832>
 8008386:	e5c5      	b.n	8007f14 <_strtod_l+0x44c>
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	e7e8      	b.n	8008360 <_strtod_l+0x898>
 800838e:	4613      	mov	r3, r2
 8008390:	e7e6      	b.n	8008360 <_strtod_l+0x898>
 8008392:	ea53 030a 	orrs.w	r3, r3, sl
 8008396:	d0a2      	beq.n	80082de <_strtod_l+0x816>
 8008398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800839a:	b1db      	cbz	r3, 80083d4 <_strtod_l+0x90c>
 800839c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800839e:	4213      	tst	r3, r2
 80083a0:	d0ee      	beq.n	8008380 <_strtod_l+0x8b8>
 80083a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083a4:	4650      	mov	r0, sl
 80083a6:	4659      	mov	r1, fp
 80083a8:	9a08      	ldr	r2, [sp, #32]
 80083aa:	b1bb      	cbz	r3, 80083dc <_strtod_l+0x914>
 80083ac:	f7ff fb68 	bl	8007a80 <sulp>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083b8:	f7f7 fed8 	bl	800016c <__adddf3>
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	e7de      	b.n	8008380 <_strtod_l+0x8b8>
 80083c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80083c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083ca:	f04f 3aff 	mov.w	sl, #4294967295
 80083ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083d2:	e7d5      	b.n	8008380 <_strtod_l+0x8b8>
 80083d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083d6:	ea13 0f0a 	tst.w	r3, sl
 80083da:	e7e1      	b.n	80083a0 <_strtod_l+0x8d8>
 80083dc:	f7ff fb50 	bl	8007a80 <sulp>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e8:	f7f7 febe 	bl	8000168 <__aeabi_dsub>
 80083ec:	2200      	movs	r2, #0
 80083ee:	2300      	movs	r3, #0
 80083f0:	4682      	mov	sl, r0
 80083f2:	468b      	mov	fp, r1
 80083f4:	f7f8 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d0c1      	beq.n	8008380 <_strtod_l+0x8b8>
 80083fc:	e615      	b.n	800802a <_strtod_l+0x562>
 80083fe:	4641      	mov	r1, r8
 8008400:	4620      	mov	r0, r4
 8008402:	f7ff fac9 	bl	8007998 <__ratio>
 8008406:	2200      	movs	r2, #0
 8008408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fade 	bl	80009d0 <__aeabi_dcmple>
 8008414:	2800      	cmp	r0, #0
 8008416:	d06d      	beq.n	80084f4 <_strtod_l+0xa2c>
 8008418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d178      	bne.n	8008510 <_strtod_l+0xa48>
 800841e:	f1ba 0f00 	cmp.w	sl, #0
 8008422:	d156      	bne.n	80084d2 <_strtod_l+0xa0a>
 8008424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800842a:	2b00      	cmp	r3, #0
 800842c:	d158      	bne.n	80084e0 <_strtod_l+0xa18>
 800842e:	2200      	movs	r2, #0
 8008430:	4630      	mov	r0, r6
 8008432:	4639      	mov	r1, r7
 8008434:	4b5d      	ldr	r3, [pc, #372]	@ (80085ac <_strtod_l+0xae4>)
 8008436:	f7f8 fac1 	bl	80009bc <__aeabi_dcmplt>
 800843a:	2800      	cmp	r0, #0
 800843c:	d157      	bne.n	80084ee <_strtod_l+0xa26>
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	2200      	movs	r2, #0
 8008444:	4b5a      	ldr	r3, [pc, #360]	@ (80085b0 <_strtod_l+0xae8>)
 8008446:	f7f8 f847 	bl	80004d8 <__aeabi_dmul>
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008452:	9606      	str	r6, [sp, #24]
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800845a:	4d52      	ldr	r5, [pc, #328]	@ (80085a4 <_strtod_l+0xadc>)
 800845c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008462:	401d      	ands	r5, r3
 8008464:	4b53      	ldr	r3, [pc, #332]	@ (80085b4 <_strtod_l+0xaec>)
 8008466:	429d      	cmp	r5, r3
 8008468:	f040 80aa 	bne.w	80085c0 <_strtod_l+0xaf8>
 800846c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846e:	4650      	mov	r0, sl
 8008470:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008474:	4659      	mov	r1, fp
 8008476:	f7ff f9cf 	bl	8007818 <__ulp>
 800847a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800847e:	f7f8 f82b 	bl	80004d8 <__aeabi_dmul>
 8008482:	4652      	mov	r2, sl
 8008484:	465b      	mov	r3, fp
 8008486:	f7f7 fe71 	bl	800016c <__adddf3>
 800848a:	460b      	mov	r3, r1
 800848c:	4945      	ldr	r1, [pc, #276]	@ (80085a4 <_strtod_l+0xadc>)
 800848e:	4a4a      	ldr	r2, [pc, #296]	@ (80085b8 <_strtod_l+0xaf0>)
 8008490:	4019      	ands	r1, r3
 8008492:	4291      	cmp	r1, r2
 8008494:	4682      	mov	sl, r0
 8008496:	d942      	bls.n	800851e <_strtod_l+0xa56>
 8008498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800849a:	4b43      	ldr	r3, [pc, #268]	@ (80085a8 <_strtod_l+0xae0>)
 800849c:	429a      	cmp	r2, r3
 800849e:	d103      	bne.n	80084a8 <_strtod_l+0x9e0>
 80084a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084a2:	3301      	adds	r3, #1
 80084a4:	f43f ad2b 	beq.w	8007efe <_strtod_l+0x436>
 80084a8:	f04f 3aff 	mov.w	sl, #4294967295
 80084ac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80085a8 <_strtod_l+0xae0>
 80084b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084b2:	9805      	ldr	r0, [sp, #20]
 80084b4:	f7fe fe7e 	bl	80071b4 <_Bfree>
 80084b8:	4649      	mov	r1, r9
 80084ba:	9805      	ldr	r0, [sp, #20]
 80084bc:	f7fe fe7a 	bl	80071b4 <_Bfree>
 80084c0:	4641      	mov	r1, r8
 80084c2:	9805      	ldr	r0, [sp, #20]
 80084c4:	f7fe fe76 	bl	80071b4 <_Bfree>
 80084c8:	4621      	mov	r1, r4
 80084ca:	9805      	ldr	r0, [sp, #20]
 80084cc:	f7fe fe72 	bl	80071b4 <_Bfree>
 80084d0:	e618      	b.n	8008104 <_strtod_l+0x63c>
 80084d2:	f1ba 0f01 	cmp.w	sl, #1
 80084d6:	d103      	bne.n	80084e0 <_strtod_l+0xa18>
 80084d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f43f ada5 	beq.w	800802a <_strtod_l+0x562>
 80084e0:	2200      	movs	r2, #0
 80084e2:	4b36      	ldr	r3, [pc, #216]	@ (80085bc <_strtod_l+0xaf4>)
 80084e4:	2600      	movs	r6, #0
 80084e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ea:	4f30      	ldr	r7, [pc, #192]	@ (80085ac <_strtod_l+0xae4>)
 80084ec:	e7b3      	b.n	8008456 <_strtod_l+0x98e>
 80084ee:	2600      	movs	r6, #0
 80084f0:	4f2f      	ldr	r7, [pc, #188]	@ (80085b0 <_strtod_l+0xae8>)
 80084f2:	e7ac      	b.n	800844e <_strtod_l+0x986>
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	4b2d      	ldr	r3, [pc, #180]	@ (80085b0 <_strtod_l+0xae8>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	f7f7 ffec 	bl	80004d8 <__aeabi_dmul>
 8008500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0a1      	beq.n	800844e <_strtod_l+0x986>
 800850a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800850e:	e7a2      	b.n	8008456 <_strtod_l+0x98e>
 8008510:	2200      	movs	r2, #0
 8008512:	4b26      	ldr	r3, [pc, #152]	@ (80085ac <_strtod_l+0xae4>)
 8008514:	4616      	mov	r6, r2
 8008516:	461f      	mov	r7, r3
 8008518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800851c:	e79b      	b.n	8008456 <_strtod_l+0x98e>
 800851e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1c1      	bne.n	80084b0 <_strtod_l+0x9e8>
 800852c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008530:	0d1b      	lsrs	r3, r3, #20
 8008532:	051b      	lsls	r3, r3, #20
 8008534:	429d      	cmp	r5, r3
 8008536:	d1bb      	bne.n	80084b0 <_strtod_l+0x9e8>
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 fb14 	bl	8000b68 <__aeabi_d2lz>
 8008540:	f7f7 ff9c 	bl	800047c <__aeabi_l2d>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f7 fe0c 	bl	8000168 <__aeabi_dsub>
 8008550:	460b      	mov	r3, r1
 8008552:	4602      	mov	r2, r0
 8008554:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008558:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800855c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800855e:	ea46 060a 	orr.w	r6, r6, sl
 8008562:	431e      	orrs	r6, r3
 8008564:	d069      	beq.n	800863a <_strtod_l+0xb72>
 8008566:	a30a      	add	r3, pc, #40	@ (adr r3, 8008590 <_strtod_l+0xac8>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f8 fa26 	bl	80009bc <__aeabi_dcmplt>
 8008570:	2800      	cmp	r0, #0
 8008572:	f47f accf 	bne.w	8007f14 <_strtod_l+0x44c>
 8008576:	a308      	add	r3, pc, #32	@ (adr r3, 8008598 <_strtod_l+0xad0>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008580:	f7f8 fa3a 	bl	80009f8 <__aeabi_dcmpgt>
 8008584:	2800      	cmp	r0, #0
 8008586:	d093      	beq.n	80084b0 <_strtod_l+0x9e8>
 8008588:	e4c4      	b.n	8007f14 <_strtod_l+0x44c>
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	94a03595 	.word	0x94a03595
 8008594:	3fdfffff 	.word	0x3fdfffff
 8008598:	35afe535 	.word	0x35afe535
 800859c:	3fe00000 	.word	0x3fe00000
 80085a0:	000fffff 	.word	0x000fffff
 80085a4:	7ff00000 	.word	0x7ff00000
 80085a8:	7fefffff 	.word	0x7fefffff
 80085ac:	3ff00000 	.word	0x3ff00000
 80085b0:	3fe00000 	.word	0x3fe00000
 80085b4:	7fe00000 	.word	0x7fe00000
 80085b8:	7c9fffff 	.word	0x7c9fffff
 80085bc:	bff00000 	.word	0xbff00000
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	b323      	cbz	r3, 800860e <_strtod_l+0xb46>
 80085c4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80085c8:	d821      	bhi.n	800860e <_strtod_l+0xb46>
 80085ca:	a327      	add	r3, pc, #156	@ (adr r3, 8008668 <_strtod_l+0xba0>)
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f8 f9fc 	bl	80009d0 <__aeabi_dcmple>
 80085d8:	b1a0      	cbz	r0, 8008604 <_strtod_l+0xb3c>
 80085da:	4639      	mov	r1, r7
 80085dc:	4630      	mov	r0, r6
 80085de:	f7f8 fa53 	bl	8000a88 <__aeabi_d2uiz>
 80085e2:	2801      	cmp	r0, #1
 80085e4:	bf38      	it	cc
 80085e6:	2001      	movcc	r0, #1
 80085e8:	f7f7 fefc 	bl	80003e4 <__aeabi_ui2d>
 80085ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	b9fb      	cbnz	r3, 8008634 <_strtod_l+0xb6c>
 80085f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085f8:	9014      	str	r0, [sp, #80]	@ 0x50
 80085fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80085fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008600:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008604:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008606:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800860a:	1b5b      	subs	r3, r3, r5
 800860c:	9311      	str	r3, [sp, #68]	@ 0x44
 800860e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008612:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008616:	f7ff f8ff 	bl	8007818 <__ulp>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4650      	mov	r0, sl
 8008620:	4659      	mov	r1, fp
 8008622:	f7f7 ff59 	bl	80004d8 <__aeabi_dmul>
 8008626:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800862a:	f7f7 fd9f 	bl	800016c <__adddf3>
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	e776      	b.n	8008522 <_strtod_l+0xa5a>
 8008634:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008638:	e7e0      	b.n	80085fc <_strtod_l+0xb34>
 800863a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008670 <_strtod_l+0xba8>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f8 f9bc 	bl	80009bc <__aeabi_dcmplt>
 8008644:	e79e      	b.n	8008584 <_strtod_l+0xabc>
 8008646:	2300      	movs	r3, #0
 8008648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800864a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800864c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f7ff ba77 	b.w	8007b42 <_strtod_l+0x7a>
 8008654:	2a65      	cmp	r2, #101	@ 0x65
 8008656:	f43f ab6e 	beq.w	8007d36 <_strtod_l+0x26e>
 800865a:	2a45      	cmp	r2, #69	@ 0x45
 800865c:	f43f ab6b 	beq.w	8007d36 <_strtod_l+0x26e>
 8008660:	2301      	movs	r3, #1
 8008662:	f7ff bba6 	b.w	8007db2 <_strtod_l+0x2ea>
 8008666:	bf00      	nop
 8008668:	ffc00000 	.word	0xffc00000
 800866c:	41dfffff 	.word	0x41dfffff
 8008670:	94a03595 	.word	0x94a03595
 8008674:	3fcfffff 	.word	0x3fcfffff

08008678 <_strtod_r>:
 8008678:	4b01      	ldr	r3, [pc, #4]	@ (8008680 <_strtod_r+0x8>)
 800867a:	f7ff ba25 	b.w	8007ac8 <_strtod_l>
 800867e:	bf00      	nop
 8008680:	20000068 	.word	0x20000068

08008684 <_strtol_l.constprop.0>:
 8008684:	2b24      	cmp	r3, #36	@ 0x24
 8008686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868a:	4686      	mov	lr, r0
 800868c:	4690      	mov	r8, r2
 800868e:	d801      	bhi.n	8008694 <_strtol_l.constprop.0+0x10>
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <_strtol_l.constprop.0+0x1e>
 8008694:	f7fd fdb0 	bl	80061f8 <__errno>
 8008698:	2316      	movs	r3, #22
 800869a:	6003      	str	r3, [r0, #0]
 800869c:	2000      	movs	r0, #0
 800869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a2:	460d      	mov	r5, r1
 80086a4:	4833      	ldr	r0, [pc, #204]	@ (8008774 <_strtol_l.constprop.0+0xf0>)
 80086a6:	462a      	mov	r2, r5
 80086a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ac:	5d06      	ldrb	r6, [r0, r4]
 80086ae:	f016 0608 	ands.w	r6, r6, #8
 80086b2:	d1f8      	bne.n	80086a6 <_strtol_l.constprop.0+0x22>
 80086b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80086b6:	d12d      	bne.n	8008714 <_strtol_l.constprop.0+0x90>
 80086b8:	2601      	movs	r6, #1
 80086ba:	782c      	ldrb	r4, [r5, #0]
 80086bc:	1c95      	adds	r5, r2, #2
 80086be:	f033 0210 	bics.w	r2, r3, #16
 80086c2:	d109      	bne.n	80086d8 <_strtol_l.constprop.0+0x54>
 80086c4:	2c30      	cmp	r4, #48	@ 0x30
 80086c6:	d12a      	bne.n	800871e <_strtol_l.constprop.0+0x9a>
 80086c8:	782a      	ldrb	r2, [r5, #0]
 80086ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086ce:	2a58      	cmp	r2, #88	@ 0x58
 80086d0:	d125      	bne.n	800871e <_strtol_l.constprop.0+0x9a>
 80086d2:	2310      	movs	r3, #16
 80086d4:	786c      	ldrb	r4, [r5, #1]
 80086d6:	3502      	adds	r5, #2
 80086d8:	2200      	movs	r2, #0
 80086da:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086e2:	fbbc f9f3 	udiv	r9, ip, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80086ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80086f0:	2f09      	cmp	r7, #9
 80086f2:	d81b      	bhi.n	800872c <_strtol_l.constprop.0+0xa8>
 80086f4:	463c      	mov	r4, r7
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	dd27      	ble.n	800874a <_strtol_l.constprop.0+0xc6>
 80086fa:	1c57      	adds	r7, r2, #1
 80086fc:	d007      	beq.n	800870e <_strtol_l.constprop.0+0x8a>
 80086fe:	4581      	cmp	r9, r0
 8008700:	d320      	bcc.n	8008744 <_strtol_l.constprop.0+0xc0>
 8008702:	d101      	bne.n	8008708 <_strtol_l.constprop.0+0x84>
 8008704:	45a2      	cmp	sl, r4
 8008706:	db1d      	blt.n	8008744 <_strtol_l.constprop.0+0xc0>
 8008708:	2201      	movs	r2, #1
 800870a:	fb00 4003 	mla	r0, r0, r3, r4
 800870e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008712:	e7eb      	b.n	80086ec <_strtol_l.constprop.0+0x68>
 8008714:	2c2b      	cmp	r4, #43	@ 0x2b
 8008716:	bf04      	itt	eq
 8008718:	782c      	ldrbeq	r4, [r5, #0]
 800871a:	1c95      	addeq	r5, r2, #2
 800871c:	e7cf      	b.n	80086be <_strtol_l.constprop.0+0x3a>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1da      	bne.n	80086d8 <_strtol_l.constprop.0+0x54>
 8008722:	2c30      	cmp	r4, #48	@ 0x30
 8008724:	bf0c      	ite	eq
 8008726:	2308      	moveq	r3, #8
 8008728:	230a      	movne	r3, #10
 800872a:	e7d5      	b.n	80086d8 <_strtol_l.constprop.0+0x54>
 800872c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008730:	2f19      	cmp	r7, #25
 8008732:	d801      	bhi.n	8008738 <_strtol_l.constprop.0+0xb4>
 8008734:	3c37      	subs	r4, #55	@ 0x37
 8008736:	e7de      	b.n	80086f6 <_strtol_l.constprop.0+0x72>
 8008738:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800873c:	2f19      	cmp	r7, #25
 800873e:	d804      	bhi.n	800874a <_strtol_l.constprop.0+0xc6>
 8008740:	3c57      	subs	r4, #87	@ 0x57
 8008742:	e7d8      	b.n	80086f6 <_strtol_l.constprop.0+0x72>
 8008744:	f04f 32ff 	mov.w	r2, #4294967295
 8008748:	e7e1      	b.n	800870e <_strtol_l.constprop.0+0x8a>
 800874a:	1c53      	adds	r3, r2, #1
 800874c:	d108      	bne.n	8008760 <_strtol_l.constprop.0+0xdc>
 800874e:	2322      	movs	r3, #34	@ 0x22
 8008750:	4660      	mov	r0, ip
 8008752:	f8ce 3000 	str.w	r3, [lr]
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	d0a0      	beq.n	800869e <_strtol_l.constprop.0+0x1a>
 800875c:	1e69      	subs	r1, r5, #1
 800875e:	e006      	b.n	800876e <_strtol_l.constprop.0+0xea>
 8008760:	b106      	cbz	r6, 8008764 <_strtol_l.constprop.0+0xe0>
 8008762:	4240      	negs	r0, r0
 8008764:	f1b8 0f00 	cmp.w	r8, #0
 8008768:	d099      	beq.n	800869e <_strtol_l.constprop.0+0x1a>
 800876a:	2a00      	cmp	r2, #0
 800876c:	d1f6      	bne.n	800875c <_strtol_l.constprop.0+0xd8>
 800876e:	f8c8 1000 	str.w	r1, [r8]
 8008772:	e794      	b.n	800869e <_strtol_l.constprop.0+0x1a>
 8008774:	08009c39 	.word	0x08009c39

08008778 <_strtol_r>:
 8008778:	f7ff bf84 	b.w	8008684 <_strtol_l.constprop.0>

0800877c <__ssputs_r>:
 800877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	461f      	mov	r7, r3
 8008782:	688e      	ldr	r6, [r1, #8]
 8008784:	4682      	mov	sl, r0
 8008786:	42be      	cmp	r6, r7
 8008788:	460c      	mov	r4, r1
 800878a:	4690      	mov	r8, r2
 800878c:	680b      	ldr	r3, [r1, #0]
 800878e:	d82d      	bhi.n	80087ec <__ssputs_r+0x70>
 8008790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008794:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008798:	d026      	beq.n	80087e8 <__ssputs_r+0x6c>
 800879a:	6965      	ldr	r5, [r4, #20]
 800879c:	6909      	ldr	r1, [r1, #16]
 800879e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a2:	eba3 0901 	sub.w	r9, r3, r1
 80087a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087aa:	1c7b      	adds	r3, r7, #1
 80087ac:	444b      	add	r3, r9
 80087ae:	106d      	asrs	r5, r5, #1
 80087b0:	429d      	cmp	r5, r3
 80087b2:	bf38      	it	cc
 80087b4:	461d      	movcc	r5, r3
 80087b6:	0553      	lsls	r3, r2, #21
 80087b8:	d527      	bpl.n	800880a <__ssputs_r+0x8e>
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7fe fc2e 	bl	800701c <_malloc_r>
 80087c0:	4606      	mov	r6, r0
 80087c2:	b360      	cbz	r0, 800881e <__ssputs_r+0xa2>
 80087c4:	464a      	mov	r2, r9
 80087c6:	6921      	ldr	r1, [r4, #16]
 80087c8:	f7fd fd51 	bl	800626e <memcpy>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	6126      	str	r6, [r4, #16]
 80087da:	444e      	add	r6, r9
 80087dc:	6026      	str	r6, [r4, #0]
 80087de:	463e      	mov	r6, r7
 80087e0:	6165      	str	r5, [r4, #20]
 80087e2:	eba5 0509 	sub.w	r5, r5, r9
 80087e6:	60a5      	str	r5, [r4, #8]
 80087e8:	42be      	cmp	r6, r7
 80087ea:	d900      	bls.n	80087ee <__ssputs_r+0x72>
 80087ec:	463e      	mov	r6, r7
 80087ee:	4632      	mov	r2, r6
 80087f0:	4641      	mov	r1, r8
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	f000 f9c2 	bl	8008b7c <memmove>
 80087f8:	2000      	movs	r0, #0
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	1b9b      	subs	r3, r3, r6
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	4433      	add	r3, r6
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	462a      	mov	r2, r5
 800880c:	f000 fd75 	bl	80092fa <_realloc_r>
 8008810:	4606      	mov	r6, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	d1e0      	bne.n	80087d8 <__ssputs_r+0x5c>
 8008816:	4650      	mov	r0, sl
 8008818:	6921      	ldr	r1, [r4, #16]
 800881a:	f7fe fb8d 	bl	8006f38 <_free_r>
 800881e:	230c      	movs	r3, #12
 8008820:	f8ca 3000 	str.w	r3, [sl]
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f04f 30ff 	mov.w	r0, #4294967295
 800882a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	e7e9      	b.n	8008806 <__ssputs_r+0x8a>
	...

08008834 <_svfiprintf_r>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	4698      	mov	r8, r3
 800883a:	898b      	ldrh	r3, [r1, #12]
 800883c:	4607      	mov	r7, r0
 800883e:	061b      	lsls	r3, r3, #24
 8008840:	460d      	mov	r5, r1
 8008842:	4614      	mov	r4, r2
 8008844:	b09d      	sub	sp, #116	@ 0x74
 8008846:	d510      	bpl.n	800886a <_svfiprintf_r+0x36>
 8008848:	690b      	ldr	r3, [r1, #16]
 800884a:	b973      	cbnz	r3, 800886a <_svfiprintf_r+0x36>
 800884c:	2140      	movs	r1, #64	@ 0x40
 800884e:	f7fe fbe5 	bl	800701c <_malloc_r>
 8008852:	6028      	str	r0, [r5, #0]
 8008854:	6128      	str	r0, [r5, #16]
 8008856:	b930      	cbnz	r0, 8008866 <_svfiprintf_r+0x32>
 8008858:	230c      	movs	r3, #12
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	b01d      	add	sp, #116	@ 0x74
 8008862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008866:	2340      	movs	r3, #64	@ 0x40
 8008868:	616b      	str	r3, [r5, #20]
 800886a:	2300      	movs	r3, #0
 800886c:	9309      	str	r3, [sp, #36]	@ 0x24
 800886e:	2320      	movs	r3, #32
 8008870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008874:	2330      	movs	r3, #48	@ 0x30
 8008876:	f04f 0901 	mov.w	r9, #1
 800887a:	f8cd 800c 	str.w	r8, [sp, #12]
 800887e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a18 <_svfiprintf_r+0x1e4>
 8008882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008886:	4623      	mov	r3, r4
 8008888:	469a      	mov	sl, r3
 800888a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888e:	b10a      	cbz	r2, 8008894 <_svfiprintf_r+0x60>
 8008890:	2a25      	cmp	r2, #37	@ 0x25
 8008892:	d1f9      	bne.n	8008888 <_svfiprintf_r+0x54>
 8008894:	ebba 0b04 	subs.w	fp, sl, r4
 8008898:	d00b      	beq.n	80088b2 <_svfiprintf_r+0x7e>
 800889a:	465b      	mov	r3, fp
 800889c:	4622      	mov	r2, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ff6b 	bl	800877c <__ssputs_r>
 80088a6:	3001      	adds	r0, #1
 80088a8:	f000 80a7 	beq.w	80089fa <_svfiprintf_r+0x1c6>
 80088ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088ae:	445a      	add	r2, fp
 80088b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80088b2:	f89a 3000 	ldrb.w	r3, [sl]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 809f 	beq.w	80089fa <_svfiprintf_r+0x1c6>
 80088bc:	2300      	movs	r3, #0
 80088be:	f04f 32ff 	mov.w	r2, #4294967295
 80088c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c6:	f10a 0a01 	add.w	sl, sl, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088d4:	4654      	mov	r4, sl
 80088d6:	2205      	movs	r2, #5
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	484e      	ldr	r0, [pc, #312]	@ (8008a18 <_svfiprintf_r+0x1e4>)
 80088de:	f7fd fcb8 	bl	8006252 <memchr>
 80088e2:	9a04      	ldr	r2, [sp, #16]
 80088e4:	b9d8      	cbnz	r0, 800891e <_svfiprintf_r+0xea>
 80088e6:	06d0      	lsls	r0, r2, #27
 80088e8:	bf44      	itt	mi
 80088ea:	2320      	movmi	r3, #32
 80088ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088f0:	0711      	lsls	r1, r2, #28
 80088f2:	bf44      	itt	mi
 80088f4:	232b      	movmi	r3, #43	@ 0x2b
 80088f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008900:	d015      	beq.n	800892e <_svfiprintf_r+0xfa>
 8008902:	4654      	mov	r4, sl
 8008904:	2000      	movs	r0, #0
 8008906:	f04f 0c0a 	mov.w	ip, #10
 800890a:	9a07      	ldr	r2, [sp, #28]
 800890c:	4621      	mov	r1, r4
 800890e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008912:	3b30      	subs	r3, #48	@ 0x30
 8008914:	2b09      	cmp	r3, #9
 8008916:	d94b      	bls.n	80089b0 <_svfiprintf_r+0x17c>
 8008918:	b1b0      	cbz	r0, 8008948 <_svfiprintf_r+0x114>
 800891a:	9207      	str	r2, [sp, #28]
 800891c:	e014      	b.n	8008948 <_svfiprintf_r+0x114>
 800891e:	eba0 0308 	sub.w	r3, r0, r8
 8008922:	fa09 f303 	lsl.w	r3, r9, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	46a2      	mov	sl, r4
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	e7d2      	b.n	80088d4 <_svfiprintf_r+0xa0>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d19      	adds	r1, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9103      	str	r1, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfbb      	ittet	lt
 800893a:	425b      	neglt	r3, r3
 800893c:	f042 0202 	orrlt.w	r2, r2, #2
 8008940:	9307      	strge	r3, [sp, #28]
 8008942:	9307      	strlt	r3, [sp, #28]
 8008944:	bfb8      	it	lt
 8008946:	9204      	strlt	r2, [sp, #16]
 8008948:	7823      	ldrb	r3, [r4, #0]
 800894a:	2b2e      	cmp	r3, #46	@ 0x2e
 800894c:	d10a      	bne.n	8008964 <_svfiprintf_r+0x130>
 800894e:	7863      	ldrb	r3, [r4, #1]
 8008950:	2b2a      	cmp	r3, #42	@ 0x2a
 8008952:	d132      	bne.n	80089ba <_svfiprintf_r+0x186>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	3402      	adds	r4, #2
 8008958:	1d1a      	adds	r2, r3, #4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	9203      	str	r2, [sp, #12]
 800895e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a1c <_svfiprintf_r+0x1e8>
 8008968:	2203      	movs	r2, #3
 800896a:	4650      	mov	r0, sl
 800896c:	7821      	ldrb	r1, [r4, #0]
 800896e:	f7fd fc70 	bl	8006252 <memchr>
 8008972:	b138      	cbz	r0, 8008984 <_svfiprintf_r+0x150>
 8008974:	2240      	movs	r2, #64	@ 0x40
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	eba0 000a 	sub.w	r0, r0, sl
 800897c:	4082      	lsls	r2, r0
 800897e:	4313      	orrs	r3, r2
 8008980:	3401      	adds	r4, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008988:	2206      	movs	r2, #6
 800898a:	4825      	ldr	r0, [pc, #148]	@ (8008a20 <_svfiprintf_r+0x1ec>)
 800898c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008990:	f7fd fc5f 	bl	8006252 <memchr>
 8008994:	2800      	cmp	r0, #0
 8008996:	d036      	beq.n	8008a06 <_svfiprintf_r+0x1d2>
 8008998:	4b22      	ldr	r3, [pc, #136]	@ (8008a24 <_svfiprintf_r+0x1f0>)
 800899a:	bb1b      	cbnz	r3, 80089e4 <_svfiprintf_r+0x1b0>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	3307      	adds	r3, #7
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	3308      	adds	r3, #8
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089aa:	4433      	add	r3, r6
 80089ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ae:	e76a      	b.n	8008886 <_svfiprintf_r+0x52>
 80089b0:	460c      	mov	r4, r1
 80089b2:	2001      	movs	r0, #1
 80089b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b8:	e7a8      	b.n	800890c <_svfiprintf_r+0xd8>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f04f 0c0a 	mov.w	ip, #10
 80089c0:	4619      	mov	r1, r3
 80089c2:	3401      	adds	r4, #1
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	4620      	mov	r0, r4
 80089c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089cc:	3a30      	subs	r2, #48	@ 0x30
 80089ce:	2a09      	cmp	r2, #9
 80089d0:	d903      	bls.n	80089da <_svfiprintf_r+0x1a6>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0c6      	beq.n	8008964 <_svfiprintf_r+0x130>
 80089d6:	9105      	str	r1, [sp, #20]
 80089d8:	e7c4      	b.n	8008964 <_svfiprintf_r+0x130>
 80089da:	4604      	mov	r4, r0
 80089dc:	2301      	movs	r3, #1
 80089de:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e2:	e7f0      	b.n	80089c6 <_svfiprintf_r+0x192>
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4638      	mov	r0, r7
 80089ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <_svfiprintf_r+0x1f4>)
 80089ee:	a904      	add	r1, sp, #16
 80089f0:	f7fc fc88 	bl	8005304 <_printf_float>
 80089f4:	1c42      	adds	r2, r0, #1
 80089f6:	4606      	mov	r6, r0
 80089f8:	d1d6      	bne.n	80089a8 <_svfiprintf_r+0x174>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	065b      	lsls	r3, r3, #25
 80089fe:	f53f af2d 	bmi.w	800885c <_svfiprintf_r+0x28>
 8008a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a04:	e72c      	b.n	8008860 <_svfiprintf_r+0x2c>
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <_svfiprintf_r+0x1f4>)
 8008a10:	a904      	add	r1, sp, #16
 8008a12:	f7fc ff15 	bl	8005840 <_printf_i>
 8008a16:	e7ed      	b.n	80089f4 <_svfiprintf_r+0x1c0>
 8008a18:	08009d39 	.word	0x08009d39
 8008a1c:	08009d3f 	.word	0x08009d3f
 8008a20:	08009d43 	.word	0x08009d43
 8008a24:	08005305 	.word	0x08005305
 8008a28:	0800877d 	.word	0x0800877d

08008a2c <__sflush_r>:
 8008a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	0716      	lsls	r6, r2, #28
 8008a34:	4605      	mov	r5, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	d454      	bmi.n	8008ae4 <__sflush_r+0xb8>
 8008a3a:	684b      	ldr	r3, [r1, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc02      	bgt.n	8008a46 <__sflush_r+0x1a>
 8008a40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd48      	ble.n	8008ad8 <__sflush_r+0xac>
 8008a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	d045      	beq.n	8008ad8 <__sflush_r+0xac>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a52:	682f      	ldr	r7, [r5, #0]
 8008a54:	6a21      	ldr	r1, [r4, #32]
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	d030      	beq.n	8008abc <__sflush_r+0x90>
 8008a5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	0759      	lsls	r1, r3, #29
 8008a60:	d505      	bpl.n	8008a6e <__sflush_r+0x42>
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a68:	b10b      	cbz	r3, 8008a6e <__sflush_r+0x42>
 8008a6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a6c:	1ad2      	subs	r2, r2, r3
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4628      	mov	r0, r5
 8008a72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a74:	6a21      	ldr	r1, [r4, #32]
 8008a76:	47b0      	blx	r6
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	d106      	bne.n	8008a8c <__sflush_r+0x60>
 8008a7e:	6829      	ldr	r1, [r5, #0]
 8008a80:	291d      	cmp	r1, #29
 8008a82:	d82b      	bhi.n	8008adc <__sflush_r+0xb0>
 8008a84:	4a28      	ldr	r2, [pc, #160]	@ (8008b28 <__sflush_r+0xfc>)
 8008a86:	410a      	asrs	r2, r1
 8008a88:	07d6      	lsls	r6, r2, #31
 8008a8a:	d427      	bmi.n	8008adc <__sflush_r+0xb0>
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6062      	str	r2, [r4, #4]
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	04d9      	lsls	r1, r3, #19
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	d504      	bpl.n	8008aa2 <__sflush_r+0x76>
 8008a98:	1c42      	adds	r2, r0, #1
 8008a9a:	d101      	bne.n	8008aa0 <__sflush_r+0x74>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b903      	cbnz	r3, 8008aa2 <__sflush_r+0x76>
 8008aa0:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aa4:	602f      	str	r7, [r5, #0]
 8008aa6:	b1b9      	cbz	r1, 8008ad8 <__sflush_r+0xac>
 8008aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aac:	4299      	cmp	r1, r3
 8008aae:	d002      	beq.n	8008ab6 <__sflush_r+0x8a>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f7fe fa41 	bl	8006f38 <_free_r>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aba:	e00d      	b.n	8008ad8 <__sflush_r+0xac>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b0      	blx	r6
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	1c50      	adds	r0, r2, #1
 8008ac6:	d1c9      	bne.n	8008a5c <__sflush_r+0x30>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0c6      	beq.n	8008a5c <__sflush_r+0x30>
 8008ace:	2b1d      	cmp	r3, #29
 8008ad0:	d001      	beq.n	8008ad6 <__sflush_r+0xaa>
 8008ad2:	2b16      	cmp	r3, #22
 8008ad4:	d11d      	bne.n	8008b12 <__sflush_r+0xe6>
 8008ad6:	602f      	str	r7, [r5, #0]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e021      	b.n	8008b20 <__sflush_r+0xf4>
 8008adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	e01a      	b.n	8008b1a <__sflush_r+0xee>
 8008ae4:	690f      	ldr	r7, [r1, #16]
 8008ae6:	2f00      	cmp	r7, #0
 8008ae8:	d0f6      	beq.n	8008ad8 <__sflush_r+0xac>
 8008aea:	0793      	lsls	r3, r2, #30
 8008aec:	bf18      	it	ne
 8008aee:	2300      	movne	r3, #0
 8008af0:	680e      	ldr	r6, [r1, #0]
 8008af2:	bf08      	it	eq
 8008af4:	694b      	ldreq	r3, [r1, #20]
 8008af6:	1bf6      	subs	r6, r6, r7
 8008af8:	600f      	str	r7, [r1, #0]
 8008afa:	608b      	str	r3, [r1, #8]
 8008afc:	2e00      	cmp	r6, #0
 8008afe:	ddeb      	ble.n	8008ad8 <__sflush_r+0xac>
 8008b00:	4633      	mov	r3, r6
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	6a21      	ldr	r1, [r4, #32]
 8008b08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b0c:	47e0      	blx	ip
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	dc07      	bgt.n	8008b22 <__sflush_r+0xf6>
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b22:	4407      	add	r7, r0
 8008b24:	1a36      	subs	r6, r6, r0
 8008b26:	e7e9      	b.n	8008afc <__sflush_r+0xd0>
 8008b28:	dfbffffe 	.word	0xdfbffffe

08008b2c <_fflush_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b913      	cbnz	r3, 8008b3c <_fflush_r+0x10>
 8008b36:	2500      	movs	r5, #0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	b118      	cbz	r0, 8008b46 <_fflush_r+0x1a>
 8008b3e:	6a03      	ldr	r3, [r0, #32]
 8008b40:	b90b      	cbnz	r3, 8008b46 <_fflush_r+0x1a>
 8008b42:	f7fd fa39 	bl	8005fb8 <__sinit>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f3      	beq.n	8008b36 <_fflush_r+0xa>
 8008b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b50:	07d0      	lsls	r0, r2, #31
 8008b52:	d404      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b54:	0599      	lsls	r1, r3, #22
 8008b56:	d402      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5a:	f7fd fb78 	bl	800624e <__retarget_lock_acquire_recursive>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	4621      	mov	r1, r4
 8008b62:	f7ff ff63 	bl	8008a2c <__sflush_r>
 8008b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b68:	4605      	mov	r5, r0
 8008b6a:	07da      	lsls	r2, r3, #31
 8008b6c:	d4e4      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	059b      	lsls	r3, r3, #22
 8008b72:	d4e1      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b76:	f7fd fb6b 	bl	8006250 <__retarget_lock_release_recursive>
 8008b7a:	e7dd      	b.n	8008b38 <_fflush_r+0xc>

08008b7c <memmove>:
 8008b7c:	4288      	cmp	r0, r1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	eb01 0402 	add.w	r4, r1, r2
 8008b84:	d902      	bls.n	8008b8c <memmove+0x10>
 8008b86:	4284      	cmp	r4, r0
 8008b88:	4623      	mov	r3, r4
 8008b8a:	d807      	bhi.n	8008b9c <memmove+0x20>
 8008b8c:	1e43      	subs	r3, r0, #1
 8008b8e:	42a1      	cmp	r1, r4
 8008b90:	d008      	beq.n	8008ba4 <memmove+0x28>
 8008b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b9a:	e7f8      	b.n	8008b8e <memmove+0x12>
 8008b9c:	4601      	mov	r1, r0
 8008b9e:	4402      	add	r2, r0
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	d100      	bne.n	8008ba6 <memmove+0x2a>
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bae:	e7f7      	b.n	8008ba0 <memmove+0x24>

08008bb0 <strncmp>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	b16a      	cbz	r2, 8008bd0 <strncmp+0x20>
 8008bb4:	3901      	subs	r1, #1
 8008bb6:	1884      	adds	r4, r0, r2
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d103      	bne.n	8008bcc <strncmp+0x1c>
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d001      	beq.n	8008bcc <strncmp+0x1c>
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	d1f5      	bne.n	8008bb8 <strncmp+0x8>
 8008bcc:	1ad0      	subs	r0, r2, r3
 8008bce:	bd10      	pop	{r4, pc}
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	e7fc      	b.n	8008bce <strncmp+0x1e>

08008bd4 <_sbrk_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4d05      	ldr	r5, [pc, #20]	@ (8008bf0 <_sbrk_r+0x1c>)
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f7f9 f8e8 	bl	8001db4 <_sbrk>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_sbrk_r+0x1a>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_sbrk_r+0x1a>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	2000053c 	.word	0x2000053c

08008bf4 <nan>:
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	4901      	ldr	r1, [pc, #4]	@ (8008bfc <nan+0x8>)
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	7ff80000 	.word	0x7ff80000

08008c00 <__assert_func>:
 8008c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c02:	4614      	mov	r4, r2
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <__assert_func+0x2c>)
 8008c08:	4605      	mov	r5, r0
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68d8      	ldr	r0, [r3, #12]
 8008c0e:	b954      	cbnz	r4, 8008c26 <__assert_func+0x26>
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <__assert_func+0x30>)
 8008c12:	461c      	mov	r4, r3
 8008c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c18:	9100      	str	r1, [sp, #0]
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	4905      	ldr	r1, [pc, #20]	@ (8008c34 <__assert_func+0x34>)
 8008c1e:	f000 fba7 	bl	8009370 <fiprintf>
 8008c22:	f000 fbb7 	bl	8009394 <abort>
 8008c26:	4b04      	ldr	r3, [pc, #16]	@ (8008c38 <__assert_func+0x38>)
 8008c28:	e7f4      	b.n	8008c14 <__assert_func+0x14>
 8008c2a:	bf00      	nop
 8008c2c:	20000018 	.word	0x20000018
 8008c30:	08009d8d 	.word	0x08009d8d
 8008c34:	08009d5f 	.word	0x08009d5f
 8008c38:	08009d52 	.word	0x08009d52

08008c3c <_calloc_r>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	fba1 5402 	umull	r5, r4, r1, r2
 8008c42:	b93c      	cbnz	r4, 8008c54 <_calloc_r+0x18>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7fe f9e9 	bl	800701c <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b928      	cbnz	r0, 8008c5a <_calloc_r+0x1e>
 8008c4e:	2600      	movs	r6, #0
 8008c50:	4630      	mov	r0, r6
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	220c      	movs	r2, #12
 8008c56:	6002      	str	r2, [r0, #0]
 8008c58:	e7f9      	b.n	8008c4e <_calloc_r+0x12>
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f7fd fa78 	bl	8006152 <memset>
 8008c62:	e7f5      	b.n	8008c50 <_calloc_r+0x14>

08008c64 <rshift>:
 8008c64:	6903      	ldr	r3, [r0, #16]
 8008c66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c6e:	f100 0414 	add.w	r4, r0, #20
 8008c72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c76:	dd46      	ble.n	8008d06 <rshift+0xa2>
 8008c78:	f011 011f 	ands.w	r1, r1, #31
 8008c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c84:	d10c      	bne.n	8008ca0 <rshift+0x3c>
 8008c86:	4629      	mov	r1, r5
 8008c88:	f100 0710 	add.w	r7, r0, #16
 8008c8c:	42b1      	cmp	r1, r6
 8008c8e:	d335      	bcc.n	8008cfc <rshift+0x98>
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	1eea      	subs	r2, r5, #3
 8008c96:	4296      	cmp	r6, r2
 8008c98:	bf38      	it	cc
 8008c9a:	2300      	movcc	r3, #0
 8008c9c:	4423      	add	r3, r4
 8008c9e:	e015      	b.n	8008ccc <rshift+0x68>
 8008ca0:	46a1      	mov	r9, r4
 8008ca2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ca6:	f1c1 0820 	rsb	r8, r1, #32
 8008caa:	40cf      	lsrs	r7, r1
 8008cac:	f105 0e04 	add.w	lr, r5, #4
 8008cb0:	4576      	cmp	r6, lr
 8008cb2:	46f4      	mov	ip, lr
 8008cb4:	d816      	bhi.n	8008ce4 <rshift+0x80>
 8008cb6:	1a9a      	subs	r2, r3, r2
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	3a04      	subs	r2, #4
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	bf38      	it	cc
 8008cc2:	2200      	movcc	r2, #0
 8008cc4:	18a3      	adds	r3, r4, r2
 8008cc6:	50a7      	str	r7, [r4, r2]
 8008cc8:	b107      	cbz	r7, 8008ccc <rshift+0x68>
 8008cca:	3304      	adds	r3, #4
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	eba3 0204 	sub.w	r2, r3, r4
 8008cd2:	bf08      	it	eq
 8008cd4:	2300      	moveq	r3, #0
 8008cd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cda:	6102      	str	r2, [r0, #16]
 8008cdc:	bf08      	it	eq
 8008cde:	6143      	streq	r3, [r0, #20]
 8008ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce4:	f8dc c000 	ldr.w	ip, [ip]
 8008ce8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cec:	ea4c 0707 	orr.w	r7, ip, r7
 8008cf0:	f849 7b04 	str.w	r7, [r9], #4
 8008cf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cf8:	40cf      	lsrs	r7, r1
 8008cfa:	e7d9      	b.n	8008cb0 <rshift+0x4c>
 8008cfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d00:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d04:	e7c2      	b.n	8008c8c <rshift+0x28>
 8008d06:	4623      	mov	r3, r4
 8008d08:	e7e0      	b.n	8008ccc <rshift+0x68>

08008d0a <__hexdig_fun>:
 8008d0a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d0e:	2b09      	cmp	r3, #9
 8008d10:	d802      	bhi.n	8008d18 <__hexdig_fun+0xe>
 8008d12:	3820      	subs	r0, #32
 8008d14:	b2c0      	uxtb	r0, r0
 8008d16:	4770      	bx	lr
 8008d18:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d1c:	2b05      	cmp	r3, #5
 8008d1e:	d801      	bhi.n	8008d24 <__hexdig_fun+0x1a>
 8008d20:	3847      	subs	r0, #71	@ 0x47
 8008d22:	e7f7      	b.n	8008d14 <__hexdig_fun+0xa>
 8008d24:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d28:	2b05      	cmp	r3, #5
 8008d2a:	d801      	bhi.n	8008d30 <__hexdig_fun+0x26>
 8008d2c:	3827      	subs	r0, #39	@ 0x27
 8008d2e:	e7f1      	b.n	8008d14 <__hexdig_fun+0xa>
 8008d30:	2000      	movs	r0, #0
 8008d32:	4770      	bx	lr

08008d34 <__gethex>:
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	468a      	mov	sl, r1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	680b      	ldr	r3, [r1, #0]
 8008d42:	9001      	str	r0, [sp, #4]
 8008d44:	1c9c      	adds	r4, r3, #2
 8008d46:	46a1      	mov	r9, r4
 8008d48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d4c:	2830      	cmp	r0, #48	@ 0x30
 8008d4e:	d0fa      	beq.n	8008d46 <__gethex+0x12>
 8008d50:	eba9 0303 	sub.w	r3, r9, r3
 8008d54:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d58:	f7ff ffd7 	bl	8008d0a <__hexdig_fun>
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d168      	bne.n	8008e34 <__gethex+0x100>
 8008d62:	2201      	movs	r2, #1
 8008d64:	4648      	mov	r0, r9
 8008d66:	499f      	ldr	r1, [pc, #636]	@ (8008fe4 <__gethex+0x2b0>)
 8008d68:	f7ff ff22 	bl	8008bb0 <strncmp>
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d167      	bne.n	8008e42 <__gethex+0x10e>
 8008d72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d76:	4626      	mov	r6, r4
 8008d78:	f7ff ffc7 	bl	8008d0a <__hexdig_fun>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d062      	beq.n	8008e46 <__gethex+0x112>
 8008d80:	4623      	mov	r3, r4
 8008d82:	7818      	ldrb	r0, [r3, #0]
 8008d84:	4699      	mov	r9, r3
 8008d86:	2830      	cmp	r0, #48	@ 0x30
 8008d88:	f103 0301 	add.w	r3, r3, #1
 8008d8c:	d0f9      	beq.n	8008d82 <__gethex+0x4e>
 8008d8e:	f7ff ffbc 	bl	8008d0a <__hexdig_fun>
 8008d92:	fab0 f580 	clz	r5, r0
 8008d96:	f04f 0b01 	mov.w	fp, #1
 8008d9a:	096d      	lsrs	r5, r5, #5
 8008d9c:	464a      	mov	r2, r9
 8008d9e:	4616      	mov	r6, r2
 8008da0:	7830      	ldrb	r0, [r6, #0]
 8008da2:	3201      	adds	r2, #1
 8008da4:	f7ff ffb1 	bl	8008d0a <__hexdig_fun>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d1f8      	bne.n	8008d9e <__gethex+0x6a>
 8008dac:	2201      	movs	r2, #1
 8008dae:	4630      	mov	r0, r6
 8008db0:	498c      	ldr	r1, [pc, #560]	@ (8008fe4 <__gethex+0x2b0>)
 8008db2:	f7ff fefd 	bl	8008bb0 <strncmp>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d13f      	bne.n	8008e3a <__gethex+0x106>
 8008dba:	b944      	cbnz	r4, 8008dce <__gethex+0x9a>
 8008dbc:	1c74      	adds	r4, r6, #1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	7830      	ldrb	r0, [r6, #0]
 8008dc4:	3201      	adds	r2, #1
 8008dc6:	f7ff ffa0 	bl	8008d0a <__hexdig_fun>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d1f8      	bne.n	8008dc0 <__gethex+0x8c>
 8008dce:	1ba4      	subs	r4, r4, r6
 8008dd0:	00a7      	lsls	r7, r4, #2
 8008dd2:	7833      	ldrb	r3, [r6, #0]
 8008dd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008dd8:	2b50      	cmp	r3, #80	@ 0x50
 8008dda:	d13e      	bne.n	8008e5a <__gethex+0x126>
 8008ddc:	7873      	ldrb	r3, [r6, #1]
 8008dde:	2b2b      	cmp	r3, #43	@ 0x2b
 8008de0:	d033      	beq.n	8008e4a <__gethex+0x116>
 8008de2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008de4:	d034      	beq.n	8008e50 <__gethex+0x11c>
 8008de6:	2400      	movs	r4, #0
 8008de8:	1c71      	adds	r1, r6, #1
 8008dea:	7808      	ldrb	r0, [r1, #0]
 8008dec:	f7ff ff8d 	bl	8008d0a <__hexdig_fun>
 8008df0:	1e43      	subs	r3, r0, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b18      	cmp	r3, #24
 8008df6:	d830      	bhi.n	8008e5a <__gethex+0x126>
 8008df8:	f1a0 0210 	sub.w	r2, r0, #16
 8008dfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e00:	f7ff ff83 	bl	8008d0a <__hexdig_fun>
 8008e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e08:	fa5f fc8c 	uxtb.w	ip, ip
 8008e0c:	f1bc 0f18 	cmp.w	ip, #24
 8008e10:	f04f 030a 	mov.w	r3, #10
 8008e14:	d91e      	bls.n	8008e54 <__gethex+0x120>
 8008e16:	b104      	cbz	r4, 8008e1a <__gethex+0xe6>
 8008e18:	4252      	negs	r2, r2
 8008e1a:	4417      	add	r7, r2
 8008e1c:	f8ca 1000 	str.w	r1, [sl]
 8008e20:	b1ed      	cbz	r5, 8008e5e <__gethex+0x12a>
 8008e22:	f1bb 0f00 	cmp.w	fp, #0
 8008e26:	bf0c      	ite	eq
 8008e28:	2506      	moveq	r5, #6
 8008e2a:	2500      	movne	r5, #0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	b005      	add	sp, #20
 8008e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e34:	2500      	movs	r5, #0
 8008e36:	462c      	mov	r4, r5
 8008e38:	e7b0      	b.n	8008d9c <__gethex+0x68>
 8008e3a:	2c00      	cmp	r4, #0
 8008e3c:	d1c7      	bne.n	8008dce <__gethex+0x9a>
 8008e3e:	4627      	mov	r7, r4
 8008e40:	e7c7      	b.n	8008dd2 <__gethex+0x9e>
 8008e42:	464e      	mov	r6, r9
 8008e44:	462f      	mov	r7, r5
 8008e46:	2501      	movs	r5, #1
 8008e48:	e7c3      	b.n	8008dd2 <__gethex+0x9e>
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	1cb1      	adds	r1, r6, #2
 8008e4e:	e7cc      	b.n	8008dea <__gethex+0xb6>
 8008e50:	2401      	movs	r4, #1
 8008e52:	e7fb      	b.n	8008e4c <__gethex+0x118>
 8008e54:	fb03 0002 	mla	r0, r3, r2, r0
 8008e58:	e7ce      	b.n	8008df8 <__gethex+0xc4>
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	e7de      	b.n	8008e1c <__gethex+0xe8>
 8008e5e:	4629      	mov	r1, r5
 8008e60:	eba6 0309 	sub.w	r3, r6, r9
 8008e64:	3b01      	subs	r3, #1
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	dc0a      	bgt.n	8008e80 <__gethex+0x14c>
 8008e6a:	9801      	ldr	r0, [sp, #4]
 8008e6c:	f7fe f962 	bl	8007134 <_Balloc>
 8008e70:	4604      	mov	r4, r0
 8008e72:	b940      	cbnz	r0, 8008e86 <__gethex+0x152>
 8008e74:	4602      	mov	r2, r0
 8008e76:	21e4      	movs	r1, #228	@ 0xe4
 8008e78:	4b5b      	ldr	r3, [pc, #364]	@ (8008fe8 <__gethex+0x2b4>)
 8008e7a:	485c      	ldr	r0, [pc, #368]	@ (8008fec <__gethex+0x2b8>)
 8008e7c:	f7ff fec0 	bl	8008c00 <__assert_func>
 8008e80:	3101      	adds	r1, #1
 8008e82:	105b      	asrs	r3, r3, #1
 8008e84:	e7ef      	b.n	8008e66 <__gethex+0x132>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f100 0a14 	add.w	sl, r0, #20
 8008e8c:	4655      	mov	r5, sl
 8008e8e:	469b      	mov	fp, r3
 8008e90:	45b1      	cmp	r9, r6
 8008e92:	d337      	bcc.n	8008f04 <__gethex+0x1d0>
 8008e94:	f845 bb04 	str.w	fp, [r5], #4
 8008e98:	eba5 050a 	sub.w	r5, r5, sl
 8008e9c:	10ad      	asrs	r5, r5, #2
 8008e9e:	6125      	str	r5, [r4, #16]
 8008ea0:	4658      	mov	r0, fp
 8008ea2:	f7fe fa39 	bl	8007318 <__hi0bits>
 8008ea6:	016d      	lsls	r5, r5, #5
 8008ea8:	f8d8 6000 	ldr.w	r6, [r8]
 8008eac:	1a2d      	subs	r5, r5, r0
 8008eae:	42b5      	cmp	r5, r6
 8008eb0:	dd54      	ble.n	8008f5c <__gethex+0x228>
 8008eb2:	1bad      	subs	r5, r5, r6
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7fe fdc1 	bl	8007a3e <__any_on>
 8008ebc:	4681      	mov	r9, r0
 8008ebe:	b178      	cbz	r0, 8008ee0 <__gethex+0x1ac>
 8008ec0:	f04f 0901 	mov.w	r9, #1
 8008ec4:	1e6b      	subs	r3, r5, #1
 8008ec6:	1159      	asrs	r1, r3, #5
 8008ec8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ecc:	f003 021f 	and.w	r2, r3, #31
 8008ed0:	fa09 f202 	lsl.w	r2, r9, r2
 8008ed4:	420a      	tst	r2, r1
 8008ed6:	d003      	beq.n	8008ee0 <__gethex+0x1ac>
 8008ed8:	454b      	cmp	r3, r9
 8008eda:	dc36      	bgt.n	8008f4a <__gethex+0x216>
 8008edc:	f04f 0902 	mov.w	r9, #2
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7ff febe 	bl	8008c64 <rshift>
 8008ee8:	442f      	add	r7, r5
 8008eea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eee:	42bb      	cmp	r3, r7
 8008ef0:	da42      	bge.n	8008f78 <__gethex+0x244>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	9801      	ldr	r0, [sp, #4]
 8008ef6:	f7fe f95d 	bl	80071b4 <_Bfree>
 8008efa:	2300      	movs	r3, #0
 8008efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008efe:	25a3      	movs	r5, #163	@ 0xa3
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	e793      	b.n	8008e2c <__gethex+0xf8>
 8008f04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f08:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f0a:	d012      	beq.n	8008f32 <__gethex+0x1fe>
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d104      	bne.n	8008f1a <__gethex+0x1e6>
 8008f10:	f845 bb04 	str.w	fp, [r5], #4
 8008f14:	f04f 0b00 	mov.w	fp, #0
 8008f18:	465b      	mov	r3, fp
 8008f1a:	7830      	ldrb	r0, [r6, #0]
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	f7ff fef4 	bl	8008d0a <__hexdig_fun>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	f000 000f 	and.w	r0, r0, #15
 8008f28:	4098      	lsls	r0, r3
 8008f2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f2e:	3304      	adds	r3, #4
 8008f30:	e7ae      	b.n	8008e90 <__gethex+0x15c>
 8008f32:	45b1      	cmp	r9, r6
 8008f34:	d8ea      	bhi.n	8008f0c <__gethex+0x1d8>
 8008f36:	2201      	movs	r2, #1
 8008f38:	4630      	mov	r0, r6
 8008f3a:	492a      	ldr	r1, [pc, #168]	@ (8008fe4 <__gethex+0x2b0>)
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	f7ff fe37 	bl	8008bb0 <strncmp>
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1e1      	bne.n	8008f0c <__gethex+0x1d8>
 8008f48:	e7a2      	b.n	8008e90 <__gethex+0x15c>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	1ea9      	subs	r1, r5, #2
 8008f4e:	f7fe fd76 	bl	8007a3e <__any_on>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d0c2      	beq.n	8008edc <__gethex+0x1a8>
 8008f56:	f04f 0903 	mov.w	r9, #3
 8008f5a:	e7c1      	b.n	8008ee0 <__gethex+0x1ac>
 8008f5c:	da09      	bge.n	8008f72 <__gethex+0x23e>
 8008f5e:	1b75      	subs	r5, r6, r5
 8008f60:	4621      	mov	r1, r4
 8008f62:	462a      	mov	r2, r5
 8008f64:	9801      	ldr	r0, [sp, #4]
 8008f66:	f7fe fb3b 	bl	80075e0 <__lshift>
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	1b7f      	subs	r7, r7, r5
 8008f6e:	f100 0a14 	add.w	sl, r0, #20
 8008f72:	f04f 0900 	mov.w	r9, #0
 8008f76:	e7b8      	b.n	8008eea <__gethex+0x1b6>
 8008f78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f7c:	42bd      	cmp	r5, r7
 8008f7e:	dd6f      	ble.n	8009060 <__gethex+0x32c>
 8008f80:	1bed      	subs	r5, r5, r7
 8008f82:	42ae      	cmp	r6, r5
 8008f84:	dc34      	bgt.n	8008ff0 <__gethex+0x2bc>
 8008f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d022      	beq.n	8008fd4 <__gethex+0x2a0>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d024      	beq.n	8008fdc <__gethex+0x2a8>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d115      	bne.n	8008fc2 <__gethex+0x28e>
 8008f96:	42ae      	cmp	r6, r5
 8008f98:	d113      	bne.n	8008fc2 <__gethex+0x28e>
 8008f9a:	2e01      	cmp	r6, #1
 8008f9c:	d10b      	bne.n	8008fb6 <__gethex+0x282>
 8008f9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fa2:	9a02      	ldr	r2, [sp, #8]
 8008fa4:	2562      	movs	r5, #98	@ 0x62
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	f8ca 3000 	str.w	r3, [sl]
 8008fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb2:	601c      	str	r4, [r3, #0]
 8008fb4:	e73a      	b.n	8008e2c <__gethex+0xf8>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	1e71      	subs	r1, r6, #1
 8008fba:	f7fe fd40 	bl	8007a3e <__any_on>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d1ed      	bne.n	8008f9e <__gethex+0x26a>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	9801      	ldr	r0, [sp, #4]
 8008fc6:	f7fe f8f5 	bl	80071b4 <_Bfree>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fce:	2550      	movs	r5, #80	@ 0x50
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	e72b      	b.n	8008e2c <__gethex+0xf8>
 8008fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f3      	bne.n	8008fc2 <__gethex+0x28e>
 8008fda:	e7e0      	b.n	8008f9e <__gethex+0x26a>
 8008fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1dd      	bne.n	8008f9e <__gethex+0x26a>
 8008fe2:	e7ee      	b.n	8008fc2 <__gethex+0x28e>
 8008fe4:	08009be0 	.word	0x08009be0
 8008fe8:	08009a77 	.word	0x08009a77
 8008fec:	08009d8e 	.word	0x08009d8e
 8008ff0:	1e6f      	subs	r7, r5, #1
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	d130      	bne.n	800905a <__gethex+0x326>
 8008ff8:	b127      	cbz	r7, 8009004 <__gethex+0x2d0>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7fe fd1e 	bl	8007a3e <__any_on>
 8009002:	4681      	mov	r9, r0
 8009004:	2301      	movs	r3, #1
 8009006:	4629      	mov	r1, r5
 8009008:	1b76      	subs	r6, r6, r5
 800900a:	2502      	movs	r5, #2
 800900c:	117a      	asrs	r2, r7, #5
 800900e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009012:	f007 071f 	and.w	r7, r7, #31
 8009016:	40bb      	lsls	r3, r7
 8009018:	4213      	tst	r3, r2
 800901a:	4620      	mov	r0, r4
 800901c:	bf18      	it	ne
 800901e:	f049 0902 	orrne.w	r9, r9, #2
 8009022:	f7ff fe1f 	bl	8008c64 <rshift>
 8009026:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	d047      	beq.n	80090c0 <__gethex+0x38c>
 8009030:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d015      	beq.n	8009064 <__gethex+0x330>
 8009038:	2b03      	cmp	r3, #3
 800903a:	d017      	beq.n	800906c <__gethex+0x338>
 800903c:	2b01      	cmp	r3, #1
 800903e:	d109      	bne.n	8009054 <__gethex+0x320>
 8009040:	f019 0f02 	tst.w	r9, #2
 8009044:	d006      	beq.n	8009054 <__gethex+0x320>
 8009046:	f8da 3000 	ldr.w	r3, [sl]
 800904a:	ea49 0903 	orr.w	r9, r9, r3
 800904e:	f019 0f01 	tst.w	r9, #1
 8009052:	d10e      	bne.n	8009072 <__gethex+0x33e>
 8009054:	f045 0510 	orr.w	r5, r5, #16
 8009058:	e032      	b.n	80090c0 <__gethex+0x38c>
 800905a:	f04f 0901 	mov.w	r9, #1
 800905e:	e7d1      	b.n	8009004 <__gethex+0x2d0>
 8009060:	2501      	movs	r5, #1
 8009062:	e7e2      	b.n	800902a <__gethex+0x2f6>
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	f1c3 0301 	rsb	r3, r3, #1
 800906a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800906c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f0      	beq.n	8009054 <__gethex+0x320>
 8009072:	f04f 0c00 	mov.w	ip, #0
 8009076:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800907a:	f104 0314 	add.w	r3, r4, #20
 800907e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009082:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009086:	4618      	mov	r0, r3
 8009088:	f853 2b04 	ldr.w	r2, [r3], #4
 800908c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009090:	d01b      	beq.n	80090ca <__gethex+0x396>
 8009092:	3201      	adds	r2, #1
 8009094:	6002      	str	r2, [r0, #0]
 8009096:	2d02      	cmp	r5, #2
 8009098:	f104 0314 	add.w	r3, r4, #20
 800909c:	d13c      	bne.n	8009118 <__gethex+0x3e4>
 800909e:	f8d8 2000 	ldr.w	r2, [r8]
 80090a2:	3a01      	subs	r2, #1
 80090a4:	42b2      	cmp	r2, r6
 80090a6:	d109      	bne.n	80090bc <__gethex+0x388>
 80090a8:	2201      	movs	r2, #1
 80090aa:	1171      	asrs	r1, r6, #5
 80090ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090b0:	f006 061f 	and.w	r6, r6, #31
 80090b4:	fa02 f606 	lsl.w	r6, r2, r6
 80090b8:	421e      	tst	r6, r3
 80090ba:	d13a      	bne.n	8009132 <__gethex+0x3fe>
 80090bc:	f045 0520 	orr.w	r5, r5, #32
 80090c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c2:	601c      	str	r4, [r3, #0]
 80090c4:	9b02      	ldr	r3, [sp, #8]
 80090c6:	601f      	str	r7, [r3, #0]
 80090c8:	e6b0      	b.n	8008e2c <__gethex+0xf8>
 80090ca:	4299      	cmp	r1, r3
 80090cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80090d0:	d8d9      	bhi.n	8009086 <__gethex+0x352>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	459b      	cmp	fp, r3
 80090d6:	db17      	blt.n	8009108 <__gethex+0x3d4>
 80090d8:	6861      	ldr	r1, [r4, #4]
 80090da:	9801      	ldr	r0, [sp, #4]
 80090dc:	3101      	adds	r1, #1
 80090de:	f7fe f829 	bl	8007134 <_Balloc>
 80090e2:	4681      	mov	r9, r0
 80090e4:	b918      	cbnz	r0, 80090ee <__gethex+0x3ba>
 80090e6:	4602      	mov	r2, r0
 80090e8:	2184      	movs	r1, #132	@ 0x84
 80090ea:	4b19      	ldr	r3, [pc, #100]	@ (8009150 <__gethex+0x41c>)
 80090ec:	e6c5      	b.n	8008e7a <__gethex+0x146>
 80090ee:	6922      	ldr	r2, [r4, #16]
 80090f0:	f104 010c 	add.w	r1, r4, #12
 80090f4:	3202      	adds	r2, #2
 80090f6:	0092      	lsls	r2, r2, #2
 80090f8:	300c      	adds	r0, #12
 80090fa:	f7fd f8b8 	bl	800626e <memcpy>
 80090fe:	4621      	mov	r1, r4
 8009100:	9801      	ldr	r0, [sp, #4]
 8009102:	f7fe f857 	bl	80071b4 <_Bfree>
 8009106:	464c      	mov	r4, r9
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	6122      	str	r2, [r4, #16]
 800910e:	2201      	movs	r2, #1
 8009110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009114:	615a      	str	r2, [r3, #20]
 8009116:	e7be      	b.n	8009096 <__gethex+0x362>
 8009118:	6922      	ldr	r2, [r4, #16]
 800911a:	455a      	cmp	r2, fp
 800911c:	dd0b      	ble.n	8009136 <__gethex+0x402>
 800911e:	2101      	movs	r1, #1
 8009120:	4620      	mov	r0, r4
 8009122:	f7ff fd9f 	bl	8008c64 <rshift>
 8009126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800912a:	3701      	adds	r7, #1
 800912c:	42bb      	cmp	r3, r7
 800912e:	f6ff aee0 	blt.w	8008ef2 <__gethex+0x1be>
 8009132:	2501      	movs	r5, #1
 8009134:	e7c2      	b.n	80090bc <__gethex+0x388>
 8009136:	f016 061f 	ands.w	r6, r6, #31
 800913a:	d0fa      	beq.n	8009132 <__gethex+0x3fe>
 800913c:	4453      	add	r3, sl
 800913e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009142:	f7fe f8e9 	bl	8007318 <__hi0bits>
 8009146:	f1c6 0620 	rsb	r6, r6, #32
 800914a:	42b0      	cmp	r0, r6
 800914c:	dbe7      	blt.n	800911e <__gethex+0x3ea>
 800914e:	e7f0      	b.n	8009132 <__gethex+0x3fe>
 8009150:	08009a77 	.word	0x08009a77

08009154 <L_shift>:
 8009154:	f1c2 0208 	rsb	r2, r2, #8
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	b570      	push	{r4, r5, r6, lr}
 800915c:	f1c2 0620 	rsb	r6, r2, #32
 8009160:	6843      	ldr	r3, [r0, #4]
 8009162:	6804      	ldr	r4, [r0, #0]
 8009164:	fa03 f506 	lsl.w	r5, r3, r6
 8009168:	432c      	orrs	r4, r5
 800916a:	40d3      	lsrs	r3, r2
 800916c:	6004      	str	r4, [r0, #0]
 800916e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009172:	4288      	cmp	r0, r1
 8009174:	d3f4      	bcc.n	8009160 <L_shift+0xc>
 8009176:	bd70      	pop	{r4, r5, r6, pc}

08009178 <__match>:
 8009178:	b530      	push	{r4, r5, lr}
 800917a:	6803      	ldr	r3, [r0, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009182:	b914      	cbnz	r4, 800918a <__match+0x12>
 8009184:	6003      	str	r3, [r0, #0]
 8009186:	2001      	movs	r0, #1
 8009188:	bd30      	pop	{r4, r5, pc}
 800918a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009192:	2d19      	cmp	r5, #25
 8009194:	bf98      	it	ls
 8009196:	3220      	addls	r2, #32
 8009198:	42a2      	cmp	r2, r4
 800919a:	d0f0      	beq.n	800917e <__match+0x6>
 800919c:	2000      	movs	r0, #0
 800919e:	e7f3      	b.n	8009188 <__match+0x10>

080091a0 <__hexnan>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	2500      	movs	r5, #0
 80091a6:	680b      	ldr	r3, [r1, #0]
 80091a8:	4682      	mov	sl, r0
 80091aa:	115e      	asrs	r6, r3, #5
 80091ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091b0:	f013 031f 	ands.w	r3, r3, #31
 80091b4:	bf18      	it	ne
 80091b6:	3604      	addne	r6, #4
 80091b8:	1f37      	subs	r7, r6, #4
 80091ba:	4690      	mov	r8, r2
 80091bc:	46b9      	mov	r9, r7
 80091be:	463c      	mov	r4, r7
 80091c0:	46ab      	mov	fp, r5
 80091c2:	b087      	sub	sp, #28
 80091c4:	6801      	ldr	r1, [r0, #0]
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80091cc:	9502      	str	r5, [sp, #8]
 80091ce:	784a      	ldrb	r2, [r1, #1]
 80091d0:	1c4b      	adds	r3, r1, #1
 80091d2:	9303      	str	r3, [sp, #12]
 80091d4:	b342      	cbz	r2, 8009228 <__hexnan+0x88>
 80091d6:	4610      	mov	r0, r2
 80091d8:	9105      	str	r1, [sp, #20]
 80091da:	9204      	str	r2, [sp, #16]
 80091dc:	f7ff fd95 	bl	8008d0a <__hexdig_fun>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d151      	bne.n	8009288 <__hexnan+0xe8>
 80091e4:	9a04      	ldr	r2, [sp, #16]
 80091e6:	9905      	ldr	r1, [sp, #20]
 80091e8:	2a20      	cmp	r2, #32
 80091ea:	d818      	bhi.n	800921e <__hexnan+0x7e>
 80091ec:	9b02      	ldr	r3, [sp, #8]
 80091ee:	459b      	cmp	fp, r3
 80091f0:	dd13      	ble.n	800921a <__hexnan+0x7a>
 80091f2:	454c      	cmp	r4, r9
 80091f4:	d206      	bcs.n	8009204 <__hexnan+0x64>
 80091f6:	2d07      	cmp	r5, #7
 80091f8:	dc04      	bgt.n	8009204 <__hexnan+0x64>
 80091fa:	462a      	mov	r2, r5
 80091fc:	4649      	mov	r1, r9
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff ffa8 	bl	8009154 <L_shift>
 8009204:	4544      	cmp	r4, r8
 8009206:	d952      	bls.n	80092ae <__hexnan+0x10e>
 8009208:	2300      	movs	r3, #0
 800920a:	f1a4 0904 	sub.w	r9, r4, #4
 800920e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009212:	461d      	mov	r5, r3
 8009214:	464c      	mov	r4, r9
 8009216:	f8cd b008 	str.w	fp, [sp, #8]
 800921a:	9903      	ldr	r1, [sp, #12]
 800921c:	e7d7      	b.n	80091ce <__hexnan+0x2e>
 800921e:	2a29      	cmp	r2, #41	@ 0x29
 8009220:	d157      	bne.n	80092d2 <__hexnan+0x132>
 8009222:	3102      	adds	r1, #2
 8009224:	f8ca 1000 	str.w	r1, [sl]
 8009228:	f1bb 0f00 	cmp.w	fp, #0
 800922c:	d051      	beq.n	80092d2 <__hexnan+0x132>
 800922e:	454c      	cmp	r4, r9
 8009230:	d206      	bcs.n	8009240 <__hexnan+0xa0>
 8009232:	2d07      	cmp	r5, #7
 8009234:	dc04      	bgt.n	8009240 <__hexnan+0xa0>
 8009236:	462a      	mov	r2, r5
 8009238:	4649      	mov	r1, r9
 800923a:	4620      	mov	r0, r4
 800923c:	f7ff ff8a 	bl	8009154 <L_shift>
 8009240:	4544      	cmp	r4, r8
 8009242:	d936      	bls.n	80092b2 <__hexnan+0x112>
 8009244:	4623      	mov	r3, r4
 8009246:	f1a8 0204 	sub.w	r2, r8, #4
 800924a:	f853 1b04 	ldr.w	r1, [r3], #4
 800924e:	429f      	cmp	r7, r3
 8009250:	f842 1f04 	str.w	r1, [r2, #4]!
 8009254:	d2f9      	bcs.n	800924a <__hexnan+0xaa>
 8009256:	1b3b      	subs	r3, r7, r4
 8009258:	f023 0303 	bic.w	r3, r3, #3
 800925c:	3304      	adds	r3, #4
 800925e:	3401      	adds	r4, #1
 8009260:	3e03      	subs	r6, #3
 8009262:	42b4      	cmp	r4, r6
 8009264:	bf88      	it	hi
 8009266:	2304      	movhi	r3, #4
 8009268:	2200      	movs	r2, #0
 800926a:	4443      	add	r3, r8
 800926c:	f843 2b04 	str.w	r2, [r3], #4
 8009270:	429f      	cmp	r7, r3
 8009272:	d2fb      	bcs.n	800926c <__hexnan+0xcc>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	b91b      	cbnz	r3, 8009280 <__hexnan+0xe0>
 8009278:	4547      	cmp	r7, r8
 800927a:	d128      	bne.n	80092ce <__hexnan+0x12e>
 800927c:	2301      	movs	r3, #1
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	2005      	movs	r0, #5
 8009282:	b007      	add	sp, #28
 8009284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	3501      	adds	r5, #1
 800928a:	2d08      	cmp	r5, #8
 800928c:	f10b 0b01 	add.w	fp, fp, #1
 8009290:	dd06      	ble.n	80092a0 <__hexnan+0x100>
 8009292:	4544      	cmp	r4, r8
 8009294:	d9c1      	bls.n	800921a <__hexnan+0x7a>
 8009296:	2300      	movs	r3, #0
 8009298:	2501      	movs	r5, #1
 800929a:	f844 3c04 	str.w	r3, [r4, #-4]
 800929e:	3c04      	subs	r4, #4
 80092a0:	6822      	ldr	r2, [r4, #0]
 80092a2:	f000 000f 	and.w	r0, r0, #15
 80092a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092aa:	6020      	str	r0, [r4, #0]
 80092ac:	e7b5      	b.n	800921a <__hexnan+0x7a>
 80092ae:	2508      	movs	r5, #8
 80092b0:	e7b3      	b.n	800921a <__hexnan+0x7a>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0dd      	beq.n	8009274 <__hexnan+0xd4>
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	f1c3 0320 	rsb	r3, r3, #32
 80092c0:	40da      	lsrs	r2, r3
 80092c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092c6:	4013      	ands	r3, r2
 80092c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80092cc:	e7d2      	b.n	8009274 <__hexnan+0xd4>
 80092ce:	3f04      	subs	r7, #4
 80092d0:	e7d0      	b.n	8009274 <__hexnan+0xd4>
 80092d2:	2004      	movs	r0, #4
 80092d4:	e7d5      	b.n	8009282 <__hexnan+0xe2>

080092d6 <__ascii_mbtowc>:
 80092d6:	b082      	sub	sp, #8
 80092d8:	b901      	cbnz	r1, 80092dc <__ascii_mbtowc+0x6>
 80092da:	a901      	add	r1, sp, #4
 80092dc:	b142      	cbz	r2, 80092f0 <__ascii_mbtowc+0x1a>
 80092de:	b14b      	cbz	r3, 80092f4 <__ascii_mbtowc+0x1e>
 80092e0:	7813      	ldrb	r3, [r2, #0]
 80092e2:	600b      	str	r3, [r1, #0]
 80092e4:	7812      	ldrb	r2, [r2, #0]
 80092e6:	1e10      	subs	r0, r2, #0
 80092e8:	bf18      	it	ne
 80092ea:	2001      	movne	r0, #1
 80092ec:	b002      	add	sp, #8
 80092ee:	4770      	bx	lr
 80092f0:	4610      	mov	r0, r2
 80092f2:	e7fb      	b.n	80092ec <__ascii_mbtowc+0x16>
 80092f4:	f06f 0001 	mvn.w	r0, #1
 80092f8:	e7f8      	b.n	80092ec <__ascii_mbtowc+0x16>

080092fa <_realloc_r>:
 80092fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fe:	4680      	mov	r8, r0
 8009300:	4615      	mov	r5, r2
 8009302:	460c      	mov	r4, r1
 8009304:	b921      	cbnz	r1, 8009310 <_realloc_r+0x16>
 8009306:	4611      	mov	r1, r2
 8009308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930c:	f7fd be86 	b.w	800701c <_malloc_r>
 8009310:	b92a      	cbnz	r2, 800931e <_realloc_r+0x24>
 8009312:	f7fd fe11 	bl	8006f38 <_free_r>
 8009316:	2400      	movs	r4, #0
 8009318:	4620      	mov	r0, r4
 800931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931e:	f000 f840 	bl	80093a2 <_malloc_usable_size_r>
 8009322:	4285      	cmp	r5, r0
 8009324:	4606      	mov	r6, r0
 8009326:	d802      	bhi.n	800932e <_realloc_r+0x34>
 8009328:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800932c:	d8f4      	bhi.n	8009318 <_realloc_r+0x1e>
 800932e:	4629      	mov	r1, r5
 8009330:	4640      	mov	r0, r8
 8009332:	f7fd fe73 	bl	800701c <_malloc_r>
 8009336:	4607      	mov	r7, r0
 8009338:	2800      	cmp	r0, #0
 800933a:	d0ec      	beq.n	8009316 <_realloc_r+0x1c>
 800933c:	42b5      	cmp	r5, r6
 800933e:	462a      	mov	r2, r5
 8009340:	4621      	mov	r1, r4
 8009342:	bf28      	it	cs
 8009344:	4632      	movcs	r2, r6
 8009346:	f7fc ff92 	bl	800626e <memcpy>
 800934a:	4621      	mov	r1, r4
 800934c:	4640      	mov	r0, r8
 800934e:	f7fd fdf3 	bl	8006f38 <_free_r>
 8009352:	463c      	mov	r4, r7
 8009354:	e7e0      	b.n	8009318 <_realloc_r+0x1e>

08009356 <__ascii_wctomb>:
 8009356:	4603      	mov	r3, r0
 8009358:	4608      	mov	r0, r1
 800935a:	b141      	cbz	r1, 800936e <__ascii_wctomb+0x18>
 800935c:	2aff      	cmp	r2, #255	@ 0xff
 800935e:	d904      	bls.n	800936a <__ascii_wctomb+0x14>
 8009360:	228a      	movs	r2, #138	@ 0x8a
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	4770      	bx	lr
 800936a:	2001      	movs	r0, #1
 800936c:	700a      	strb	r2, [r1, #0]
 800936e:	4770      	bx	lr

08009370 <fiprintf>:
 8009370:	b40e      	push	{r1, r2, r3}
 8009372:	b503      	push	{r0, r1, lr}
 8009374:	4601      	mov	r1, r0
 8009376:	ab03      	add	r3, sp, #12
 8009378:	4805      	ldr	r0, [pc, #20]	@ (8009390 <fiprintf+0x20>)
 800937a:	f853 2b04 	ldr.w	r2, [r3], #4
 800937e:	6800      	ldr	r0, [r0, #0]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f000 f83d 	bl	8009400 <_vfiprintf_r>
 8009386:	b002      	add	sp, #8
 8009388:	f85d eb04 	ldr.w	lr, [sp], #4
 800938c:	b003      	add	sp, #12
 800938e:	4770      	bx	lr
 8009390:	20000018 	.word	0x20000018

08009394 <abort>:
 8009394:	2006      	movs	r0, #6
 8009396:	b508      	push	{r3, lr}
 8009398:	f000 fa06 	bl	80097a8 <raise>
 800939c:	2001      	movs	r0, #1
 800939e:	f7f8 fc95 	bl	8001ccc <_exit>

080093a2 <_malloc_usable_size_r>:
 80093a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a6:	1f18      	subs	r0, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bfbc      	itt	lt
 80093ac:	580b      	ldrlt	r3, [r1, r0]
 80093ae:	18c0      	addlt	r0, r0, r3
 80093b0:	4770      	bx	lr

080093b2 <__sfputc_r>:
 80093b2:	6893      	ldr	r3, [r2, #8]
 80093b4:	b410      	push	{r4}
 80093b6:	3b01      	subs	r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	6093      	str	r3, [r2, #8]
 80093bc:	da07      	bge.n	80093ce <__sfputc_r+0x1c>
 80093be:	6994      	ldr	r4, [r2, #24]
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	db01      	blt.n	80093c8 <__sfputc_r+0x16>
 80093c4:	290a      	cmp	r1, #10
 80093c6:	d102      	bne.n	80093ce <__sfputc_r+0x1c>
 80093c8:	bc10      	pop	{r4}
 80093ca:	f000 b931 	b.w	8009630 <__swbuf_r>
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	1c58      	adds	r0, r3, #1
 80093d2:	6010      	str	r0, [r2, #0]
 80093d4:	7019      	strb	r1, [r3, #0]
 80093d6:	4608      	mov	r0, r1
 80093d8:	bc10      	pop	{r4}
 80093da:	4770      	bx	lr

080093dc <__sfputs_r>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	4606      	mov	r6, r0
 80093e0:	460f      	mov	r7, r1
 80093e2:	4614      	mov	r4, r2
 80093e4:	18d5      	adds	r5, r2, r3
 80093e6:	42ac      	cmp	r4, r5
 80093e8:	d101      	bne.n	80093ee <__sfputs_r+0x12>
 80093ea:	2000      	movs	r0, #0
 80093ec:	e007      	b.n	80093fe <__sfputs_r+0x22>
 80093ee:	463a      	mov	r2, r7
 80093f0:	4630      	mov	r0, r6
 80093f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f6:	f7ff ffdc 	bl	80093b2 <__sfputc_r>
 80093fa:	1c43      	adds	r3, r0, #1
 80093fc:	d1f3      	bne.n	80093e6 <__sfputs_r+0xa>
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009400 <_vfiprintf_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	460d      	mov	r5, r1
 8009406:	4614      	mov	r4, r2
 8009408:	4698      	mov	r8, r3
 800940a:	4606      	mov	r6, r0
 800940c:	b09d      	sub	sp, #116	@ 0x74
 800940e:	b118      	cbz	r0, 8009418 <_vfiprintf_r+0x18>
 8009410:	6a03      	ldr	r3, [r0, #32]
 8009412:	b90b      	cbnz	r3, 8009418 <_vfiprintf_r+0x18>
 8009414:	f7fc fdd0 	bl	8005fb8 <__sinit>
 8009418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x2a>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x2a>
 8009424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009426:	f7fc ff12 	bl	800624e <__retarget_lock_acquire_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	071b      	lsls	r3, r3, #28
 800942e:	d501      	bpl.n	8009434 <_vfiprintf_r+0x34>
 8009430:	692b      	ldr	r3, [r5, #16]
 8009432:	b99b      	cbnz	r3, 800945c <_vfiprintf_r+0x5c>
 8009434:	4629      	mov	r1, r5
 8009436:	4630      	mov	r0, r6
 8009438:	f000 f938 	bl	80096ac <__swsetup_r>
 800943c:	b170      	cbz	r0, 800945c <_vfiprintf_r+0x5c>
 800943e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009440:	07dc      	lsls	r4, r3, #31
 8009442:	d504      	bpl.n	800944e <_vfiprintf_r+0x4e>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b01d      	add	sp, #116	@ 0x74
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	0598      	lsls	r0, r3, #22
 8009452:	d4f7      	bmi.n	8009444 <_vfiprintf_r+0x44>
 8009454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009456:	f7fc fefb 	bl	8006250 <__retarget_lock_release_recursive>
 800945a:	e7f3      	b.n	8009444 <_vfiprintf_r+0x44>
 800945c:	2300      	movs	r3, #0
 800945e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009460:	2320      	movs	r3, #32
 8009462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009466:	2330      	movs	r3, #48	@ 0x30
 8009468:	f04f 0901 	mov.w	r9, #1
 800946c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009470:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800961c <_vfiprintf_r+0x21c>
 8009474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009478:	4623      	mov	r3, r4
 800947a:	469a      	mov	sl, r3
 800947c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009480:	b10a      	cbz	r2, 8009486 <_vfiprintf_r+0x86>
 8009482:	2a25      	cmp	r2, #37	@ 0x25
 8009484:	d1f9      	bne.n	800947a <_vfiprintf_r+0x7a>
 8009486:	ebba 0b04 	subs.w	fp, sl, r4
 800948a:	d00b      	beq.n	80094a4 <_vfiprintf_r+0xa4>
 800948c:	465b      	mov	r3, fp
 800948e:	4622      	mov	r2, r4
 8009490:	4629      	mov	r1, r5
 8009492:	4630      	mov	r0, r6
 8009494:	f7ff ffa2 	bl	80093dc <__sfputs_r>
 8009498:	3001      	adds	r0, #1
 800949a:	f000 80a7 	beq.w	80095ec <_vfiprintf_r+0x1ec>
 800949e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a0:	445a      	add	r2, fp
 80094a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80094a4:	f89a 3000 	ldrb.w	r3, [sl]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 809f 	beq.w	80095ec <_vfiprintf_r+0x1ec>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b8:	f10a 0a01 	add.w	sl, sl, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80094c6:	4654      	mov	r4, sl
 80094c8:	2205      	movs	r2, #5
 80094ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ce:	4853      	ldr	r0, [pc, #332]	@ (800961c <_vfiprintf_r+0x21c>)
 80094d0:	f7fc febf 	bl	8006252 <memchr>
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	b9d8      	cbnz	r0, 8009510 <_vfiprintf_r+0x110>
 80094d8:	06d1      	lsls	r1, r2, #27
 80094da:	bf44      	itt	mi
 80094dc:	2320      	movmi	r3, #32
 80094de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094e2:	0713      	lsls	r3, r2, #28
 80094e4:	bf44      	itt	mi
 80094e6:	232b      	movmi	r3, #43	@ 0x2b
 80094e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094ec:	f89a 3000 	ldrb.w	r3, [sl]
 80094f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094f2:	d015      	beq.n	8009520 <_vfiprintf_r+0x120>
 80094f4:	4654      	mov	r4, sl
 80094f6:	2000      	movs	r0, #0
 80094f8:	f04f 0c0a 	mov.w	ip, #10
 80094fc:	9a07      	ldr	r2, [sp, #28]
 80094fe:	4621      	mov	r1, r4
 8009500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009504:	3b30      	subs	r3, #48	@ 0x30
 8009506:	2b09      	cmp	r3, #9
 8009508:	d94b      	bls.n	80095a2 <_vfiprintf_r+0x1a2>
 800950a:	b1b0      	cbz	r0, 800953a <_vfiprintf_r+0x13a>
 800950c:	9207      	str	r2, [sp, #28]
 800950e:	e014      	b.n	800953a <_vfiprintf_r+0x13a>
 8009510:	eba0 0308 	sub.w	r3, r0, r8
 8009514:	fa09 f303 	lsl.w	r3, r9, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	46a2      	mov	sl, r4
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	e7d2      	b.n	80094c6 <_vfiprintf_r+0xc6>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	1d19      	adds	r1, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9103      	str	r1, [sp, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bfbb      	ittet	lt
 800952c:	425b      	neglt	r3, r3
 800952e:	f042 0202 	orrlt.w	r2, r2, #2
 8009532:	9307      	strge	r3, [sp, #28]
 8009534:	9307      	strlt	r3, [sp, #28]
 8009536:	bfb8      	it	lt
 8009538:	9204      	strlt	r2, [sp, #16]
 800953a:	7823      	ldrb	r3, [r4, #0]
 800953c:	2b2e      	cmp	r3, #46	@ 0x2e
 800953e:	d10a      	bne.n	8009556 <_vfiprintf_r+0x156>
 8009540:	7863      	ldrb	r3, [r4, #1]
 8009542:	2b2a      	cmp	r3, #42	@ 0x2a
 8009544:	d132      	bne.n	80095ac <_vfiprintf_r+0x1ac>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	3402      	adds	r4, #2
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009620 <_vfiprintf_r+0x220>
 800955a:	2203      	movs	r2, #3
 800955c:	4650      	mov	r0, sl
 800955e:	7821      	ldrb	r1, [r4, #0]
 8009560:	f7fc fe77 	bl	8006252 <memchr>
 8009564:	b138      	cbz	r0, 8009576 <_vfiprintf_r+0x176>
 8009566:	2240      	movs	r2, #64	@ 0x40
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	eba0 000a 	sub.w	r0, r0, sl
 800956e:	4082      	lsls	r2, r0
 8009570:	4313      	orrs	r3, r2
 8009572:	3401      	adds	r4, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957a:	2206      	movs	r2, #6
 800957c:	4829      	ldr	r0, [pc, #164]	@ (8009624 <_vfiprintf_r+0x224>)
 800957e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009582:	f7fc fe66 	bl	8006252 <memchr>
 8009586:	2800      	cmp	r0, #0
 8009588:	d03f      	beq.n	800960a <_vfiprintf_r+0x20a>
 800958a:	4b27      	ldr	r3, [pc, #156]	@ (8009628 <_vfiprintf_r+0x228>)
 800958c:	bb1b      	cbnz	r3, 80095d6 <_vfiprintf_r+0x1d6>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	3307      	adds	r3, #7
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	3308      	adds	r3, #8
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800959c:	443b      	add	r3, r7
 800959e:	9309      	str	r3, [sp, #36]	@ 0x24
 80095a0:	e76a      	b.n	8009478 <_vfiprintf_r+0x78>
 80095a2:	460c      	mov	r4, r1
 80095a4:	2001      	movs	r0, #1
 80095a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095aa:	e7a8      	b.n	80094fe <_vfiprintf_r+0xfe>
 80095ac:	2300      	movs	r3, #0
 80095ae:	f04f 0c0a 	mov.w	ip, #10
 80095b2:	4619      	mov	r1, r3
 80095b4:	3401      	adds	r4, #1
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	4620      	mov	r0, r4
 80095ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095be:	3a30      	subs	r2, #48	@ 0x30
 80095c0:	2a09      	cmp	r2, #9
 80095c2:	d903      	bls.n	80095cc <_vfiprintf_r+0x1cc>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0c6      	beq.n	8009556 <_vfiprintf_r+0x156>
 80095c8:	9105      	str	r1, [sp, #20]
 80095ca:	e7c4      	b.n	8009556 <_vfiprintf_r+0x156>
 80095cc:	4604      	mov	r4, r0
 80095ce:	2301      	movs	r3, #1
 80095d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d4:	e7f0      	b.n	80095b8 <_vfiprintf_r+0x1b8>
 80095d6:	ab03      	add	r3, sp, #12
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	462a      	mov	r2, r5
 80095dc:	4630      	mov	r0, r6
 80095de:	4b13      	ldr	r3, [pc, #76]	@ (800962c <_vfiprintf_r+0x22c>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	f7fb fe8f 	bl	8005304 <_printf_float>
 80095e6:	4607      	mov	r7, r0
 80095e8:	1c78      	adds	r0, r7, #1
 80095ea:	d1d6      	bne.n	800959a <_vfiprintf_r+0x19a>
 80095ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095ee:	07d9      	lsls	r1, r3, #31
 80095f0:	d405      	bmi.n	80095fe <_vfiprintf_r+0x1fe>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	059a      	lsls	r2, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_vfiprintf_r+0x1fe>
 80095f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095fa:	f7fc fe29 	bl	8006250 <__retarget_lock_release_recursive>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	065b      	lsls	r3, r3, #25
 8009602:	f53f af1f 	bmi.w	8009444 <_vfiprintf_r+0x44>
 8009606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009608:	e71e      	b.n	8009448 <_vfiprintf_r+0x48>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4630      	mov	r0, r6
 8009612:	4b06      	ldr	r3, [pc, #24]	@ (800962c <_vfiprintf_r+0x22c>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	f7fc f913 	bl	8005840 <_printf_i>
 800961a:	e7e4      	b.n	80095e6 <_vfiprintf_r+0x1e6>
 800961c:	08009d39 	.word	0x08009d39
 8009620:	08009d3f 	.word	0x08009d3f
 8009624:	08009d43 	.word	0x08009d43
 8009628:	08005305 	.word	0x08005305
 800962c:	080093dd 	.word	0x080093dd

08009630 <__swbuf_r>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	460e      	mov	r6, r1
 8009634:	4614      	mov	r4, r2
 8009636:	4605      	mov	r5, r0
 8009638:	b118      	cbz	r0, 8009642 <__swbuf_r+0x12>
 800963a:	6a03      	ldr	r3, [r0, #32]
 800963c:	b90b      	cbnz	r3, 8009642 <__swbuf_r+0x12>
 800963e:	f7fc fcbb 	bl	8005fb8 <__sinit>
 8009642:	69a3      	ldr	r3, [r4, #24]
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	071a      	lsls	r2, r3, #28
 800964a:	d501      	bpl.n	8009650 <__swbuf_r+0x20>
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b943      	cbnz	r3, 8009662 <__swbuf_r+0x32>
 8009650:	4621      	mov	r1, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f82a 	bl	80096ac <__swsetup_r>
 8009658:	b118      	cbz	r0, 8009662 <__swbuf_r+0x32>
 800965a:	f04f 37ff 	mov.w	r7, #4294967295
 800965e:	4638      	mov	r0, r7
 8009660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	6922      	ldr	r2, [r4, #16]
 8009666:	b2f6      	uxtb	r6, r6
 8009668:	1a98      	subs	r0, r3, r2
 800966a:	6963      	ldr	r3, [r4, #20]
 800966c:	4637      	mov	r7, r6
 800966e:	4283      	cmp	r3, r0
 8009670:	dc05      	bgt.n	800967e <__swbuf_r+0x4e>
 8009672:	4621      	mov	r1, r4
 8009674:	4628      	mov	r0, r5
 8009676:	f7ff fa59 	bl	8008b2c <_fflush_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	d1ed      	bne.n	800965a <__swbuf_r+0x2a>
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	3b01      	subs	r3, #1
 8009682:	60a3      	str	r3, [r4, #8]
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	6022      	str	r2, [r4, #0]
 800968a:	701e      	strb	r6, [r3, #0]
 800968c:	6962      	ldr	r2, [r4, #20]
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	429a      	cmp	r2, r3
 8009692:	d004      	beq.n	800969e <__swbuf_r+0x6e>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d5e1      	bpl.n	800965e <__swbuf_r+0x2e>
 800969a:	2e0a      	cmp	r6, #10
 800969c:	d1df      	bne.n	800965e <__swbuf_r+0x2e>
 800969e:	4621      	mov	r1, r4
 80096a0:	4628      	mov	r0, r5
 80096a2:	f7ff fa43 	bl	8008b2c <_fflush_r>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d0d9      	beq.n	800965e <__swbuf_r+0x2e>
 80096aa:	e7d6      	b.n	800965a <__swbuf_r+0x2a>

080096ac <__swsetup_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4b29      	ldr	r3, [pc, #164]	@ (8009754 <__swsetup_r+0xa8>)
 80096b0:	4605      	mov	r5, r0
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	460c      	mov	r4, r1
 80096b6:	b118      	cbz	r0, 80096c0 <__swsetup_r+0x14>
 80096b8:	6a03      	ldr	r3, [r0, #32]
 80096ba:	b90b      	cbnz	r3, 80096c0 <__swsetup_r+0x14>
 80096bc:	f7fc fc7c 	bl	8005fb8 <__sinit>
 80096c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c4:	0719      	lsls	r1, r3, #28
 80096c6:	d422      	bmi.n	800970e <__swsetup_r+0x62>
 80096c8:	06da      	lsls	r2, r3, #27
 80096ca:	d407      	bmi.n	80096dc <__swsetup_r+0x30>
 80096cc:	2209      	movs	r2, #9
 80096ce:	602a      	str	r2, [r5, #0]
 80096d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	e033      	b.n	8009744 <__swsetup_r+0x98>
 80096dc:	0758      	lsls	r0, r3, #29
 80096de:	d512      	bpl.n	8009706 <__swsetup_r+0x5a>
 80096e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096e2:	b141      	cbz	r1, 80096f6 <__swsetup_r+0x4a>
 80096e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096e8:	4299      	cmp	r1, r3
 80096ea:	d002      	beq.n	80096f2 <__swsetup_r+0x46>
 80096ec:	4628      	mov	r0, r5
 80096ee:	f7fd fc23 	bl	8006f38 <_free_r>
 80096f2:	2300      	movs	r3, #0
 80096f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	2300      	movs	r3, #0
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f043 0308 	orr.w	r3, r3, #8
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	b94b      	cbnz	r3, 8009726 <__swsetup_r+0x7a>
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800971c:	d003      	beq.n	8009726 <__swsetup_r+0x7a>
 800971e:	4621      	mov	r1, r4
 8009720:	4628      	mov	r0, r5
 8009722:	f000 f882 	bl	800982a <__smakebuf_r>
 8009726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972a:	f013 0201 	ands.w	r2, r3, #1
 800972e:	d00a      	beq.n	8009746 <__swsetup_r+0x9a>
 8009730:	2200      	movs	r2, #0
 8009732:	60a2      	str	r2, [r4, #8]
 8009734:	6962      	ldr	r2, [r4, #20]
 8009736:	4252      	negs	r2, r2
 8009738:	61a2      	str	r2, [r4, #24]
 800973a:	6922      	ldr	r2, [r4, #16]
 800973c:	b942      	cbnz	r2, 8009750 <__swsetup_r+0xa4>
 800973e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009742:	d1c5      	bne.n	80096d0 <__swsetup_r+0x24>
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	0799      	lsls	r1, r3, #30
 8009748:	bf58      	it	pl
 800974a:	6962      	ldrpl	r2, [r4, #20]
 800974c:	60a2      	str	r2, [r4, #8]
 800974e:	e7f4      	b.n	800973a <__swsetup_r+0x8e>
 8009750:	2000      	movs	r0, #0
 8009752:	e7f7      	b.n	8009744 <__swsetup_r+0x98>
 8009754:	20000018 	.word	0x20000018

08009758 <_raise_r>:
 8009758:	291f      	cmp	r1, #31
 800975a:	b538      	push	{r3, r4, r5, lr}
 800975c:	4605      	mov	r5, r0
 800975e:	460c      	mov	r4, r1
 8009760:	d904      	bls.n	800976c <_raise_r+0x14>
 8009762:	2316      	movs	r3, #22
 8009764:	6003      	str	r3, [r0, #0]
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800976e:	b112      	cbz	r2, 8009776 <_raise_r+0x1e>
 8009770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009774:	b94b      	cbnz	r3, 800978a <_raise_r+0x32>
 8009776:	4628      	mov	r0, r5
 8009778:	f000 f830 	bl	80097dc <_getpid_r>
 800977c:	4622      	mov	r2, r4
 800977e:	4601      	mov	r1, r0
 8009780:	4628      	mov	r0, r5
 8009782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009786:	f000 b817 	b.w	80097b8 <_kill_r>
 800978a:	2b01      	cmp	r3, #1
 800978c:	d00a      	beq.n	80097a4 <_raise_r+0x4c>
 800978e:	1c59      	adds	r1, r3, #1
 8009790:	d103      	bne.n	800979a <_raise_r+0x42>
 8009792:	2316      	movs	r3, #22
 8009794:	6003      	str	r3, [r0, #0]
 8009796:	2001      	movs	r0, #1
 8009798:	e7e7      	b.n	800976a <_raise_r+0x12>
 800979a:	2100      	movs	r1, #0
 800979c:	4620      	mov	r0, r4
 800979e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097a2:	4798      	blx	r3
 80097a4:	2000      	movs	r0, #0
 80097a6:	e7e0      	b.n	800976a <_raise_r+0x12>

080097a8 <raise>:
 80097a8:	4b02      	ldr	r3, [pc, #8]	@ (80097b4 <raise+0xc>)
 80097aa:	4601      	mov	r1, r0
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	f7ff bfd3 	b.w	8009758 <_raise_r>
 80097b2:	bf00      	nop
 80097b4:	20000018 	.word	0x20000018

080097b8 <_kill_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	2300      	movs	r3, #0
 80097bc:	4d06      	ldr	r5, [pc, #24]	@ (80097d8 <_kill_r+0x20>)
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	602b      	str	r3, [r5, #0]
 80097c6:	f7f8 fa71 	bl	8001cac <_kill>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d102      	bne.n	80097d4 <_kill_r+0x1c>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	b103      	cbz	r3, 80097d4 <_kill_r+0x1c>
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	bf00      	nop
 80097d8:	2000053c 	.word	0x2000053c

080097dc <_getpid_r>:
 80097dc:	f7f8 ba5f 	b.w	8001c9e <_getpid>

080097e0 <__swhatbuf_r>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	460c      	mov	r4, r1
 80097e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e8:	4615      	mov	r5, r2
 80097ea:	2900      	cmp	r1, #0
 80097ec:	461e      	mov	r6, r3
 80097ee:	b096      	sub	sp, #88	@ 0x58
 80097f0:	da0c      	bge.n	800980c <__swhatbuf_r+0x2c>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	2100      	movs	r1, #0
 80097f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097fa:	bf14      	ite	ne
 80097fc:	2340      	movne	r3, #64	@ 0x40
 80097fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009802:	2000      	movs	r0, #0
 8009804:	6031      	str	r1, [r6, #0]
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	b016      	add	sp, #88	@ 0x58
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	466a      	mov	r2, sp
 800980e:	f000 f849 	bl	80098a4 <_fstat_r>
 8009812:	2800      	cmp	r0, #0
 8009814:	dbed      	blt.n	80097f2 <__swhatbuf_r+0x12>
 8009816:	9901      	ldr	r1, [sp, #4]
 8009818:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800981c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009820:	4259      	negs	r1, r3
 8009822:	4159      	adcs	r1, r3
 8009824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009828:	e7eb      	b.n	8009802 <__swhatbuf_r+0x22>

0800982a <__smakebuf_r>:
 800982a:	898b      	ldrh	r3, [r1, #12]
 800982c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982e:	079d      	lsls	r5, r3, #30
 8009830:	4606      	mov	r6, r0
 8009832:	460c      	mov	r4, r1
 8009834:	d507      	bpl.n	8009846 <__smakebuf_r+0x1c>
 8009836:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	2301      	movs	r3, #1
 8009840:	6163      	str	r3, [r4, #20]
 8009842:	b003      	add	sp, #12
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009846:	466a      	mov	r2, sp
 8009848:	ab01      	add	r3, sp, #4
 800984a:	f7ff ffc9 	bl	80097e0 <__swhatbuf_r>
 800984e:	9f00      	ldr	r7, [sp, #0]
 8009850:	4605      	mov	r5, r0
 8009852:	4639      	mov	r1, r7
 8009854:	4630      	mov	r0, r6
 8009856:	f7fd fbe1 	bl	800701c <_malloc_r>
 800985a:	b948      	cbnz	r0, 8009870 <__smakebuf_r+0x46>
 800985c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009860:	059a      	lsls	r2, r3, #22
 8009862:	d4ee      	bmi.n	8009842 <__smakebuf_r+0x18>
 8009864:	f023 0303 	bic.w	r3, r3, #3
 8009868:	f043 0302 	orr.w	r3, r3, #2
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	e7e2      	b.n	8009836 <__smakebuf_r+0xc>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	6020      	str	r0, [r4, #0]
 8009880:	b15b      	cbz	r3, 800989a <__smakebuf_r+0x70>
 8009882:	4630      	mov	r0, r6
 8009884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009888:	f000 f81e 	bl	80098c8 <_isatty_r>
 800988c:	b128      	cbz	r0, 800989a <__smakebuf_r+0x70>
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	f043 0301 	orr.w	r3, r3, #1
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	431d      	orrs	r5, r3
 800989e:	81a5      	strh	r5, [r4, #12]
 80098a0:	e7cf      	b.n	8009842 <__smakebuf_r+0x18>
	...

080098a4 <_fstat_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	2300      	movs	r3, #0
 80098a8:	4d06      	ldr	r5, [pc, #24]	@ (80098c4 <_fstat_r+0x20>)
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	f7f8 fa5a 	bl	8001d6a <_fstat>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d102      	bne.n	80098c0 <_fstat_r+0x1c>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b103      	cbz	r3, 80098c0 <_fstat_r+0x1c>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	bf00      	nop
 80098c4:	2000053c 	.word	0x2000053c

080098c8 <_isatty_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	2300      	movs	r3, #0
 80098cc:	4d05      	ldr	r5, [pc, #20]	@ (80098e4 <_isatty_r+0x1c>)
 80098ce:	4604      	mov	r4, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	f7f8 fa58 	bl	8001d88 <_isatty>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_isatty_r+0x1a>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_isatty_r+0x1a>
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	2000053c 	.word	0x2000053c

080098e8 <_init>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr

080098f4 <_fini>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr
